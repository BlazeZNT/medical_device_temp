{"version":3,"file":"is.js","sources":["../../../../src/utils/is.ts"],"sourcesContent":["const { toString } = Object.prototype;\n\nexport function is(val: unknown, type: string) {\n  return toString.call(val) === `[object ${type}]`;\n}\n\nexport function isDef<T = unknown>(val?: T): val is T {\n  return typeof val !== 'undefined';\n}\n\nexport function isUnDef<T = unknown>(val?: T): val is T {\n  return !isDef(val);\n}\n\nexport function isObject(val: any): val is Record<any, any> {\n  return val !== null && is(val, 'Object');\n}\n\nexport function isEmpty<T = unknown>(val: T): val is T {\n  if (isArray(val) || isString(val)) {\n    return val.length === 0;\n  }\n\n  if (val instanceof Map || val instanceof Set) {\n    return val.size === 0;\n  }\n\n  if (isObject(val)) {\n    return Object.keys(val).length === 0;\n  }\n\n  return false;\n}\n\nexport function isDate(val: unknown): val is Date {\n  return is(val, 'Date');\n}\n\nexport function isNull(val: unknown): val is null {\n  return val === null;\n}\n\nexport function isNullAndUnDef(val: unknown): val is null | undefined {\n  return isUnDef(val) && isNull(val);\n}\n\nexport function isNullOrUnDef(val: unknown): val is null | undefined {\n  return isUnDef(val) || isNull(val);\n}\n\nexport function isNumber(val: unknown): val is number {\n  return is(val, 'Number');\n}\n\nexport function isPromise<T = any>(val: unknown): val is Promise<T> {\n  return is(val, 'Promise') && isObject(val) && isFunction(val.then) && isFunction(val.catch);\n}\n\nexport function isString(val: unknown): val is string {\n  return is(val, 'String');\n}\n\n// eslint-disable-next-line ts/no-unsafe-function-type\nexport function isFunction(val: unknown): val is Function {\n  return typeof val === 'function';\n}\n\nexport function isBoolean(val: unknown): val is boolean {\n  return is(val, 'Boolean');\n}\n\nexport function isRegExp(val: unknown): val is RegExp {\n  return is(val, 'RegExp');\n}\n\nexport function isArray(val: any): val is Array<any> {\n  return val && Array.isArray(val);\n}\n\nexport function isWindow(val: any): val is Window {\n  return typeof window !== 'undefined' && is(val, 'Window');\n}\n\nexport function isElement(val: unknown): val is Element {\n  return isObject(val) && !!val.tagName;\n}\n\nexport function isMap(val: unknown): val is Map<any, any> {\n  return is(val, 'Map');\n}\n\nexport const isServer = typeof window === 'undefined';\n\nexport const isClient = !isServer;\n\nexport function isUrl(path: string): boolean {\n  const reg\n  // eslint-disable-next-line regexp/no-super-linear-backtracking\n        = /^(?:https|http|ftp|rtsp|mms):\\/\\/(?:(?:[\\w!~*'().&=+$%-]+: )?[\\w!~*'().&=+$%-]+@)?(?:(?:\\d{1,3}.){3}\\d{1,3}|(?:[\\w!~*'()-]+.)*(?:[0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z].[a-zA-Z]{2,6})(?::\\d{1,4})?(?:\\/?|(?:\\/[\\w!~*'().;?:@&=+$,%#-]+)+\\/?)$/;\n  return reg.test(path);\n}\n"],"names":[],"mappings":";AAMO,SAAS,MAAmB,KAAmB;AACpD,SAAO,OAAO,QAAQ;AACxB;AAEO,SAAS,QAAqB,KAAmB;AAC/C,SAAA,CAAC,MAAM,GAAG;AACnB;AA0BO,SAAS,OAAO,KAA2B;AAChD,SAAO,QAAQ;AACjB;AAMO,SAAS,cAAc,KAAuC;AACnE,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG;AACnC;AAAA,QAAA,IAAA;"}