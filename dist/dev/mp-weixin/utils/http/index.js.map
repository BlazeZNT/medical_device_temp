{"version":3,"file":"index.js","sources":["../../../../../src/utils/http/index.ts"],"sourcesContent":["import { createAlova } from 'alova';\nimport AdapterUniapp from '@alova/adapter-uniapp';\nimport { assign } from 'lodash-es';\nimport { handleHttpStatus, handleLogicError } from './faultTolerance';\nimport { getBaseUrl, isUseMock } from '@/utils/env';\nimport { mockAdapter } from '@/mock';\nimport { ContentTypeEnum, ResultEnum } from '@/enums/httpEnum';\nimport type { API } from '@/services/model/baseModel';\nimport { getAuthorization } from '@/utils/auth';\n\nconst BASE_URL = getBaseUrl();\n\nconst ContentType = {\n  'Content-Type': ContentTypeEnum.JSON,\n  'Accept': 'application/json, text/plain, */*',\n};\n\n/**\n * alova 请求实例\n * @link https://github.com/alovajs/alova\n */\nconst alovaInstance = createAlova({\n  baseURL: BASE_URL,\n  localCache: null, // 设置为null即可全局关闭全部请求缓存\n  ...AdapterUniapp({\n    /* #ifndef APP-PLUS */\n    mockRequest: isUseMock() ? mockAdapter : undefined, // APP 平台无法使用mock\n    /* #endif */\n  }),\n  timeout: 5000,\n  beforeRequest: async (method) => {\n    method.config.headers = assign(method.config.headers, ContentType);\n    const { config } = method;\n    const ignoreAuth = !config.meta?.ignoreAuth;\n    const authorization = ignoreAuth ? getAuthorization() : null;\n    if (ignoreAuth && !authorization) {\n      throw new Error('[请求错误]：未登录');\n    }\n    method.config.headers.authorization = getAuthorization();\n  },\n  responded: {\n    /**\n     * 请求成功的拦截器\n     * 第二个参数为当前请求的method实例，你可以用它同步请求前后的配置信息\n     * @param response\n     * @param method\n     */\n    onSuccess: async (response, method) => {\n      const { config } = method;\n      const { requestType } = config;\n      const { statusCode, data: rawData, errMsg } = response as UniNamespace.RequestSuccessCallbackResult;\n      if (statusCode === 200) {\n        if (requestType) {\n          return response;\n        }\n        const { code, message, data } = rawData as API;\n        if (code === ResultEnum.SUCCESS) {\n          return data as any;\n        }\n        // 逻辑错误处理，与业务相关\n        handleLogicError(code, message);\n        throw new Error(`请求错误[${code}]：${message}`);\n      }\n      // 处理http状态错误\n      handleHttpStatus(statusCode, message || '');\n      throw new Error(`HTTP请求错误[${statusCode}]：${errMsg}`);\n    },\n\n    /**\n     * 请求失败的拦截器，请求错误时将会进入该拦截器。\n     */\n    onError: async (err) => {\n      throw new Error(`请求失败：${err}`);\n    },\n    /**\n     * 请求完成的拦截器, 无论请求成功或失败都会进入该拦截器\n     */\n    onComplete: async () => {\n      // 处理请求完成逻辑\n    },\n  },\n});\n\nexport const request = alovaInstance;\n"],"names":["getBaseUrl","ContentTypeEnum","createAlova","AdapterUniapp","isUseMock","mockAdapter","assign","getAuthorization","message","ResultEnum","handleLogicError","handleHttpStatus"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,MAAA,gBAAA,QAAA,wBAAA,GAAA,4BAAA,QAAA,qBAAA,GAAA,YAAA,QAAA,WAAA,GAAA,aAAA,QAAA,qBAAA,GAAA,iBAAA,QAAA,yBAAA,GAAA,aAAA,QAAA,YAAA;AAAA,MAAM,WAAWA,UAAW,EAAA;AAE5B,MAAM,cAAc;AAAA,EAClB,gBAAgBC,eAAgB,EAAA;AAAA,EAChC,UAAU;AACZ;AAMA,MAAM,gBAAgBC,cAAAA,EAAY;AAAA,EAChC,SAAS;AAAA,EACT,YAAY;AAAA,GACTC,gBAAc;AAAA,EAEf,aAAaC,UAAU,EAAA,IAAIC,WAAc,IAAA;AAAA;AAAA,CAE1C,IAP+B;AAAA,EAQhC,SAAS;AAAA,EACT,eAAe,CAAO,WAAW;AApBnC;AAqBI,WAAO,OAAO,UAAUC,cAAA,EAAO,OAAO,OAAO,SAAS,WAAW;AAC3D,UAAA,EAAE,OAAW,IAAA;AACb,UAAA,aAAa,GAAC,YAAO,SAAP,mBAAa;AAC3B,UAAA,gBAAgB,aAAaC,WAAA,EAAA,IAAqB;AACpD,QAAA,cAAc,CAAC,eAAe;AAC1B,YAAA,IAAI,MAAM,YAAY;AAAA,IAC9B;AACO,WAAA,OAAO,QAAQ,gBAAgBA,WAAiB,EAAA;AAAA,EACzD;AAAA,EACA,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOT,WAAW,CAAO,UAAU,WAAW;AAC/B,YAAA,EAAE,OAAW,IAAA;AACb,YAAA,EAAE,YAAgB,IAAA;AACxB,YAAM,EAAE,YAAY,MAAM,SAAS,WAAW;AAC9C,UAAI,eAAe,KAAK;AACtB,YAAI,aAAa;AACR,iBAAA;AAAA,QACT;AACA,cAAM,EAAE,MAAM,SAAAC,UAAS,SAAS;AAC5B,YAAA,SAASC,iBAAW,SAAS;AACxB,iBAAA;AAAA,QACT;AAEAC,oCAAiB,MAAMF,QAAO;AAC9B,cAAM,IAAI,MAAM,QAAQ,IAAI,KAAKA,QAAO,EAAE;AAAA,MAC5C;AAEiBG,gCAAAA,EAAA,YAAY,WAAW,EAAE;AAC1C,YAAM,IAAI,MAAM,YAAY,UAAU,KAAK,MAAM,EAAE;AAAA,IACrD;AAAA;AAAA;AAAA;AAAA,IAKA,SAAS,CAAO,QAAQ;AACtB,YAAM,IAAI,MAAM,QAAQ,GAAG,EAAE;AAAA,IAC/B;AAAA;AAAA;AAAA;AAAA,IAIA,YAAY,MAAY;AAAA,IAExB;AAAA,EACF;AACF,EAAC;AAEM,MAAM,UAAU;AAAA,QAAA,IAAA;"}