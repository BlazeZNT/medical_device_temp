var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue$1) {
  "use strict";
  const _imports_0$2 = "/static/logo.png";
  const _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key2, val] of props) {
      target[key2] = val;
    }
    return target;
  };
  const _sfc_main$A = {};
  function _sfc_render$z(_ctx, _cache) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "logo" }, [
      vue$1.createElementVNode("image", { src: _imports_0$2 })
    ]);
  }
  const FixedLogo = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$z], ["__scopeId", "data-v-daebe06d"], ["__file", "D:/ty/medical-device/src/components/Common/FixedLogo.vue"]]);
  const staticUrl = void 0;
  const _static = (url = "", staticurl = "local") => {
    if (staticurl === "") {
      staticurl = staticUrl;
    }
    if (staticurl !== "local") {
      url = _cdn(url, staticurl);
    }
    return url;
  };
  const $url = {
    static: _static
  };
  const ON_SHOW = "onShow";
  const ON_HIDE = "onHide";
  const ON_LAUNCH = "onLaunch";
  function requireNativePlugin(name2) {
    return weex.requireModule(name2);
  }
  function formatAppLog(type2, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type2, filename, ...args);
    } else {
      console[type2].apply(console, [...args, filename]);
    }
  }
  function resolveEasycom(component, easycom) {
    return typeof component === "string" ? easycom : component;
  }
  const createHook$1 = (lifecycle) => (hook, target = vue$1.getCurrentInstance()) => {
    !vue$1.isInSSRComponentSetup && vue$1.injectHook(lifecycle, hook, target);
  };
  const onShow = /* @__PURE__ */ createHook$1(ON_SHOW);
  const onHide = /* @__PURE__ */ createHook$1(ON_HIDE);
  const onLaunch = /* @__PURE__ */ createHook$1(ON_LAUNCH);
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var Symbol$1 = root.Symbol;
  var objectProto$9 = Object.prototype;
  var hasOwnProperty$9 = objectProto$9.hasOwnProperty;
  var nativeObjectToString$1 = objectProto$9.toString;
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty$9.call(value, symToStringTag$1), tag = value[symToStringTag$1];
    try {
      value[symToStringTag$1] = void 0;
      var unmasked = true;
    } catch (e2) {
    }
    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }
  var objectProto$8 = Object.prototype;
  var nativeObjectToString = objectProto$8.toString;
  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }
  var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString$1(value);
  }
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  var symbolTag = "[object Symbol]";
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
  }
  function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  var isArray$2 = Array.isArray;
  var INFINITY$1 = 1 / 0;
  var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray$2(value)) {
      return arrayMap(value, baseToString) + "";
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
  }
  var reWhitespace = /\s/;
  function trimmedEndIndex(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {
    }
    return index;
  }
  var reTrimStart = /^\s+/;
  function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
  }
  function isObject$2(value) {
    var type2 = typeof value;
    return value != null && (type2 == "object" || type2 == "function");
  }
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject$2(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject$2(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }
  function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }
  function identity(value) {
    return value;
  }
  var asyncTag = "[object AsyncFunction]", funcTag$1 = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
  function isFunction$1(value) {
    if (!isObject$2(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var funcProto$1 = Function.prototype;
  var funcToString$1 = funcProto$1.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString$1.call(func);
      } catch (e2) {
      }
      try {
        return func + "";
      } catch (e2) {
      }
    }
    return "";
  }
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype, objectProto$7 = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty$8 = objectProto$7.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty$8).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative(value) {
    if (!isObject$2(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function getValue(object, key2) {
    return object == null ? void 0 : object[key2];
  }
  function getNative(object, key2) {
    var value = getValue(object, key2);
    return baseIsNative(value) ? value : void 0;
  }
  var WeakMap = getNative(root, "WeakMap");
  function apply$1(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  function constant(value) {
    return function() {
      return value;
    };
  }
  var defineProperty = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e2) {
    }
  }();
  var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string),
      "writable": true
    });
  };
  var setToString = shortOut(baseSetToString);
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length) {
    var type2 = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function baseAssignValue(object, key2, value) {
    if (key2 == "__proto__" && defineProperty) {
      defineProperty(object, key2, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key2] = value;
    }
  }
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var objectProto$6 = Object.prototype;
  var hasOwnProperty$7 = objectProto$6.hasOwnProperty;
  function assignValue(object, key2, value) {
    var objValue = object[key2];
    if (!(hasOwnProperty$7.call(object, key2) && eq(objValue, value)) || value === void 0 && !(key2 in object)) {
      baseAssignValue(object, key2, value);
    }
  }
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key2 = props[index];
      var newValue = void 0;
      if (newValue === void 0) {
        newValue = source[key2];
      }
      if (isNew) {
        baseAssignValue(object, key2, newValue);
      } else {
        assignValue(object, key2, newValue);
      }
    }
    return object;
  }
  var nativeMax = Math.max;
  function overRest(func, start, transform) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply$1(func, this, otherArgs);
    };
  }
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
  }
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction$1(value);
  }
  function isIterateeCall(value, index, object) {
    if (!isObject$2(object)) {
      return false;
    }
    var type2 = typeof index;
    if (type2 == "number" ? isArrayLike(object) && isIndex(index, object.length) : type2 == "string" && index in object) {
      return eq(object[index], value);
    }
    return false;
  }
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? void 0 : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  var objectProto$5 = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$5;
    return value === proto;
  }
  function baseTimes(n2, iteratee) {
    var index = -1, result = Array(n2);
    while (++index < n2) {
      result[index] = iteratee(index);
    }
    return result;
  }
  var argsTag$1 = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag$1;
  }
  var objectProto$4 = Object.prototype;
  var hasOwnProperty$6 = objectProto$4.hasOwnProperty;
  var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;
  var isArguments = baseIsArguments(/* @__PURE__ */ function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty$6.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  function stubFalse() {
    return false;
  }
  var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
  var Buffer2 = moduleExports$1 ? root.Buffer : void 0;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
  var isBuffer = nativeIsBuffer || stubFalse;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag$2 = "[object Map]", numberTag = "[object Number]", objectTag$1 = "[object Object]", regexpTag = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", weakMapTag$1 = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag$2] = typedArrayTags[numberTag] = typedArrayTags[objectTag$1] = typedArrayTags[regexpTag] = typedArrayTags[setTag$2] = typedArrayTags[stringTag$1] = typedArrayTags[weakMapTag$1] = false;
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;
  var nodeUtil = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e2) {
    }
  }();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  var objectProto$3 = Object.prototype;
  var hasOwnProperty$5 = objectProto$3.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray$2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key2 in value) {
      if (hasOwnProperty$5.call(value, key2) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
      isIndex(key2, length)))) {
        result.push(key2);
      }
    }
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  var nativeKeys = overArg(Object.keys, Object);
  var objectProto$2 = Object.prototype;
  var hasOwnProperty$4 = objectProto$2.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key2 in Object(object)) {
      if (hasOwnProperty$4.call(object, key2) && key2 != "constructor") {
        result.push(key2);
      }
    }
    return result;
  }
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  var objectProto$1 = Object.prototype;
  var hasOwnProperty$3 = objectProto$1.hasOwnProperty;
  var assign$3 = createAssigner(function(object, source) {
    if (isPrototype(source) || isArrayLike(source)) {
      copyObject(source, keys(source), object);
      return;
    }
    for (var key2 in source) {
      if (hasOwnProperty$3.call(source, key2)) {
        assignValue(object, key2, source[key2]);
      }
    }
  });
  var Map$1 = getNative(root, "Map");
  function toString(value) {
    return value == null ? "" : baseToString(value);
  }
  function baseClamp(number2, lower, upper) {
    if (number2 === number2) {
      if (upper !== void 0) {
        number2 = number2 <= upper ? number2 : upper;
      }
      {
        number2 = number2 >= lower ? number2 : lower;
      }
    }
    return number2;
  }
  var DataView = getNative(root, "DataView");
  var Promise$1 = getNative(root, "Promise");
  var Set$1 = getNative(root, "Set");
  var mapTag$1 = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag$1 = "[object Set]", weakMapTag = "[object WeakMap]";
  var dataViewTag = "[object DataView]";
  var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap);
  var getTag = baseGetTag;
  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map$1 && getTag(new Map$1()) != mapTag$1 || Promise$1 && getTag(Promise$1.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag$1 || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function(value) {
      var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag$1;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag$1;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  var stringTag = "[object String]";
  function isString$2(value) {
    return typeof value == "string" || !isArray$2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
  }
  var mapTag = "[object Map]", setTag = "[object Set]";
  var objectProto = Object.prototype;
  var hasOwnProperty$2 = objectProto.hasOwnProperty;
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike(value) && (isArray$2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
      return !value.length;
    }
    var tag = getTag(value);
    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }
    for (var key2 in value) {
      if (hasOwnProperty$2.call(value, key2)) {
        return false;
      }
    }
    return true;
  }
  function isNil(value) {
    return value == null;
  }
  function startsWith(string, target, position) {
    string = toString(string);
    position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
    target = baseToString(target);
    return string.slice(position, position + target.length) == target;
  }
  let flag;
  function throttle(func, wait = 500, immediate = true) {
    if (immediate) {
      if (!flag) {
        flag = true;
        typeof func === "function" && func();
        setTimeout(() => {
          flag = false;
        }, wait);
      }
    } else if (!flag) {
      flag = true;
      setTimeout(() => {
        flag = false;
        typeof func === "function" && func();
      }, wait);
    }
  }
  var define_ROUTES_MAP_default = { "/pages/home/index": { path: "/pages/home/index", aliasPath: "/" }, "/pages/login/pin": { path: "/pages/login/pin" }, "/pages/health/index": { path: "/pages/health/index" }, "/pages/registeration/index": { path: "/pages/registeration/index" }, "/pages/health/detection": { path: "/pages/health/detection" }, "/pages/login/index": { path: "/pages/login/index" }, "/pages/login/info": { path: "/pages/login/info" } };
  var define_TABBAR_default = [];
  const _go = (path, params = {}, options2 = {
    redirect: false
  }) => {
    var _a;
    let page = "";
    let query = "";
    let url = "";
    if (isString$2(path)) {
      if (startsWith(path, "http")) {
        page = `/pages/public/webview`;
        query = `url=${encodeURIComponent(path)}`;
      } else if (startsWith(path, "action:")) {
        handleAction(path);
        return;
      } else {
        [page, query] = path.split("?");
      }
      if (!isEmpty(params)) {
        let query2 = paramsToQuery(params);
        if (isEmpty(query)) {
          query = query2;
        } else {
          query += "&" + query2;
        }
      }
    }
    if (isObject$2(path)) {
      page = path.url;
      if (!isNil(path.params)) {
        query = paramsToQuery(path.params);
      }
    }
    const nextRoute = define_ROUTES_MAP_default[page];
    if (!nextRoute) {
      formatAppLog("log", "at slibrary/router/index.js:56", `%c跳转路径参数错误<${page || "EMPTY"}>`, "");
      return;
    }
    if (((_a = nextRoute.meta) == null ? void 0 : _a.auth) && !$store("user").isLogin) {
      showAuthModal();
      return;
    }
    url = page;
    if (!isEmpty(query)) {
      url += `?${query}`;
    }
    if (define_TABBAR_default.includes(page)) {
      uni.switchTab({
        url
      });
      return;
    }
    if (options2.redirect) {
      uni.redirectTo({
        url
      });
      return;
    }
    uni.navigateTo({
      url
    });
  };
  function go(...args) {
    throttle(() => {
      _go(...args);
    });
  }
  function paramsToQuery(params) {
    if (isEmpty(params)) {
      return "";
    }
    let query = [];
    for (let key2 in params) {
      query.push(key2 + "=" + params[key2]);
    }
    return query.join("&");
  }
  function back() {
    uni.navigateBack();
  }
  function redirect(path, params = {}) {
    go(path, params, {
      redirect: true
    });
  }
  function hasHistory() {
    const pages2 = getCurrentPages();
    if (pages2.length > 1) {
      return true;
    }
    return false;
  }
  function getCurrentRoute(field = "") {
    let currentPage = getCurrentPage();
    if (field !== "") {
      return currentPage.$page[field];
    } else {
      return currentPage.$page;
    }
  }
  function getCurrentPage() {
    let pages2 = getCurrentPages();
    return pages2[pages2.length - 1];
  }
  function handleAction(path) {
    const action = path.split(":");
    switch (action[1]) {
      case "showShareModal":
        showShareModal();
        break;
    }
  }
  function error(errCode, errMsg = "") {
    redirect("/pages/public/error", {
      errCode,
      errMsg
    });
  }
  const $router = {
    go,
    back,
    hasHistory,
    redirect,
    getCurrentPage,
    getCurrentRoute,
    error
  };
  const slibrary = {
    $url,
    $router
  };
  const _sfc_main$z = {
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const handleClickHealthCheckUp = () => {
        slibrary.$router.go("/pages/login/pin");
      };
      const __returned__ = { handleClickHealthCheckUp, FixedLogo, get slibrary() {
        return slibrary;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "page" }, [
      vue$1.createVNode($setup["FixedLogo"]),
      vue$1.createElementVNode("view", { class: "content" }, [
        vue$1.createElementVNode("view", { class: "btns" }, [
          vue$1.createElementVNode("view", {
            class: "btns-item",
            onClick: $setup.handleClickHealthCheckUp
          }, [
            vue$1.createElementVNode("view", { class: "icon" }, [
              vue$1.createElementVNode("image", {
                src: $setup.slibrary.$url.static("/static/home/icon_Outpatient.png"),
                mode: "heightFix"
              }, null, 8, ["src"])
            ]),
            vue$1.createElementVNode("view", { class: "text" }, "Health Checkup")
          ]),
          vue$1.createElementVNode("view", { class: "btns-item" }, [
            vue$1.createElementVNode("view", { class: "icon" }, [
              vue$1.createElementVNode("image", {
                src: $setup.slibrary.$url.static("/static/home/icon_ExamMultiple-Choice.png"),
                mode: "heightFix"
              }, null, 8, ["src"])
            ]),
            vue$1.createElementVNode("view", { class: "text" }, "Report")
          ]),
          vue$1.createElementVNode("view", { class: "btns-item" }, [
            vue$1.createElementVNode("view", { class: "icon" }, [
              vue$1.createElementVNode("image", {
                src: $setup.slibrary.$url.static("/static/home/icon_HealthWorkerForm.png"),
                mode: "heightFix"
              }, null, 8, ["src"])
            ]),
            vue$1.createElementVNode("view", { class: "text" }, "eHealth Record")
          ]),
          vue$1.createElementVNode("view", { class: "btns-item" }, [
            vue$1.createElementVNode("view", { class: "icon" }, [
              vue$1.createElementVNode("image", {
                src: $setup.slibrary.$url.static("/static/home/icon_MedicalAdvice.png"),
                mode: "heightFix"
              }, null, 8, ["src"])
            ]),
            vue$1.createElementVNode("view", { class: "text" }, "Telemedicine")
          ])
        ])
      ])
    ]);
  }
  const PagesHomeIndex = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$y], ["__scopeId", "data-v-2c5296db"], ["__file", "D:/ty/medical-device/src/pages/home/index.vue"]]);
  const _sfc_main$y = {
    __name: "pin",
    setup(__props, { expose: __expose }) {
      __expose();
      const __returned__ = { FixedLogo, get slibrary() {
        return slibrary;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "page" }, [
      vue$1.createVNode($setup["FixedLogo"]),
      vue$1.createElementVNode("view", { class: "content" }, [
        vue$1.createElementVNode("view", { class: "btns" }, [
          vue$1.createElementVNode("view", { class: "btns-item" }, [
            vue$1.createElementVNode("view", { class: "icon" }, [
              vue$1.createElementVNode("image", {
                src: $setup.slibrary.$url.static("/static/home/icon_Outpatient.png"),
                mode: "heightFix"
              }, null, 8, ["src"])
            ]),
            vue$1.createElementVNode("view", { class: "text" }, "Health Checkup")
          ]),
          vue$1.createElementVNode("view", { class: "btns-item" }, [
            vue$1.createElementVNode("view", { class: "icon" }, [
              vue$1.createElementVNode("image", {
                src: $setup.slibrary.$url.static("/static/home/icon_ExamMultiple-Choice.png"),
                mode: "heightFix"
              }, null, 8, ["src"])
            ]),
            vue$1.createElementVNode("view", { class: "text" }, "Report")
          ]),
          vue$1.createElementVNode("view", { class: "btns-item" }, [
            vue$1.createElementVNode("view", { class: "icon" }, [
              vue$1.createElementVNode("image", {
                src: $setup.slibrary.$url.static("/static/home/icon_HealthWorkerForm.png"),
                mode: "heightFix"
              }, null, 8, ["src"])
            ]),
            vue$1.createElementVNode("view", { class: "text" }, "eHealth Record")
          ]),
          vue$1.createElementVNode("view", { class: "btns-item" }, [
            vue$1.createElementVNode("view", { class: "icon" }, [
              vue$1.createElementVNode("image", {
                src: $setup.slibrary.$url.static("/static/home/icon_MedicalAdvice.png"),
                mode: "heightFix"
              }, null, 8, ["src"])
            ]),
            vue$1.createElementVNode("view", { class: "text" }, "Telemedicine")
          ])
        ])
      ])
    ]);
  }
  const PagesLoginPin = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$x], ["__scopeId", "data-v-ae813ffe"], ["__file", "D:/ty/medical-device/src/pages/login/pin.vue"]]);
  function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
  }
  function getTarget() {
    return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : {};
  }
  const isProxyAvailable = typeof Proxy === "function";
  const HOOK_SETUP = "devtools-plugin:setup";
  const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";
  let supported;
  let perf;
  function isPerformanceSupported() {
    var _a;
    if (supported !== void 0) {
      return supported;
    }
    if (typeof window !== "undefined" && window.performance) {
      supported = true;
      perf = window.performance;
    } else if (typeof globalThis !== "undefined" && ((_a = globalThis.perf_hooks) === null || _a === void 0 ? void 0 : _a.performance)) {
      supported = true;
      perf = globalThis.perf_hooks.performance;
    } else {
      supported = false;
    }
    return supported;
  }
  function now() {
    return isPerformanceSupported() ? perf.now() : Date.now();
  }
  class ApiProxy {
    constructor(plugin, hook) {
      this.target = null;
      this.targetQueue = [];
      this.onQueue = [];
      this.plugin = plugin;
      this.hook = hook;
      const defaultSettings = {};
      if (plugin.settings) {
        for (const id2 in plugin.settings) {
          const item = plugin.settings[id2];
          defaultSettings[id2] = item.defaultValue;
        }
      }
      const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
      let currentSettings = Object.assign({}, defaultSettings);
      try {
        const raw = localStorage.getItem(localSettingsSaveId);
        const data = JSON.parse(raw);
        Object.assign(currentSettings, data);
      } catch (e2) {
      }
      this.fallbacks = {
        getSettings() {
          return currentSettings;
        },
        setSettings(value) {
          try {
            localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
          } catch (e2) {
          }
          currentSettings = value;
        },
        now() {
          return now();
        }
      };
      if (hook) {
        hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
          if (pluginId === this.plugin.id) {
            this.fallbacks.setSettings(value);
          }
        });
      }
      this.proxiedOn = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target.on[prop];
          } else {
            return (...args) => {
              this.onQueue.push({
                method: prop,
                args
              });
            };
          }
        }
      });
      this.proxiedTarget = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target[prop];
          } else if (prop === "on") {
            return this.proxiedOn;
          } else if (Object.keys(this.fallbacks).includes(prop)) {
            return (...args) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: () => {
                }
              });
              return this.fallbacks[prop](...args);
            };
          } else {
            return (...args) => {
              return new Promise((resolve) => {
                this.targetQueue.push({
                  method: prop,
                  args,
                  resolve
                });
              });
            };
          }
        }
      });
    }
    setRealTarget(target) {
      return __async(this, null, function* () {
        this.target = target;
        for (const item of this.onQueue) {
          this.target.on[item.method](...item.args);
        }
        for (const item of this.targetQueue) {
          item.resolve(yield this.target[item.method](...item.args));
        }
      });
    }
  }
  function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const descriptor = pluginDescriptor;
    const target = getTarget();
    const hook = getDevtoolsGlobalHook();
    const enableProxy = isProxyAvailable && descriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
      hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
    } else {
      const proxy = enableProxy ? new ApiProxy(descriptor, hook) : null;
      const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
      list.push({
        pluginDescriptor: descriptor,
        setupFn,
        proxy
      });
      if (proxy) {
        setupFn(proxy.proxiedTarget);
      }
    }
  }
  /*!
   * vue-router v4.4.5
   * (c) 2024 Eduardo San Martin Morote
   * @license MIT
   */
  var NavigationType;
  (function(NavigationType2) {
    NavigationType2["pop"] = "pop";
    NavigationType2["push"] = "push";
  })(NavigationType || (NavigationType = {}));
  var NavigationDirection;
  (function(NavigationDirection2) {
    NavigationDirection2["back"] = "back";
    NavigationDirection2["forward"] = "forward";
    NavigationDirection2["unknown"] = "";
  })(NavigationDirection || (NavigationDirection = {}));
  var NavigationFailureType;
  (function(NavigationFailureType2) {
    NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
    NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
    NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
  })(NavigationFailureType || (NavigationFailureType = {}));
  const routeLocationKey = Symbol("route location");
  function useRoute(_name) {
    return vue$1.inject(routeLocationKey);
  }
  const _sfc_main$x = {
    __name: "index",
    props: {
      title: {
        type: String,
        default: ""
      },
      showBack: {
        type: Boolean,
        default: false
      }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const handleClickBack = () => {
        uni.navigateBack();
      };
      const __returned__ = { props, handleClickBack, get useRoute() {
        return useRoute;
      }, computed: vue$1.computed, watch: vue$1.watch, ref: vue$1.ref };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "header bg-gradient-to-b from-blue-500 to-blue-900 px-4 flex items-center flex-shrink-0" }, [
      $props.showBack ? (vue$1.openBlock(), vue$1.createElementBlock("i", {
        key: 0,
        class: "fas fa-times text-white mr-4",
        onClick: $setup.handleClickBack
      })) : vue$1.createCommentVNode("v-if", true),
      vue$1.createElementVNode(
        "span",
        { class: "text-white title" },
        vue$1.toDisplayString($props.title),
        1
        /* TEXT */
      )
    ]);
  }
  const Header = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$w], ["__scopeId", "data-v-eef40c4c"], ["__file", "D:/ty/medical-device/src/components/Header/index.vue"]]);
  const _sfc_main$w = {
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const handleClickBtn = (url) => {
        uni.navigateTo({
          url
        });
      };
      const handleClickSubmit = () => {
        uni.navigateTo({
          url: "/pages/health/detection"
        });
      };
      const __returned__ = { handleClickBtn, handleClickSubmit, Header };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "page overflow-hidden" }, [
      vue$1.createVNode($setup["Header"], {
        title: "Health",
        showBack: ""
      }),
      vue$1.createElementVNode("view", { class: "flex flex-1 justify-center items-center w-full overflow-hidden flex-col" }, [
        vue$1.createElementVNode("view", {
          class: "bg-white bg-opacity-15 text-white rounded-lg p-6 w-full max-w-4xl w-full relative overflow-y-auto",
          style: { "height": "80%" }
        }, [
          vue$1.createElementVNode("view", { class: "selectAll" }, [
            vue$1.createElementVNode("view", { class: "flex items-center" }, [
              vue$1.createElementVNode("input", {
                type: "checkbox",
                class: "form-checkbox h-5 w-5 text-green-500",
                checked: ""
              }),
              vue$1.createElementVNode("span", { class: "ml-2 text-lg" }, "Select all")
            ])
          ]),
          vue$1.createElementVNode("view", { class: "flex justify-center items-center mb-4" }, [
            vue$1.createElementVNode("h2", { class: "text-2xl font-semibold" }, "Customise Your Test")
          ]),
          vue$1.createElementVNode("view", { class: "mb-4" }, [
            vue$1.createElementVNode("view", { class: "title flex items-center mb-2" }, [
              vue$1.createElementVNode("input", {
                type: "checkbox",
                class: "form-checkbox h-5 w-5 text-green-500 mr-2 items-center",
                checked: ""
              }),
              vue$1.createElementVNode("h3", { class: "text-green-500 text-xl font-semibold" }, " General Health Checkup ")
            ]),
            vue$1.createElementVNode("view", { class: "grid grid-cols-3 gap-4 pl-10" }, [
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Height")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Body Fat Analysis")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Temperature")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "SPO2")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Blood Pressure")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Random Blood Sugar")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Hemoglobin")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Far Vision")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Color Blindness")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Nutrition Plan")
              ])
            ])
          ]),
          vue$1.createElementVNode("hr", { class: "border-gray-600 mb-4" }),
          vue$1.createElementVNode("view", { class: "mb-4" }, [
            vue$1.createElementVNode("view", { class: "title flex items-center mb-2" }, [
              vue$1.createElementVNode("input", {
                type: "checkbox",
                class: "form-checkbox h-5 w-5 text-green-500 mr-2 items-center",
                checked: ""
              }),
              vue$1.createElementVNode("h3", { class: "text-green-500 text-xl font-semibold" }, " General Health Checkup ")
            ]),
            vue$1.createElementVNode("view", { class: "grid grid-cols-3 gap-4 pl-10" }, [
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Height")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Body Fat Analysis")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Temperature")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "SPO2")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Blood Pressure")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Random Blood Sugar")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Hemoglobin")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Far Vision")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Color Blindness")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Nutrition Plan")
              ])
            ])
          ]),
          vue$1.createElementVNode("hr", { class: "border-gray-600 mb-4" }),
          vue$1.createElementVNode("view", { class: "mb-4" }, [
            vue$1.createElementVNode("view", { class: "title flex items-center mb-2" }, [
              vue$1.createElementVNode("input", {
                type: "checkbox",
                class: "form-checkbox h-5 w-5 text-green-500 mr-2 items-center",
                checked: ""
              }),
              vue$1.createElementVNode("h3", { class: "text-green-500 text-xl font-semibold" }, " General Health Checkup ")
            ]),
            vue$1.createElementVNode("view", { class: "grid grid-cols-3 gap-4 pl-10" }, [
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Height")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Body Fat Analysis")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Temperature")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "SPO2")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Blood Pressure")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Random Blood Sugar")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Hemoglobin")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Far Vision")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Color Blindness")
              ]),
              vue$1.createElementVNode("view", { class: "flex items-center" }, [
                vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
                vue$1.createElementVNode("span", null, "Nutrition Plan")
              ])
            ])
          ])
        ]),
        vue$1.createElementVNode("view", { class: "flex justify-between items-center mt-6 w-full max-w-4xl" }, [
          vue$1.createElementVNode("view", { class: "flex items-center flex-1" }, [
            vue$1.createElementVNode("i", { class: "fas fa-check-circle text-green-500 mr-2" }),
            vue$1.createElementVNode("span", null, "29 Selected")
          ]),
          vue$1.createElementVNode("button", {
            class: "bg-green-500 text-white px-6 py-1 rounded-lg",
            onClick: $setup.handleClickSubmit
          }, "Submit")
        ])
      ])
    ]);
  }
  const PagesHealthIndex = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$v], ["__scopeId", "data-v-f9bb84ee"], ["__file", "D:/ty/medical-device/src/pages/health/index.vue"]]);
  const _sfc_main$v = {};
  function _sfc_render$u(_ctx, _cache) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "page" }, [
      vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode("v-if", true),
      vue$1.createElementVNode("view", { class: "w-screen h-screen overflow-hidden" }, [
        vue$1.createElementVNode("view", { class: "flex flex-col items-center justify-center min-h-screen" }, [
          vue$1.createElementVNode("h1", { class: "text-2xl font-semibold mb-4" }, "Confirm User Information"),
          vue$1.createElementVNode("view", { class: "flex justify-between w-3/4" }, [
            vue$1.createElementVNode("view", { class: "w-1/2 pr-4" }, [
              vue$1.createElementVNode("h2", { class: "text-center mb-4" }, "( Mandatory )"),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Name"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Name"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-user absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Gender"),
                vue$1.createElementVNode("select", { class: "w-full p-2 bg-blue-800 border border-gray-500 rounded" }, [
                  vue$1.createElementVNode("option", null, "Select Gender")
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "DOB"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "date",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-calendar-alt absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Phone Number"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "XXXXXXXXXX"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-phone absolute right-3 top-3 text-gray-400" })
                ])
              ])
            ]),
            vue$1.createElementVNode("view", { class: "w-1/2 pl-4" }, [
              vue$1.createElementVNode("h2", { class: "text-center mb-4" }, "( Optional )"),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Mail"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "email",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Mail"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-envelope absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Aadhar Card"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Aadhar Card"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-id-card absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Unique ID"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Unique ID"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-id-badge absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Abha"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Abha"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-id-badge absolute right-3 top-3 text-gray-400" })
                ])
              ])
            ])
          ]),
          vue$1.createElementVNode("view", { class: "flex justify-between w-3/4 mt-6" }, [
            vue$1.createElementVNode("button", { class: "bg-blue-600 text-white py-2 px-4 rounded" }, "Abha Health Portal"),
            vue$1.createElementVNode("view", { class: "flex space-x-4" }, [
              vue$1.createElementVNode("button", { class: "bg-red-600 text-white py-2 px-4 rounded" }, "Cancel"),
              vue$1.createElementVNode("button", { class: "bg-green-600 text-white py-2 px-4 rounded" }, "Save")
            ])
          ])
        ])
      ])
    ]);
  }
  const PagesRegisterationIndex = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$u], ["__scopeId", "data-v-25a04030"], ["__file", "D:/ty/medical-device/src/pages/registeration/index.vue"]]);
  const _sfc_main$u = {
    props: {
      content: {
        type: String,
        required: true
      },
      scrollDuration: {
        type: Number,
        default: 5
      }
    },
    data() {
      return {
        isOverflow: false
        // 判断文字是否超出容器
      };
    },
    mounted() {
      this.checkOverflow();
    },
    methods: {
      checkOverflow() {
        const container = this.$el;
        const text = this.$refs.scrollText;
        this.$nextTick(() => {
          this.isOverflow = text.offsetWidth > container.offsetWidth;
          if (this.isOverflow) {
            container.style.setProperty("--scrollDuration", `${this.scrollDuration}s`);
          }
        });
      }
    }
  };
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "text-container" }, [
      vue$1.createElementVNode(
        "span",
        {
          ref: "scrollText",
          class: vue$1.normalizeClass({ "scroll-text": $data.isOverflow })
        },
        vue$1.toDisplayString($props.content),
        3
        /* TEXT, CLASS */
      )
    ]);
  }
  const ScrollText = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$t], ["__scopeId", "data-v-925036ef"], ["__file", "D:/ty/medical-device/src/components/ScrollText.vue"]]);
  const _imports_0$1 = "/static/fat2.png";
  const _sfc_main$t = {
    __name: "ContentBox",
    props: {
      image: {
        type: String,
        default: ""
      }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const __returned__ = { props };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "w-full h-full flex devicesSontent" }, [
      $props.image ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 0,
        class: "left flex-1 flex justify-center items-center"
      }, [
        vue$1.createElementVNode("view", {
          class: "img",
          style: { "width": "300px", "height": "300px" }
        }, [
          vue$1.createElementVNode("img", {
            src: _imports_0$1,
            alt: ""
          })
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createElementVNode("view", { class: "right flex-1" }, [
        vue$1.createElementVNode("view", { class: "functional" }, [
          vue$1.renderSlot(_ctx.$slots, "default", {}, void 0, true),
          vue$1.createElementVNode("view", { class: "devicesStatus" }, [
            vue$1.createElementVNode("view", null, "Devices Statistics"),
            vue$1.createElementVNode("view", { class: "flex items-center" }, [
              vue$1.createElementVNode("view", null, " connected "),
              vue$1.createElementVNode("view", { class: "dot" })
            ])
          ])
        ])
      ])
    ]);
  }
  const ContentBox = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$s], ["__scopeId", "data-v-e1d75600"], ["__file", "D:/ty/medical-device/src/components/HealthStep/ContentBox.vue"]]);
  const _sfc_main$s = {
    __name: "Height",
    setup(__props, { expose: __expose }) {
      __expose();
      const instance = vue$1.getCurrentInstance();
      const sliderMinX = vue$1.ref(0);
      const sliderMaxX = vue$1.ref(245);
      let tmp = 30;
      const sliderX = vue$1.ref(0);
      vue$1.onMounted(() => {
        const query = uni.createSelectorQuery().in(instance);
        query.select(".gezibox").fields({
          size: true,
          dataset: true,
          rect: true,
          id: true
        });
        query.exec((eles) => {
          sliderMaxX.value = eles[0].height;
          sliderX.value = (30 - tmp) * sliderMaxX.value / 20;
        });
      });
      const currentTemperature = vue$1.computed(() => {
        const tempRangeStart = 200;
        const tempRange = 120;
        return tempRangeStart - parseInt(sliderX.value / sliderMaxX.value * tempRange);
      });
      const min = vue$1.ref(120);
      const max = vue$1.ref(200);
      const sliderStyle = vue$1.computed(() => {
        return `transform: translate3d(0, ${sliderX.value}px, 0);`;
      });
      const interpolation = vue$1.computed(() => {
        max.value - min.value;
        let arr = [];
        for (let i2 = min.value; i2 < max.value; i2++) {
          if (i2 % 2 == 0 || i2 % 5 == 0) {
            arr.push(i2);
          }
        }
        return arr;
      });
      const lineFunc = (i2) => {
        if (i2 % 5 == 0) {
          return "longLine";
        }
      };
      const startObg = vue$1.reactive({
        startX: 0,
        startY: 0
      });
      const initialSliderX = vue$1.ref(0);
      const touchstart = (e2) => {
        formatAppLog("log", "at components/HealthStep/Height.vue:100", e2);
        startObg.startX = e2.changedTouches[0].clientX;
        startObg.startY = e2.changedTouches[0].clientY;
        initialSliderX.value = sliderX.value;
      };
      const touchMove = (e2) => {
        e2.stopPropagation();
        formatAppLog("log", "at components/HealthStep/Height.vue:108", e2);
        let {
          startX,
          startY
        } = startObg;
        let slidingRange = 45;
        let touchMoveX = e2.changedTouches[0].clientX;
        let touchMoveY = e2.changedTouches[0].clientY;
        let angle = angleFun({
          X: startX,
          Y: startY
        }, {
          X: touchMoveX,
          Y: touchMoveY
        });
        if (Math.abs(angle) > slidingRange && touchMoveY < startY) {
          formatAppLog("log", "at components/HealthStep/Height.vue:126", "上");
          formatAppLog("log", "at components/HealthStep/Height.vue:127", touchMoveY);
          const dragAmount = touchMoveY - startY;
          const targetX = initialSliderX.value + dragAmount;
          sliderX.value = Math.max(Math.min(targetX, sliderMaxX.value), sliderMinX.value);
        }
        if (Math.abs(angle) > slidingRange && touchMoveY > startY) {
          formatAppLog("log", "at components/HealthStep/Height.vue:134", "下");
          formatAppLog("log", "at components/HealthStep/Height.vue:135", touchMoveY);
          const dragAmount = touchMoveY - startY;
          const targetX = initialSliderX.value + dragAmount;
          sliderX.value = Math.max(Math.min(targetX, sliderMaxX.value), sliderMinX.value);
        }
      };
      const angleFun = (start, end) => {
        var _X = end.X - start.X, _Y = end.Y - start.Y;
        return 360 * Math.atan(_Y / _X) / (2 * Math.PI);
      };
      const __returned__ = { instance, sliderMinX, sliderMaxX, get tmp() {
        return tmp;
      }, set tmp(v2) {
        tmp = v2;
      }, sliderX, currentTemperature, min, max, sliderStyle, interpolation, lineFunc, startObg, initialSliderX, touchstart, touchMove, angleFun, ref: vue$1.ref, computed: vue$1.computed, reactive: vue$1.reactive, onMounted: vue$1.onMounted, getCurrentInstance: vue$1.getCurrentInstance, ContentBox };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createBlock($setup["ContentBox"], { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", {
          class: "action relative",
          style: { "width": "600rpx", "height": "600rpx" }
        }, [
          vue$1.createElementVNode("view", {
            class: "flex-1 relative flex flex-col",
            style: { "width": "100%", "height": "100%", "padding": "40rpx 0" }
          }, [
            vue$1.createCommentVNode(" 格子 "),
            vue$1.createElementVNode("view", { class: "flex-1 fulled flex flex-col gezibox" }, [
              (vue$1.openBlock(true), vue$1.createElementBlock(
                vue$1.Fragment,
                null,
                vue$1.renderList($setup.interpolation, (item) => {
                  return vue$1.openBlock(), vue$1.createElementBlock(
                    "view",
                    {
                      class: vue$1.normalizeClass(["geziitem", [$setup.lineFunc(item)]]),
                      key: item
                    },
                    null,
                    2
                    /* CLASS */
                  );
                }),
                128
                /* KEYED_FRAGMENT */
              )),
              vue$1.createElementVNode(
                "view",
                {
                  class: "handle",
                  style: vue$1.normalizeStyle($setup.sliderStyle),
                  onTouchstart: $setup.touchstart,
                  onTouchmove: vue$1.withModifiers($setup.touchMove, ["stop", "prevent"])
                },
                [
                  vue$1.createElementVNode("view", { class: "text" }, [
                    vue$1.createElementVNode("view", { class: "text2" }, "cm")
                  ])
                ],
                36
                /* STYLE, NEED_HYDRATION */
              )
            ])
          ]),
          vue$1.createElementVNode("view", { class: "heightNumber" }, [
            vue$1.createElementVNode(
              "view",
              { class: "text1" },
              vue$1.toDisplayString($setup.currentTemperature),
              1
              /* TEXT */
            )
          ]),
          vue$1.createElementVNode("view", { class: "title" }, " Smart Sacle ")
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const Height = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$r], ["__scopeId", "data-v-34dc1c8c"], ["__file", "D:/ty/medical-device/src/components/HealthStep/Height.vue"]]);
  const __default__ = {
    data() {
      return {
        minWeight: 60,
        // 最小体重
        maxWeight: 100,
        // 最大体重
        currentWeight: 70,
        // 当前体重
        touchStartX: 0,
        // 记录触摸起始位置
        rotationAngle: 0,
        // 控制刻度盘的旋转角度
        ticks: 41,
        // 刻度数量（按1kg一个刻度）
        tickAngle: 4.5
        // 每个刻度的旋转角度
      };
    },
    methods: {
      onTouchStart(e2) {
        this.touchStartX = e2.touches[0].clientX;
      },
      onTouchMove(e2) {
        const deltaX = e2.touches[0].clientX - this.touchStartX;
        this.touchStartX = e2.touches[0].clientX;
        const weightChange = deltaX > 0 ? -0.5 : 0.5;
        this.updateWeight(weightChange);
      },
      updateWeight(change) {
        const newWeight = this.currentWeight + change;
        if (newWeight >= this.minWeight && newWeight <= this.maxWeight) {
          this.currentWeight = newWeight;
          this.rotationAngle = (this.currentWeight - this.minWeight) * this.tickAngle;
        }
      }
    }
  };
  const _sfc_main$r = /* @__PURE__ */ Object.assign(__default__, {
    __name: "BodyFat",
    setup(__props, { expose: __expose }) {
      __expose();
      const instance = vue$1.getCurrentInstance();
      vue$1.onMounted(() => {
      });
      const __returned__ = { instance, ref: vue$1.ref, computed: vue$1.computed, reactive: vue$1.reactive, onMounted: vue$1.onMounted, getCurrentInstance: vue$1.getCurrentInstance, ContentBox };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createBlock($setup["ContentBox"], { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode(
          "div",
          {
            class: "scale-container",
            onTouchstart: _cache[0] || (_cache[0] = (...args) => $options.onTouchStart && $options.onTouchStart(...args)),
            onTouchmove: _cache[1] || (_cache[1] = (...args) => $options.onTouchMove && $options.onTouchMove(...args))
          },
          [
            vue$1.createElementVNode("div", { class: "scale" }, [
              vue$1.createElementVNode("h3", null, "Smart Scale (Kg)"),
              vue$1.createElementVNode(
                "div",
                { class: "weight-display" },
                vue$1.toDisplayString($data.currentWeight.toFixed(1)) + " Kg",
                1
                /* TEXT */
              ),
              vue$1.createElementVNode("div", { class: "gauge-container" }, [
                vue$1.createElementVNode(
                  "div",
                  {
                    class: "gauge",
                    style: vue$1.normalizeStyle({ transform: `rotate(${$data.rotationAngle}deg)` })
                  },
                  [
                    (vue$1.openBlock(true), vue$1.createElementBlock(
                      vue$1.Fragment,
                      null,
                      vue$1.renderList($data.ticks, (tick) => {
                        return vue$1.openBlock(), vue$1.createElementBlock(
                          "div",
                          {
                            key: tick,
                            class: "tick",
                            style: vue$1.normalizeStyle({ transform: `rotate(${tick * $data.tickAngle}deg)` })
                          },
                          null,
                          4
                          /* STYLE */
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ],
                  4
                  /* STYLE */
                ),
                vue$1.createElementVNode("div", { class: "needle" })
              ])
            ])
          ],
          32
          /* NEED_HYDRATION */
        )
      ]),
      _: 1
      /* STABLE */
    });
  }
  const BodyFat = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$q], ["__scopeId", "data-v-a7224d0d"], ["__file", "D:/ty/medical-device/src/components/HealthStep/BodyFat.vue"]]);
  const pages = [
    {
      path: "pages/home/index",
      style: {
        navigationBarTitleText: "uni-app",
        navigationStyle: "custom",
        disableScroll: true
      }
    },
    {
      path: "pages/login/pin",
      style: {
        navigationBarTitleText: "uni-app",
        navigationStyle: "custom"
      }
    },
    {
      path: "pages/health/index",
      style: {
        navigationBarTitleText: "uni-app",
        navigationStyle: "custom"
      }
    },
    {
      path: "pages/registeration/index",
      style: {
        navigationBarTitleText: "uni-app",
        navigationStyle: "custom"
      }
    },
    {
      path: "pages/health/detection",
      style: {
        navigationBarTitleText: "uni-app",
        navigationStyle: "custom"
      }
    },
    {
      path: "pages/login/index",
      style: {
        navigationBarTitleText: "uni-app",
        navigationStyle: "custom"
      }
    },
    {
      path: "pages/login/info",
      style: {
        navigationBarTitleText: "uni-app",
        navigationStyle: "custom"
      }
    }
  ];
  const subPackages = [];
  const globalStyle = {
    navigationBarTextStyle: "black",
    navigationBarTitleText: "uni-app",
    navigationBarBackgroundColor: "#F8F8F8",
    backgroundColor: "#0B0D2E",
    pageOrientation: "landscape",
    navigationStyle: "custom",
    rpxCalcMaxDeviceWidth: 1440,
    rpxCalcBaseDeviceWidth: 375,
    rpxCalcIncludeWidth: 750
  };
  const e$1 = {
    pages,
    subPackages,
    globalStyle
  };
  var define_process_env_UNI_SECURE_NETWORK_CONFIG_default = [];
  function t$1(e2) {
    return e2 && e2.__esModule && Object.prototype.hasOwnProperty.call(e2, "default") ? e2.default : e2;
  }
  function n$1(e2, t2, n2) {
    return e2(n2 = { path: t2, exports: {}, require: function(e3, t3) {
      return function() {
        throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
      }(null == t3 && n2.path);
    } }, n2.exports), n2.exports;
  }
  var s$2 = n$1(function(e2, t2) {
    var n2;
    e2.exports = (n2 = n2 || function(e3, t3) {
      var n3 = Object.create || /* @__PURE__ */ function() {
        function e4() {
        }
        return function(t4) {
          var n4;
          return e4.prototype = t4, n4 = new e4(), e4.prototype = null, n4;
        };
      }(), s2 = {}, r2 = s2.lib = {}, i2 = r2.Base = { extend: function(e4) {
        var t4 = n3(this);
        return e4 && t4.mixIn(e4), t4.hasOwnProperty("init") && this.init !== t4.init || (t4.init = function() {
          t4.$super.init.apply(this, arguments);
        }), t4.init.prototype = t4, t4.$super = this, t4;
      }, create: function() {
        var e4 = this.extend();
        return e4.init.apply(e4, arguments), e4;
      }, init: function() {
      }, mixIn: function(e4) {
        for (var t4 in e4) e4.hasOwnProperty(t4) && (this[t4] = e4[t4]);
        e4.hasOwnProperty("toString") && (this.toString = e4.toString);
      }, clone: function() {
        return this.init.prototype.extend(this);
      } }, o2 = r2.WordArray = i2.extend({ init: function(e4, n4) {
        e4 = this.words = e4 || [], this.sigBytes = n4 != t3 ? n4 : 4 * e4.length;
      }, toString: function(e4) {
        return (e4 || c2).stringify(this);
      }, concat: function(e4) {
        var t4 = this.words, n4 = e4.words, s3 = this.sigBytes, r3 = e4.sigBytes;
        if (this.clamp(), s3 % 4) for (var i3 = 0; i3 < r3; i3++) {
          var o3 = n4[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
          t4[s3 + i3 >>> 2] |= o3 << 24 - (s3 + i3) % 4 * 8;
        }
        else for (i3 = 0; i3 < r3; i3 += 4) t4[s3 + i3 >>> 2] = n4[i3 >>> 2];
        return this.sigBytes += r3, this;
      }, clamp: function() {
        var t4 = this.words, n4 = this.sigBytes;
        t4[n4 >>> 2] &= 4294967295 << 32 - n4 % 4 * 8, t4.length = e3.ceil(n4 / 4);
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4.words = this.words.slice(0), e4;
      }, random: function(t4) {
        for (var n4, s3 = [], r3 = function(t5) {
          t5 = t5;
          var n5 = 987654321, s4 = 4294967295;
          return function() {
            var r4 = ((n5 = 36969 * (65535 & n5) + (n5 >> 16) & s4) << 16) + (t5 = 18e3 * (65535 & t5) + (t5 >> 16) & s4) & s4;
            return r4 /= 4294967296, (r4 += 0.5) * (e3.random() > 0.5 ? 1 : -1);
          };
        }, i3 = 0; i3 < t4; i3 += 4) {
          var a3 = r3(4294967296 * (n4 || e3.random()));
          n4 = 987654071 * a3(), s3.push(4294967296 * a3() | 0);
        }
        return new o2.init(s3, t4);
      } }), a2 = s2.enc = {}, c2 = a2.Hex = { stringify: function(e4) {
        for (var t4 = e4.words, n4 = e4.sigBytes, s3 = [], r3 = 0; r3 < n4; r3++) {
          var i3 = t4[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255;
          s3.push((i3 >>> 4).toString(16)), s3.push((15 & i3).toString(16));
        }
        return s3.join("");
      }, parse: function(e4) {
        for (var t4 = e4.length, n4 = [], s3 = 0; s3 < t4; s3 += 2) n4[s3 >>> 3] |= parseInt(e4.substr(s3, 2), 16) << 24 - s3 % 8 * 4;
        return new o2.init(n4, t4 / 2);
      } }, u2 = a2.Latin1 = { stringify: function(e4) {
        for (var t4 = e4.words, n4 = e4.sigBytes, s3 = [], r3 = 0; r3 < n4; r3++) {
          var i3 = t4[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255;
          s3.push(String.fromCharCode(i3));
        }
        return s3.join("");
      }, parse: function(e4) {
        for (var t4 = e4.length, n4 = [], s3 = 0; s3 < t4; s3++) n4[s3 >>> 2] |= (255 & e4.charCodeAt(s3)) << 24 - s3 % 4 * 8;
        return new o2.init(n4, t4);
      } }, h2 = a2.Utf8 = { stringify: function(e4) {
        try {
          return decodeURIComponent(escape(u2.stringify(e4)));
        } catch (e5) {
          throw new Error("Malformed UTF-8 data");
        }
      }, parse: function(e4) {
        return u2.parse(unescape(encodeURIComponent(e4)));
      } }, l2 = r2.BufferedBlockAlgorithm = i2.extend({ reset: function() {
        this._data = new o2.init(), this._nDataBytes = 0;
      }, _append: function(e4) {
        "string" == typeof e4 && (e4 = h2.parse(e4)), this._data.concat(e4), this._nDataBytes += e4.sigBytes;
      }, _process: function(t4) {
        var n4 = this._data, s3 = n4.words, r3 = n4.sigBytes, i3 = this.blockSize, a3 = r3 / (4 * i3), c3 = (a3 = t4 ? e3.ceil(a3) : e3.max((0 | a3) - this._minBufferSize, 0)) * i3, u3 = e3.min(4 * c3, r3);
        if (c3) {
          for (var h3 = 0; h3 < c3; h3 += i3) this._doProcessBlock(s3, h3);
          var l3 = s3.splice(0, c3);
          n4.sigBytes -= u3;
        }
        return new o2.init(l3, u3);
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4._data = this._data.clone(), e4;
      }, _minBufferSize: 0 });
      r2.Hasher = l2.extend({ cfg: i2.extend(), init: function(e4) {
        this.cfg = this.cfg.extend(e4), this.reset();
      }, reset: function() {
        l2.reset.call(this), this._doReset();
      }, update: function(e4) {
        return this._append(e4), this._process(), this;
      }, finalize: function(e4) {
        return e4 && this._append(e4), this._doFinalize();
      }, blockSize: 16, _createHelper: function(e4) {
        return function(t4, n4) {
          return new e4.init(n4).finalize(t4);
        };
      }, _createHmacHelper: function(e4) {
        return function(t4, n4) {
          return new d2.HMAC.init(e4, n4).finalize(t4);
        };
      } });
      var d2 = s2.algo = {};
      return s2;
    }(Math), n2);
  }), r$1 = s$2, i$2 = (n$1(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r$1, function(e3) {
      var t3 = n2, s2 = t3.lib, r2 = s2.WordArray, i2 = s2.Hasher, o2 = t3.algo, a2 = [];
      !function() {
        for (var t4 = 0; t4 < 64; t4++) a2[t4] = 4294967296 * e3.abs(e3.sin(t4 + 1)) | 0;
      }();
      var c2 = o2.MD5 = i2.extend({ _doReset: function() {
        this._hash = new r2.init([1732584193, 4023233417, 2562383102, 271733878]);
      }, _doProcessBlock: function(e4, t4) {
        for (var n3 = 0; n3 < 16; n3++) {
          var s3 = t4 + n3, r3 = e4[s3];
          e4[s3] = 16711935 & (r3 << 8 | r3 >>> 24) | 4278255360 & (r3 << 24 | r3 >>> 8);
        }
        var i3 = this._hash.words, o3 = e4[t4 + 0], c3 = e4[t4 + 1], p2 = e4[t4 + 2], f2 = e4[t4 + 3], g2 = e4[t4 + 4], m2 = e4[t4 + 5], y2 = e4[t4 + 6], _2 = e4[t4 + 7], w2 = e4[t4 + 8], v2 = e4[t4 + 9], I2 = e4[t4 + 10], S2 = e4[t4 + 11], b2 = e4[t4 + 12], k2 = e4[t4 + 13], A2 = e4[t4 + 14], C2 = e4[t4 + 15], P2 = i3[0], T2 = i3[1], x2 = i3[2], O2 = i3[3];
        P2 = u2(P2, T2, x2, O2, o3, 7, a2[0]), O2 = u2(O2, P2, T2, x2, c3, 12, a2[1]), x2 = u2(x2, O2, P2, T2, p2, 17, a2[2]), T2 = u2(T2, x2, O2, P2, f2, 22, a2[3]), P2 = u2(P2, T2, x2, O2, g2, 7, a2[4]), O2 = u2(O2, P2, T2, x2, m2, 12, a2[5]), x2 = u2(x2, O2, P2, T2, y2, 17, a2[6]), T2 = u2(T2, x2, O2, P2, _2, 22, a2[7]), P2 = u2(P2, T2, x2, O2, w2, 7, a2[8]), O2 = u2(O2, P2, T2, x2, v2, 12, a2[9]), x2 = u2(x2, O2, P2, T2, I2, 17, a2[10]), T2 = u2(T2, x2, O2, P2, S2, 22, a2[11]), P2 = u2(P2, T2, x2, O2, b2, 7, a2[12]), O2 = u2(O2, P2, T2, x2, k2, 12, a2[13]), x2 = u2(x2, O2, P2, T2, A2, 17, a2[14]), P2 = h2(P2, T2 = u2(T2, x2, O2, P2, C2, 22, a2[15]), x2, O2, c3, 5, a2[16]), O2 = h2(O2, P2, T2, x2, y2, 9, a2[17]), x2 = h2(x2, O2, P2, T2, S2, 14, a2[18]), T2 = h2(T2, x2, O2, P2, o3, 20, a2[19]), P2 = h2(P2, T2, x2, O2, m2, 5, a2[20]), O2 = h2(O2, P2, T2, x2, I2, 9, a2[21]), x2 = h2(x2, O2, P2, T2, C2, 14, a2[22]), T2 = h2(T2, x2, O2, P2, g2, 20, a2[23]), P2 = h2(P2, T2, x2, O2, v2, 5, a2[24]), O2 = h2(O2, P2, T2, x2, A2, 9, a2[25]), x2 = h2(x2, O2, P2, T2, f2, 14, a2[26]), T2 = h2(T2, x2, O2, P2, w2, 20, a2[27]), P2 = h2(P2, T2, x2, O2, k2, 5, a2[28]), O2 = h2(O2, P2, T2, x2, p2, 9, a2[29]), x2 = h2(x2, O2, P2, T2, _2, 14, a2[30]), P2 = l2(P2, T2 = h2(T2, x2, O2, P2, b2, 20, a2[31]), x2, O2, m2, 4, a2[32]), O2 = l2(O2, P2, T2, x2, w2, 11, a2[33]), x2 = l2(x2, O2, P2, T2, S2, 16, a2[34]), T2 = l2(T2, x2, O2, P2, A2, 23, a2[35]), P2 = l2(P2, T2, x2, O2, c3, 4, a2[36]), O2 = l2(O2, P2, T2, x2, g2, 11, a2[37]), x2 = l2(x2, O2, P2, T2, _2, 16, a2[38]), T2 = l2(T2, x2, O2, P2, I2, 23, a2[39]), P2 = l2(P2, T2, x2, O2, k2, 4, a2[40]), O2 = l2(O2, P2, T2, x2, o3, 11, a2[41]), x2 = l2(x2, O2, P2, T2, f2, 16, a2[42]), T2 = l2(T2, x2, O2, P2, y2, 23, a2[43]), P2 = l2(P2, T2, x2, O2, v2, 4, a2[44]), O2 = l2(O2, P2, T2, x2, b2, 11, a2[45]), x2 = l2(x2, O2, P2, T2, C2, 16, a2[46]), P2 = d2(P2, T2 = l2(T2, x2, O2, P2, p2, 23, a2[47]), x2, O2, o3, 6, a2[48]), O2 = d2(O2, P2, T2, x2, _2, 10, a2[49]), x2 = d2(x2, O2, P2, T2, A2, 15, a2[50]), T2 = d2(T2, x2, O2, P2, m2, 21, a2[51]), P2 = d2(P2, T2, x2, O2, b2, 6, a2[52]), O2 = d2(O2, P2, T2, x2, f2, 10, a2[53]), x2 = d2(x2, O2, P2, T2, I2, 15, a2[54]), T2 = d2(T2, x2, O2, P2, c3, 21, a2[55]), P2 = d2(P2, T2, x2, O2, w2, 6, a2[56]), O2 = d2(O2, P2, T2, x2, C2, 10, a2[57]), x2 = d2(x2, O2, P2, T2, y2, 15, a2[58]), T2 = d2(T2, x2, O2, P2, k2, 21, a2[59]), P2 = d2(P2, T2, x2, O2, g2, 6, a2[60]), O2 = d2(O2, P2, T2, x2, S2, 10, a2[61]), x2 = d2(x2, O2, P2, T2, p2, 15, a2[62]), T2 = d2(T2, x2, O2, P2, v2, 21, a2[63]), i3[0] = i3[0] + P2 | 0, i3[1] = i3[1] + T2 | 0, i3[2] = i3[2] + x2 | 0, i3[3] = i3[3] + O2 | 0;
      }, _doFinalize: function() {
        var t4 = this._data, n3 = t4.words, s3 = 8 * this._nDataBytes, r3 = 8 * t4.sigBytes;
        n3[r3 >>> 5] |= 128 << 24 - r3 % 32;
        var i3 = e3.floor(s3 / 4294967296), o3 = s3;
        n3[15 + (r3 + 64 >>> 9 << 4)] = 16711935 & (i3 << 8 | i3 >>> 24) | 4278255360 & (i3 << 24 | i3 >>> 8), n3[14 + (r3 + 64 >>> 9 << 4)] = 16711935 & (o3 << 8 | o3 >>> 24) | 4278255360 & (o3 << 24 | o3 >>> 8), t4.sigBytes = 4 * (n3.length + 1), this._process();
        for (var a3 = this._hash, c3 = a3.words, u3 = 0; u3 < 4; u3++) {
          var h3 = c3[u3];
          c3[u3] = 16711935 & (h3 << 8 | h3 >>> 24) | 4278255360 & (h3 << 24 | h3 >>> 8);
        }
        return a3;
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4._hash = this._hash.clone(), e4;
      } });
      function u2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (t4 & n3 | ~t4 & s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function h2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (t4 & s3 | n3 & ~s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function l2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (t4 ^ n3 ^ s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function d2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (n3 ^ (t4 | ~s3)) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      t3.MD5 = i2._createHelper(c2), t3.HmacMD5 = i2._createHmacHelper(c2);
    }(Math), n2.MD5);
  }), n$1(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r$1, void function() {
      var e3 = n2, t3 = e3.lib.Base, s2 = e3.enc.Utf8;
      e3.algo.HMAC = t3.extend({ init: function(e4, t4) {
        e4 = this._hasher = new e4.init(), "string" == typeof t4 && (t4 = s2.parse(t4));
        var n3 = e4.blockSize, r2 = 4 * n3;
        t4.sigBytes > r2 && (t4 = e4.finalize(t4)), t4.clamp();
        for (var i2 = this._oKey = t4.clone(), o2 = this._iKey = t4.clone(), a2 = i2.words, c2 = o2.words, u2 = 0; u2 < n3; u2++) a2[u2] ^= 1549556828, c2[u2] ^= 909522486;
        i2.sigBytes = o2.sigBytes = r2, this.reset();
      }, reset: function() {
        var e4 = this._hasher;
        e4.reset(), e4.update(this._iKey);
      }, update: function(e4) {
        return this._hasher.update(e4), this;
      }, finalize: function(e4) {
        var t4 = this._hasher, n3 = t4.finalize(e4);
        return t4.reset(), t4.finalize(this._oKey.clone().concat(n3));
      } });
    }());
  }), n$1(function(e2, t2) {
    e2.exports = r$1.HmacMD5;
  })), o$1 = n$1(function(e2, t2) {
    e2.exports = r$1.enc.Utf8;
  }), a$2 = n$1(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r$1, function() {
      var e3 = n2, t3 = e3.lib.WordArray;
      function s2(e4, n3, s3) {
        for (var r2 = [], i2 = 0, o2 = 0; o2 < n3; o2++) if (o2 % 4) {
          var a2 = s3[e4.charCodeAt(o2 - 1)] << o2 % 4 * 2, c2 = s3[e4.charCodeAt(o2)] >>> 6 - o2 % 4 * 2;
          r2[i2 >>> 2] |= (a2 | c2) << 24 - i2 % 4 * 8, i2++;
        }
        return t3.create(r2, i2);
      }
      e3.enc.Base64 = { stringify: function(e4) {
        var t4 = e4.words, n3 = e4.sigBytes, s3 = this._map;
        e4.clamp();
        for (var r2 = [], i2 = 0; i2 < n3; i2 += 3) for (var o2 = (t4[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) << 16 | (t4[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255) << 8 | t4[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255, a2 = 0; a2 < 4 && i2 + 0.75 * a2 < n3; a2++) r2.push(s3.charAt(o2 >>> 6 * (3 - a2) & 63));
        var c2 = s3.charAt(64);
        if (c2) for (; r2.length % 4; ) r2.push(c2);
        return r2.join("");
      }, parse: function(e4) {
        var t4 = e4.length, n3 = this._map, r2 = this._reverseMap;
        if (!r2) {
          r2 = this._reverseMap = [];
          for (var i2 = 0; i2 < n3.length; i2++) r2[n3.charCodeAt(i2)] = i2;
        }
        var o2 = n3.charAt(64);
        if (o2) {
          var a2 = e4.indexOf(o2);
          -1 !== a2 && (t4 = a2);
        }
        return s2(e4, t4, r2);
      }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
    }(), n2.enc.Base64);
  });
  const c$1 = "FUNCTION", u$1 = "OBJECT", h$2 = "CLIENT_DB", l$1 = "pending", d$1 = "fulfilled", p$1 = "rejected";
  function f$1(e2) {
    return Object.prototype.toString.call(e2).slice(8, -1).toLowerCase();
  }
  function g$1(e2) {
    return "object" === f$1(e2);
  }
  function m$1(e2) {
    return "function" == typeof e2;
  }
  function y$1(e2) {
    return function() {
      try {
        return e2.apply(e2, arguments);
      } catch (e3) {
        console.error(e3);
      }
    };
  }
  const _$1 = "REJECTED", w$1 = "NOT_PENDING";
  let v$1 = class v {
    constructor({ createPromise: e2, retryRule: t2 = _$1 } = {}) {
      this.createPromise = e2, this.status = null, this.promise = null, this.retryRule = t2;
    }
    get needRetry() {
      if (!this.status) return true;
      switch (this.retryRule) {
        case _$1:
          return this.status === p$1;
        case w$1:
          return this.status !== l$1;
      }
    }
    exec() {
      return this.needRetry ? (this.status = l$1, this.promise = this.createPromise().then((e2) => (this.status = d$1, Promise.resolve(e2)), (e2) => (this.status = p$1, Promise.reject(e2))), this.promise) : this.promise;
    }
  };
  function I(e2) {
    return e2 && "string" == typeof e2 ? JSON.parse(e2) : e2;
  }
  const S$1 = true, b$1 = "app", A = I(define_process_env_UNI_SECURE_NETWORK_CONFIG_default), C = b$1, P$1 = I(""), T$1 = I("[]") || [];
  let O$1 = "";
  try {
    O$1 = "";
  } catch (e2) {
  }
  let E = {};
  function L(e2, t2 = {}) {
    var n2, s2;
    return n2 = E, s2 = e2, Object.prototype.hasOwnProperty.call(n2, s2) || (E[e2] = t2), E[e2];
  }
  E = uni._globalUniCloudObj ? uni._globalUniCloudObj : uni._globalUniCloudObj = {};
  const R = ["invoke", "success", "fail", "complete"], U = L("_globalUniCloudInterceptor");
  function N(e2, t2) {
    U[e2] || (U[e2] = {}), g$1(t2) && Object.keys(t2).forEach((n2) => {
      R.indexOf(n2) > -1 && function(e3, t3, n3) {
        let s2 = U[e3][t3];
        s2 || (s2 = U[e3][t3] = []), -1 === s2.indexOf(n3) && m$1(n3) && s2.push(n3);
      }(e2, n2, t2[n2]);
    });
  }
  function D(e2, t2) {
    U[e2] || (U[e2] = {}), g$1(t2) ? Object.keys(t2).forEach((n2) => {
      R.indexOf(n2) > -1 && function(e3, t3, n3) {
        const s2 = U[e3][t3];
        if (!s2) return;
        const r2 = s2.indexOf(n3);
        r2 > -1 && s2.splice(r2, 1);
      }(e2, n2, t2[n2]);
    }) : delete U[e2];
  }
  function M(e2, t2) {
    return e2 && 0 !== e2.length ? e2.reduce((e3, n2) => e3.then(() => n2(t2)), Promise.resolve()) : Promise.resolve();
  }
  function q(e2, t2) {
    return U[e2] && U[e2][t2] || [];
  }
  function F(e2) {
    N("callObject", e2);
  }
  const K = L("_globalUniCloudListener"), j$1 = "response", $$1 = "needLogin", B = "refreshToken", W = "clientdb", H = "cloudfunction", z = "cloudobject";
  function J(e2) {
    return K[e2] || (K[e2] = []), K[e2];
  }
  function V(e2, t2) {
    const n2 = J(e2);
    n2.includes(t2) || n2.push(t2);
  }
  function G(e2, t2) {
    const n2 = J(e2), s2 = n2.indexOf(t2);
    -1 !== s2 && n2.splice(s2, 1);
  }
  function Y(e2, t2) {
    const n2 = J(e2);
    for (let e3 = 0; e3 < n2.length; e3++) {
      (0, n2[e3])(t2);
    }
  }
  let Q, X = false;
  function Z() {
    return Q || (Q = new Promise((e2) => {
      X && e2(), function t2() {
        if ("function" == typeof getCurrentPages) {
          const t3 = getCurrentPages();
          t3 && t3[0] && (X = true, e2());
        }
        X || setTimeout(() => {
          t2();
        }, 30);
      }();
    }), Q);
  }
  function ee(e2) {
    const t2 = {};
    for (const n2 in e2) {
      const s2 = e2[n2];
      m$1(s2) && (t2[n2] = y$1(s2));
    }
    return t2;
  }
  class te extends Error {
    constructor(e2) {
      super(e2.message), this.errMsg = e2.message || e2.errMsg || "unknown system error", this.code = this.errCode = e2.code || e2.errCode || "SYSTEM_ERROR", this.errSubject = this.subject = e2.subject || e2.errSubject, this.cause = e2.cause, this.requestId = e2.requestId;
    }
    toJson(e2 = 0) {
      if (!(e2 >= 10)) return e2++, { errCode: this.errCode, errMsg: this.errMsg, errSubject: this.errSubject, cause: this.cause && this.cause.toJson ? this.cause.toJson(e2) : this.cause };
    }
  }
  var ne = { request: (e2) => uni.request(e2), uploadFile: (e2) => uni.uploadFile(e2), setStorageSync: (e2, t2) => uni.setStorageSync(e2, t2), getStorageSync: (e2) => uni.getStorageSync(e2), removeStorageSync: (e2) => uni.removeStorageSync(e2), clearStorageSync: () => uni.clearStorageSync(), connectSocket: (e2) => uni.connectSocket(e2) };
  function se(e2) {
    return e2 && se(e2.__v_raw) || e2;
  }
  function re() {
    return { token: ne.getStorageSync("uni_id_token") || ne.getStorageSync("uniIdToken"), tokenExpired: ne.getStorageSync("uni_id_token_expired") };
  }
  function ie({ token: e2, tokenExpired: t2 } = {}) {
    e2 && ne.setStorageSync("uni_id_token", e2), t2 && ne.setStorageSync("uni_id_token_expired", t2);
  }
  let oe, ae;
  function ce() {
    return oe || (oe = uni.getSystemInfoSync()), oe;
  }
  function ue() {
    let e2, t2;
    try {
      if (uni.getLaunchOptionsSync) {
        if (uni.getLaunchOptionsSync.toString().indexOf("not yet implemented") > -1) return;
        const { scene: n2, channel: s2 } = uni.getLaunchOptionsSync();
        e2 = s2, t2 = n2;
      }
    } catch (e3) {
    }
    return { channel: e2, scene: t2 };
  }
  let he = {};
  function le() {
    const e2 = uni.getLocale && uni.getLocale() || "en";
    if (ae) return __spreadProps(__spreadValues(__spreadValues({}, he), ae), { locale: e2, LOCALE: e2 });
    const t2 = ce(), { deviceId: n2, osName: s2, uniPlatform: r2, appId: i2 } = t2, o2 = ["appId", "appLanguage", "appName", "appVersion", "appVersionCode", "appWgtVersion", "browserName", "browserVersion", "deviceBrand", "deviceId", "deviceModel", "deviceType", "osName", "osVersion", "romName", "romVersion", "ua", "hostName", "hostVersion", "uniPlatform", "uniRuntimeVersion", "uniRuntimeVersionCode", "uniCompilerVersion", "uniCompilerVersionCode"];
    for (const e3 in t2) Object.hasOwnProperty.call(t2, e3) && -1 === o2.indexOf(e3) && delete t2[e3];
    return ae = __spreadValues(__spreadValues({ PLATFORM: r2, OS: s2, APPID: i2, DEVICEID: n2 }, ue()), t2), __spreadProps(__spreadValues(__spreadValues({}, he), ae), { locale: e2, LOCALE: e2 });
  }
  var de = { sign: function(e2, t2) {
    let n2 = "";
    return Object.keys(e2).sort().forEach(function(t3) {
      e2[t3] && (n2 = n2 + "&" + t3 + "=" + e2[t3]);
    }), n2 = n2.slice(1), i$2(n2, t2).toString();
  }, wrappedRequest: function(e2, t2) {
    return new Promise((n2, s2) => {
      t2(Object.assign(e2, { complete(e3) {
        e3 || (e3 = {});
        const t3 = e3.data && e3.data.header && e3.data.header["x-serverless-request-id"] || e3.header && e3.header["request-id"];
        if (!e3.statusCode || e3.statusCode >= 400) {
          const n3 = e3.data && e3.data.error && e3.data.error.code || "SYS_ERR", r3 = e3.data && e3.data.error && e3.data.error.message || e3.errMsg || "request:fail";
          return s2(new te({ code: n3, message: r3, requestId: t3 }));
        }
        const r2 = e3.data;
        if (r2.error) return s2(new te({ code: r2.error.code, message: r2.error.message, requestId: t3 }));
        r2.result = r2.data, r2.requestId = t3, delete r2.data, n2(r2);
      } }));
    });
  }, toBase64: function(e2) {
    return a$2.stringify(o$1.parse(e2));
  } };
  var pe = class {
    constructor(e2) {
      ["spaceId", "clientSecret"].forEach((t2) => {
        if (!Object.prototype.hasOwnProperty.call(e2, t2)) throw new Error(`${t2} required`);
      }), this.config = Object.assign({}, { endpoint: 0 === e2.spaceId.indexOf("mp-") ? "https://api.next.bspapp.com" : "https://api.bspapp.com" }, e2), this.config.provider = "aliyun", this.config.requestUrl = this.config.endpoint + "/client", this.config.envType = this.config.envType || "public", this.config.accessTokenKey = "access_token_" + this.config.spaceId, this.adapter = ne, this._getAccessTokenPromiseHub = new v$1({ createPromise: () => this.requestAuth(this.setupRequest({ method: "serverless.auth.user.anonymousAuthorize", params: "{}" }, "auth")).then((e3) => {
        if (!e3.result || !e3.result.accessToken) throw new te({ code: "AUTH_FAILED", message: "获取accessToken失败" });
        this.setAccessToken(e3.result.accessToken);
      }), retryRule: w$1 });
    }
    get hasAccessToken() {
      return !!this.accessToken;
    }
    setAccessToken(e2) {
      this.accessToken = e2;
    }
    requestWrapped(e2) {
      return de.wrappedRequest(e2, this.adapter.request);
    }
    requestAuth(e2) {
      return this.requestWrapped(e2);
    }
    request(e2, t2) {
      return Promise.resolve().then(() => this.hasAccessToken ? t2 ? this.requestWrapped(e2) : this.requestWrapped(e2).catch((t3) => new Promise((e3, n2) => {
        !t3 || "GATEWAY_INVALID_TOKEN" !== t3.code && "InvalidParameter.InvalidToken" !== t3.code ? n2(t3) : e3();
      }).then(() => this.getAccessToken()).then(() => {
        const t4 = this.rebuildRequest(e2);
        return this.request(t4, true);
      })) : this.getAccessToken().then(() => {
        const t3 = this.rebuildRequest(e2);
        return this.request(t3, true);
      }));
    }
    rebuildRequest(e2) {
      const t2 = Object.assign({}, e2);
      return t2.data.token = this.accessToken, t2.header["x-basement-token"] = this.accessToken, t2.header["x-serverless-sign"] = de.sign(t2.data, this.config.clientSecret), t2;
    }
    setupRequest(e2, t2) {
      const n2 = Object.assign({}, e2, { spaceId: this.config.spaceId, timestamp: Date.now() }), s2 = { "Content-Type": "application/json" };
      return "auth" !== t2 && (n2.token = this.accessToken, s2["x-basement-token"] = this.accessToken), s2["x-serverless-sign"] = de.sign(n2, this.config.clientSecret), { url: this.config.requestUrl, method: "POST", data: n2, dataType: "json", header: s2 };
    }
    getAccessToken() {
      return this._getAccessTokenPromiseHub.exec();
    }
    authorize() {
      return __async(this, null, function* () {
        yield this.getAccessToken();
      });
    }
    callFunction(e2) {
      const t2 = { method: "serverless.function.runtime.invoke", params: JSON.stringify({ functionTarget: e2.name, functionArgs: e2.data || {} }) };
      return this.request(this.setupRequest(t2));
    }
    getOSSUploadOptionsFromPath(e2) {
      const t2 = { method: "serverless.file.resource.generateProximalSign", params: JSON.stringify(e2) };
      return this.request(this.setupRequest(t2));
    }
    uploadFileToOSS({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, onUploadProgress: i2 }) {
      return new Promise((o2, a2) => {
        const c2 = this.adapter.uploadFile({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, header: { "X-OSS-server-side-encrpytion": "AES256" }, success(e3) {
          e3 && e3.statusCode < 400 ? o2(e3) : a2(new te({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
        }, fail(e3) {
          a2(new te({ code: e3.code || "UPLOAD_FAILED", message: e3.message || e3.errMsg || "文件上传失败" }));
        } });
        "function" == typeof i2 && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((e3) => {
          i2({ loaded: e3.totalBytesSent, total: e3.totalBytesExpectedToSend });
        });
      });
    }
    reportOSSUpload(e2) {
      const t2 = { method: "serverless.file.resource.report", params: JSON.stringify(e2) };
      return this.request(this.setupRequest(t2));
    }
    uploadFile(_0) {
      return __async(this, arguments, function* ({ filePath: e2, cloudPath: t2, fileType: n2 = "image", cloudPathAsRealPath: s2 = false, onUploadProgress: r2, config: i2 }) {
        if ("string" !== f$1(t2)) throw new te({ code: "INVALID_PARAM", message: "cloudPath必须为字符串类型" });
        if (!(t2 = t2.trim())) throw new te({ code: "INVALID_PARAM", message: "cloudPath不可为空" });
        if (/:\/\//.test(t2)) throw new te({ code: "INVALID_PARAM", message: "cloudPath不合法" });
        const o2 = i2 && i2.envType || this.config.envType;
        if (s2 && ("/" !== t2[0] && (t2 = "/" + t2), t2.indexOf("\\") > -1)) throw new te({ code: "INVALID_PARAM", message: "使用cloudPath作为路径时，cloudPath不可包含“\\”" });
        const a2 = (yield this.getOSSUploadOptionsFromPath({ env: o2, filename: s2 ? t2.split("/").pop() : t2, fileId: s2 ? t2 : void 0 })).result, c2 = "https://" + a2.cdnDomain + "/" + a2.ossPath, { securityToken: u2, accessKeyId: h2, signature: l2, host: d2, ossPath: p2, id: g2, policy: m2, ossCallbackUrl: y2 } = a2, _2 = { "Cache-Control": "max-age=2592000", "Content-Disposition": "attachment", OSSAccessKeyId: h2, Signature: l2, host: d2, id: g2, key: p2, policy: m2, success_action_status: 200 };
        if (u2 && (_2["x-oss-security-token"] = u2), y2) {
          const e3 = JSON.stringify({ callbackUrl: y2, callbackBody: JSON.stringify({ fileId: g2, spaceId: this.config.spaceId }), callbackBodyType: "application/json" });
          _2.callback = de.toBase64(e3);
        }
        const w2 = { url: "https://" + a2.host, formData: _2, fileName: "file", name: "file", filePath: e2, fileType: n2 };
        if (yield this.uploadFileToOSS(Object.assign({}, w2, { onUploadProgress: r2 })), y2) return { success: true, filePath: e2, fileID: c2 };
        if ((yield this.reportOSSUpload({ id: g2 })).success) return { success: true, filePath: e2, fileID: c2 };
        throw new te({ code: "UPLOAD_FAILED", message: "文件上传失败" });
      });
    }
    getTempFileURL({ fileList: e2 } = {}) {
      return new Promise((t2, n2) => {
        Array.isArray(e2) && 0 !== e2.length || n2(new te({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" })), t2({ fileList: e2.map((e3) => ({ fileID: e3, tempFileURL: e3 })) });
      });
    }
    getFileInfo() {
      return __async(this, arguments, function* ({ fileList: e2 } = {}) {
        if (!Array.isArray(e2) || 0 === e2.length) throw new te({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" });
        const t2 = { method: "serverless.file.resource.info", params: JSON.stringify({ id: e2.map((e3) => e3.split("?")[0]).join(",") }) };
        return { fileList: (yield this.request(this.setupRequest(t2))).result };
      });
    }
  };
  var fe = { init(e2) {
    const t2 = new pe(e2), n2 = { signInAnonymously: function() {
      return t2.authorize();
    }, getLoginState: function() {
      return Promise.resolve(false);
    } };
    return t2.auth = function() {
      return n2;
    }, t2.customAuth = t2.auth, t2;
  } };
  const ge = "undefined" != typeof location && "http:" === location.protocol ? "http:" : "https:";
  var me;
  !function(e2) {
    e2.local = "local", e2.none = "none", e2.session = "session";
  }(me || (me = {}));
  var ye = function() {
  }, _e = n$1(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r$1, function(e3) {
      var t3 = n2, s2 = t3.lib, r2 = s2.WordArray, i2 = s2.Hasher, o2 = t3.algo, a2 = [], c2 = [];
      !function() {
        function t4(t5) {
          for (var n4 = e3.sqrt(t5), s4 = 2; s4 <= n4; s4++) if (!(t5 % s4)) return false;
          return true;
        }
        function n3(e4) {
          return 4294967296 * (e4 - (0 | e4)) | 0;
        }
        for (var s3 = 2, r3 = 0; r3 < 64; ) t4(s3) && (r3 < 8 && (a2[r3] = n3(e3.pow(s3, 0.5))), c2[r3] = n3(e3.pow(s3, 1 / 3)), r3++), s3++;
      }();
      var u2 = [], h2 = o2.SHA256 = i2.extend({ _doReset: function() {
        this._hash = new r2.init(a2.slice(0));
      }, _doProcessBlock: function(e4, t4) {
        for (var n3 = this._hash.words, s3 = n3[0], r3 = n3[1], i3 = n3[2], o3 = n3[3], a3 = n3[4], h3 = n3[5], l2 = n3[6], d2 = n3[7], p2 = 0; p2 < 64; p2++) {
          if (p2 < 16) u2[p2] = 0 | e4[t4 + p2];
          else {
            var f2 = u2[p2 - 15], g2 = (f2 << 25 | f2 >>> 7) ^ (f2 << 14 | f2 >>> 18) ^ f2 >>> 3, m2 = u2[p2 - 2], y2 = (m2 << 15 | m2 >>> 17) ^ (m2 << 13 | m2 >>> 19) ^ m2 >>> 10;
            u2[p2] = g2 + u2[p2 - 7] + y2 + u2[p2 - 16];
          }
          var _2 = s3 & r3 ^ s3 & i3 ^ r3 & i3, w2 = (s3 << 30 | s3 >>> 2) ^ (s3 << 19 | s3 >>> 13) ^ (s3 << 10 | s3 >>> 22), v2 = d2 + ((a3 << 26 | a3 >>> 6) ^ (a3 << 21 | a3 >>> 11) ^ (a3 << 7 | a3 >>> 25)) + (a3 & h3 ^ ~a3 & l2) + c2[p2] + u2[p2];
          d2 = l2, l2 = h3, h3 = a3, a3 = o3 + v2 | 0, o3 = i3, i3 = r3, r3 = s3, s3 = v2 + (w2 + _2) | 0;
        }
        n3[0] = n3[0] + s3 | 0, n3[1] = n3[1] + r3 | 0, n3[2] = n3[2] + i3 | 0, n3[3] = n3[3] + o3 | 0, n3[4] = n3[4] + a3 | 0, n3[5] = n3[5] + h3 | 0, n3[6] = n3[6] + l2 | 0, n3[7] = n3[7] + d2 | 0;
      }, _doFinalize: function() {
        var t4 = this._data, n3 = t4.words, s3 = 8 * this._nDataBytes, r3 = 8 * t4.sigBytes;
        return n3[r3 >>> 5] |= 128 << 24 - r3 % 32, n3[14 + (r3 + 64 >>> 9 << 4)] = e3.floor(s3 / 4294967296), n3[15 + (r3 + 64 >>> 9 << 4)] = s3, t4.sigBytes = 4 * n3.length, this._process(), this._hash;
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4._hash = this._hash.clone(), e4;
      } });
      t3.SHA256 = i2._createHelper(h2), t3.HmacSHA256 = i2._createHmacHelper(h2);
    }(Math), n2.SHA256);
  }), we = _e, ve = n$1(function(e2, t2) {
    e2.exports = r$1.HmacSHA256;
  });
  const Ie = () => {
    let e2;
    if (!Promise) {
      e2 = () => {
      }, e2.promise = {};
      const t3 = () => {
        throw new te({ message: 'Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.' });
      };
      return Object.defineProperty(e2.promise, "then", { get: t3 }), Object.defineProperty(e2.promise, "catch", { get: t3 }), e2;
    }
    const t2 = new Promise((t3, n2) => {
      e2 = (e3, s2) => e3 ? n2(e3) : t3(s2);
    });
    return e2.promise = t2, e2;
  };
  function Se(e2) {
    return void 0 === e2;
  }
  function be(e2) {
    return "[object Null]" === Object.prototype.toString.call(e2);
  }
  var ke;
  function Ae(e2) {
    const t2 = (n2 = e2, "[object Array]" === Object.prototype.toString.call(n2) ? e2 : [e2]);
    var n2;
    for (const e3 of t2) {
      const { isMatch: t3, genAdapter: n3, runtime: s2 } = e3;
      if (t3()) return { adapter: n3(), runtime: s2 };
    }
  }
  !function(e2) {
    e2.WEB = "web", e2.WX_MP = "wx_mp";
  }(ke || (ke = {}));
  const Ce = { adapter: null, runtime: void 0 }, Pe = ["anonymousUuidKey"];
  class Te extends ye {
    constructor() {
      super(), Ce.adapter.root.tcbObject || (Ce.adapter.root.tcbObject = {});
    }
    setItem(e2, t2) {
      Ce.adapter.root.tcbObject[e2] = t2;
    }
    getItem(e2) {
      return Ce.adapter.root.tcbObject[e2];
    }
    removeItem(e2) {
      delete Ce.adapter.root.tcbObject[e2];
    }
    clear() {
      delete Ce.adapter.root.tcbObject;
    }
  }
  function xe(e2, t2) {
    switch (e2) {
      case "local":
        return t2.localStorage || new Te();
      case "none":
        return new Te();
      default:
        return t2.sessionStorage || new Te();
    }
  }
  class Oe {
    constructor(e2) {
      if (!this._storage) {
        this._persistence = Ce.adapter.primaryStorage || e2.persistence, this._storage = xe(this._persistence, Ce.adapter);
        const t2 = `access_token_${e2.env}`, n2 = `access_token_expire_${e2.env}`, s2 = `refresh_token_${e2.env}`, r2 = `anonymous_uuid_${e2.env}`, i2 = `login_type_${e2.env}`, o2 = `user_info_${e2.env}`;
        this.keys = { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2, anonymousUuidKey: r2, loginTypeKey: i2, userInfoKey: o2 };
      }
    }
    updatePersistence(e2) {
      if (e2 === this._persistence) return;
      const t2 = "local" === this._persistence;
      this._persistence = e2;
      const n2 = xe(e2, Ce.adapter);
      for (const e3 in this.keys) {
        const s2 = this.keys[e3];
        if (t2 && Pe.includes(e3)) continue;
        const r2 = this._storage.getItem(s2);
        Se(r2) || be(r2) || (n2.setItem(s2, r2), this._storage.removeItem(s2));
      }
      this._storage = n2;
    }
    setStore(e2, t2, n2) {
      if (!this._storage) return;
      const s2 = { version: n2 || "localCachev1", content: t2 }, r2 = JSON.stringify(s2);
      try {
        this._storage.setItem(e2, r2);
      } catch (e3) {
        throw e3;
      }
    }
    getStore(e2, t2) {
      try {
        if (!this._storage) return;
      } catch (e3) {
        return "";
      }
      t2 = t2 || "localCachev1";
      const n2 = this._storage.getItem(e2);
      if (!n2) return "";
      if (n2.indexOf(t2) >= 0) {
        return JSON.parse(n2).content;
      }
      return "";
    }
    removeStore(e2) {
      this._storage.removeItem(e2);
    }
  }
  const Ee = {}, Le = {};
  function Re(e2) {
    return Ee[e2];
  }
  class Ue {
    constructor(e2, t2) {
      this.data = t2 || null, this.name = e2;
    }
  }
  class Ne extends Ue {
    constructor(e2, t2) {
      super("error", { error: e2, data: t2 }), this.error = e2;
    }
  }
  const De = new class {
    constructor() {
      this._listeners = {};
    }
    on(e2, t2) {
      return function(e3, t3, n2) {
        n2[e3] = n2[e3] || [], n2[e3].push(t3);
      }(e2, t2, this._listeners), this;
    }
    off(e2, t2) {
      return function(e3, t3, n2) {
        if (n2 && n2[e3]) {
          const s2 = n2[e3].indexOf(t3);
          -1 !== s2 && n2[e3].splice(s2, 1);
        }
      }(e2, t2, this._listeners), this;
    }
    fire(e2, t2) {
      if (e2 instanceof Ne) return console.error(e2.error), this;
      const n2 = "string" == typeof e2 ? new Ue(e2, t2 || {}) : e2;
      const s2 = n2.name;
      if (this._listens(s2)) {
        n2.target = this;
        const e3 = this._listeners[s2] ? [...this._listeners[s2]] : [];
        for (const t3 of e3) t3.call(this, n2);
      }
      return this;
    }
    _listens(e2) {
      return this._listeners[e2] && this._listeners[e2].length > 0;
    }
  }();
  function Me(e2, t2) {
    De.on(e2, t2);
  }
  function qe(e2, t2 = {}) {
    De.fire(e2, t2);
  }
  function Fe(e2, t2) {
    De.off(e2, t2);
  }
  const Ke = "loginStateChanged", je = "loginStateExpire", $e = "loginTypeChanged", Be = "anonymousConverted", We = "refreshAccessToken";
  var He;
  !function(e2) {
    e2.ANONYMOUS = "ANONYMOUS", e2.WECHAT = "WECHAT", e2.WECHAT_PUBLIC = "WECHAT-PUBLIC", e2.WECHAT_OPEN = "WECHAT-OPEN", e2.CUSTOM = "CUSTOM", e2.EMAIL = "EMAIL", e2.USERNAME = "USERNAME", e2.NULL = "NULL";
  }(He || (He = {}));
  const ze = ["auth.getJwt", "auth.logout", "auth.signInWithTicket", "auth.signInAnonymously", "auth.signIn", "auth.fetchAccessTokenWithRefreshToken", "auth.signUpWithEmailAndPassword", "auth.activateEndUserMail", "auth.sendPasswordResetEmail", "auth.resetPasswordWithToken", "auth.isUsernameRegistered"], Je = { "X-SDK-Version": "1.3.5" };
  function Ve(e2, t2, n2) {
    const s2 = e2[t2];
    e2[t2] = function(t3) {
      const r2 = {}, i2 = {};
      n2.forEach((n3) => {
        const { data: s3, headers: o3 } = n3.call(e2, t3);
        Object.assign(r2, s3), Object.assign(i2, o3);
      });
      const o2 = t3.data;
      return o2 && (() => {
        var e3;
        if (e3 = o2, "[object FormData]" !== Object.prototype.toString.call(e3)) t3.data = __spreadValues(__spreadValues({}, o2), r2);
        else for (const e4 in r2) o2.append(e4, r2[e4]);
      })(), t3.headers = __spreadValues(__spreadValues({}, t3.headers || {}), i2), s2.call(e2, t3);
    };
  }
  function Ge() {
    const e2 = Math.random().toString(16).slice(2);
    return { data: { seqId: e2 }, headers: __spreadProps(__spreadValues({}, Je), { "x-seqid": e2 }) };
  }
  class Ye {
    constructor(e2 = {}) {
      var t2;
      this.config = e2, this._reqClass = new Ce.adapter.reqClass({ timeout: this.config.timeout, timeoutMsg: `请求在${this.config.timeout / 1e3}s内未完成，已中断`, restrictedMethods: ["post"] }), this._cache = Re(this.config.env), this._localCache = (t2 = this.config.env, Le[t2]), Ve(this._reqClass, "post", [Ge]), Ve(this._reqClass, "upload", [Ge]), Ve(this._reqClass, "download", [Ge]);
    }
    post(e2) {
      return __async(this, null, function* () {
        return yield this._reqClass.post(e2);
      });
    }
    upload(e2) {
      return __async(this, null, function* () {
        return yield this._reqClass.upload(e2);
      });
    }
    download(e2) {
      return __async(this, null, function* () {
        return yield this._reqClass.download(e2);
      });
    }
    refreshAccessToken() {
      return __async(this, null, function* () {
        let e2, t2;
        this._refreshAccessTokenPromise || (this._refreshAccessTokenPromise = this._refreshAccessToken());
        try {
          e2 = yield this._refreshAccessTokenPromise;
        } catch (e3) {
          t2 = e3;
        }
        if (this._refreshAccessTokenPromise = null, this._shouldRefreshAccessTokenHook = null, t2) throw t2;
        return e2;
      });
    }
    _refreshAccessToken() {
      return __async(this, null, function* () {
        const { accessTokenKey: e2, accessTokenExpireKey: t2, refreshTokenKey: n2, loginTypeKey: s2, anonymousUuidKey: r2 } = this._cache.keys;
        this._cache.removeStore(e2), this._cache.removeStore(t2);
        let i2 = this._cache.getStore(n2);
        if (!i2) throw new te({ message: "未登录CloudBase" });
        const o2 = { refresh_token: i2 }, a2 = yield this.request("auth.fetchAccessTokenWithRefreshToken", o2);
        if (a2.data.code) {
          const { code: e3 } = a2.data;
          if ("SIGN_PARAM_INVALID" === e3 || "REFRESH_TOKEN_EXPIRED" === e3 || "INVALID_REFRESH_TOKEN" === e3) {
            if (this._cache.getStore(s2) === He.ANONYMOUS && "INVALID_REFRESH_TOKEN" === e3) {
              const e4 = this._cache.getStore(r2), t3 = this._cache.getStore(n2), s3 = yield this.send("auth.signInAnonymously", { anonymous_uuid: e4, refresh_token: t3 });
              return this.setRefreshToken(s3.refresh_token), this._refreshAccessToken();
            }
            qe(je), this._cache.removeStore(n2);
          }
          throw new te({ code: a2.data.code, message: `刷新access token失败：${a2.data.code}` });
        }
        if (a2.data.access_token) return qe(We), this._cache.setStore(e2, a2.data.access_token), this._cache.setStore(t2, a2.data.access_token_expire + Date.now()), { accessToken: a2.data.access_token, accessTokenExpire: a2.data.access_token_expire };
        a2.data.refresh_token && (this._cache.removeStore(n2), this._cache.setStore(n2, a2.data.refresh_token), this._refreshAccessToken());
      });
    }
    getAccessToken() {
      return __async(this, null, function* () {
        const { accessTokenKey: e2, accessTokenExpireKey: t2, refreshTokenKey: n2 } = this._cache.keys;
        if (!this._cache.getStore(n2)) throw new te({ message: "refresh token不存在，登录状态异常" });
        let s2 = this._cache.getStore(e2), r2 = this._cache.getStore(t2), i2 = true;
        return this._shouldRefreshAccessTokenHook && !(yield this._shouldRefreshAccessTokenHook(s2, r2)) && (i2 = false), (!s2 || !r2 || r2 < Date.now()) && i2 ? this.refreshAccessToken() : { accessToken: s2, accessTokenExpire: r2 };
      });
    }
    request(e2, t2, n2) {
      return __async(this, null, function* () {
        const s2 = `x-tcb-trace_${this.config.env}`;
        let r2 = "application/x-www-form-urlencoded";
        const i2 = __spreadValues({ action: e2, env: this.config.env, dataVersion: "2019-08-16" }, t2);
        if (-1 === ze.indexOf(e2)) {
          const { refreshTokenKey: e3 } = this._cache.keys;
          this._cache.getStore(e3) && (i2.access_token = (yield this.getAccessToken()).accessToken);
        }
        let o2;
        if ("storage.uploadFile" === e2) {
          o2 = new FormData();
          for (let e3 in o2) o2.hasOwnProperty(e3) && void 0 !== o2[e3] && o2.append(e3, i2[e3]);
          r2 = "multipart/form-data";
        } else {
          r2 = "application/json", o2 = {};
          for (let e3 in i2) void 0 !== i2[e3] && (o2[e3] = i2[e3]);
        }
        let a2 = { headers: { "content-type": r2 } };
        n2 && n2.onUploadProgress && (a2.onUploadProgress = n2.onUploadProgress);
        const c2 = this._localCache.getStore(s2);
        c2 && (a2.headers["X-TCB-Trace"] = c2);
        const { parse: u2, inQuery: h2, search: l2 } = t2;
        let d2 = { env: this.config.env };
        u2 && (d2.parse = true), h2 && (d2 = __spreadValues(__spreadValues({}, h2), d2));
        let p2 = function(e3, t3, n3 = {}) {
          const s3 = /\?/.test(t3);
          let r3 = "";
          for (let e4 in n3) "" === r3 ? !s3 && (t3 += "?") : r3 += "&", r3 += `${e4}=${encodeURIComponent(n3[e4])}`;
          return /^http(s)?\:\/\//.test(t3 += r3) ? t3 : `${e3}${t3}`;
        }(ge, "//tcb-api.tencentcloudapi.com/web", d2);
        l2 && (p2 += l2);
        const f2 = yield this.post(__spreadValues({ url: p2, data: o2 }, a2)), g2 = f2.header && f2.header["x-tcb-trace"];
        if (g2 && this._localCache.setStore(s2, g2), 200 !== Number(f2.status) && 200 !== Number(f2.statusCode) || !f2.data) throw new te({ code: "NETWORK_ERROR", message: "network request error" });
        return f2;
      });
    }
    send(_0) {
      return __async(this, arguments, function* (e2, t2 = {}) {
        const n2 = yield this.request(e2, t2, { onUploadProgress: t2.onUploadProgress });
        if ("ACCESS_TOKEN_EXPIRED" === n2.data.code && -1 === ze.indexOf(e2)) {
          yield this.refreshAccessToken();
          const n3 = yield this.request(e2, t2, { onUploadProgress: t2.onUploadProgress });
          if (n3.data.code) throw new te({ code: n3.data.code, message: n3.data.message });
          return n3.data;
        }
        if (n2.data.code) throw new te({ code: n2.data.code, message: n2.data.message });
        return n2.data;
      });
    }
    setRefreshToken(e2) {
      const { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.removeStore(n2), this._cache.setStore(s2, e2);
    }
  }
  const Qe = {};
  function Xe(e2) {
    return Qe[e2];
  }
  class Ze {
    constructor(e2) {
      this.config = e2, this._cache = Re(e2.env), this._request = Xe(e2.env);
    }
    setRefreshToken(e2) {
      const { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.removeStore(n2), this._cache.setStore(s2, e2);
    }
    setAccessToken(e2, t2) {
      const { accessTokenKey: n2, accessTokenExpireKey: s2 } = this._cache.keys;
      this._cache.setStore(n2, e2), this._cache.setStore(s2, t2);
    }
    refreshUserInfo() {
      return __async(this, null, function* () {
        const { data: e2 } = yield this._request.send("auth.getUserInfo", {});
        return this.setLocalUserInfo(e2), e2;
      });
    }
    setLocalUserInfo(e2) {
      const { userInfoKey: t2 } = this._cache.keys;
      this._cache.setStore(t2, e2);
    }
  }
  class et {
    constructor(e2) {
      if (!e2) throw new te({ code: "PARAM_ERROR", message: "envId is not defined" });
      this._envId = e2, this._cache = Re(this._envId), this._request = Xe(this._envId), this.setUserInfo();
    }
    linkWithTicket(e2) {
      if ("string" != typeof e2) throw new te({ code: "PARAM_ERROR", message: "ticket must be string" });
      return this._request.send("auth.linkWithTicket", { ticket: e2 });
    }
    linkWithRedirect(e2) {
      e2.signInWithRedirect();
    }
    updatePassword(e2, t2) {
      return this._request.send("auth.updatePassword", { oldPassword: t2, newPassword: e2 });
    }
    updateEmail(e2) {
      return this._request.send("auth.updateEmail", { newEmail: e2 });
    }
    updateUsername(e2) {
      if ("string" != typeof e2) throw new te({ code: "PARAM_ERROR", message: "username must be a string" });
      return this._request.send("auth.updateUsername", { username: e2 });
    }
    getLinkedUidList() {
      return __async(this, null, function* () {
        const { data: e2 } = yield this._request.send("auth.getLinkedUidList", {});
        let t2 = false;
        const { users: n2 } = e2;
        return n2.forEach((e3) => {
          e3.wxOpenId && e3.wxPublicId && (t2 = true);
        }), { users: n2, hasPrimaryUid: t2 };
      });
    }
    setPrimaryUid(e2) {
      return this._request.send("auth.setPrimaryUid", { uid: e2 });
    }
    unlink(e2) {
      return this._request.send("auth.unlink", { platform: e2 });
    }
    update(e2) {
      return __async(this, null, function* () {
        const { nickName: t2, gender: n2, avatarUrl: s2, province: r2, country: i2, city: o2 } = e2, { data: a2 } = yield this._request.send("auth.updateUserInfo", { nickName: t2, gender: n2, avatarUrl: s2, province: r2, country: i2, city: o2 });
        this.setLocalUserInfo(a2);
      });
    }
    refresh() {
      return __async(this, null, function* () {
        const { data: e2 } = yield this._request.send("auth.getUserInfo", {});
        return this.setLocalUserInfo(e2), e2;
      });
    }
    setUserInfo() {
      const { userInfoKey: e2 } = this._cache.keys, t2 = this._cache.getStore(e2);
      ["uid", "loginType", "openid", "wxOpenId", "wxPublicId", "unionId", "qqMiniOpenId", "email", "hasPassword", "customUserId", "nickName", "gender", "avatarUrl"].forEach((e3) => {
        this[e3] = t2[e3];
      }), this.location = { country: t2.country, province: t2.province, city: t2.city };
    }
    setLocalUserInfo(e2) {
      const { userInfoKey: t2 } = this._cache.keys;
      this._cache.setStore(t2, e2), this.setUserInfo();
    }
  }
  class tt {
    constructor(e2) {
      if (!e2) throw new te({ code: "PARAM_ERROR", message: "envId is not defined" });
      this._cache = Re(e2);
      const { refreshTokenKey: t2, accessTokenKey: n2, accessTokenExpireKey: s2 } = this._cache.keys, r2 = this._cache.getStore(t2), i2 = this._cache.getStore(n2), o2 = this._cache.getStore(s2);
      this.credential = { refreshToken: r2, accessToken: i2, accessTokenExpire: o2 }, this.user = new et(e2);
    }
    get isAnonymousAuth() {
      return this.loginType === He.ANONYMOUS;
    }
    get isCustomAuth() {
      return this.loginType === He.CUSTOM;
    }
    get isWeixinAuth() {
      return this.loginType === He.WECHAT || this.loginType === He.WECHAT_OPEN || this.loginType === He.WECHAT_PUBLIC;
    }
    get loginType() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
  }
  class nt extends Ze {
    signIn() {
      return __async(this, null, function* () {
        this._cache.updatePersistence("local");
        const { anonymousUuidKey: e2, refreshTokenKey: t2 } = this._cache.keys, n2 = this._cache.getStore(e2) || void 0, s2 = this._cache.getStore(t2) || void 0, r2 = yield this._request.send("auth.signInAnonymously", { anonymous_uuid: n2, refresh_token: s2 });
        if (r2.uuid && r2.refresh_token) {
          this._setAnonymousUUID(r2.uuid), this.setRefreshToken(r2.refresh_token), yield this._request.refreshAccessToken(), qe(Ke), qe($e, { env: this.config.env, loginType: He.ANONYMOUS, persistence: "local" });
          const e3 = new tt(this.config.env);
          return yield e3.user.refresh(), e3;
        }
        throw new te({ message: "匿名登录失败" });
      });
    }
    linkAndRetrieveDataWithTicket(e2) {
      return __async(this, null, function* () {
        const { anonymousUuidKey: t2, refreshTokenKey: n2 } = this._cache.keys, s2 = this._cache.getStore(t2), r2 = this._cache.getStore(n2), i2 = yield this._request.send("auth.linkAndRetrieveDataWithTicket", { anonymous_uuid: s2, refresh_token: r2, ticket: e2 });
        if (i2.refresh_token) return this._clearAnonymousUUID(), this.setRefreshToken(i2.refresh_token), yield this._request.refreshAccessToken(), qe(Be, { env: this.config.env }), qe($e, { loginType: He.CUSTOM, persistence: "local" }), { credential: { refreshToken: i2.refresh_token } };
        throw new te({ message: "匿名转化失败" });
      });
    }
    _setAnonymousUUID(e2) {
      const { anonymousUuidKey: t2, loginTypeKey: n2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.setStore(t2, e2), this._cache.setStore(n2, He.ANONYMOUS);
    }
    _clearAnonymousUUID() {
      this._cache.removeStore(this._cache.keys.anonymousUuidKey);
    }
  }
  class st extends Ze {
    signIn(e2) {
      return __async(this, null, function* () {
        if ("string" != typeof e2) throw new te({ code: "PARAM_ERROR", message: "ticket must be a string" });
        const { refreshTokenKey: t2 } = this._cache.keys, n2 = yield this._request.send("auth.signInWithTicket", { ticket: e2, refresh_token: this._cache.getStore(t2) || "" });
        if (n2.refresh_token) return this.setRefreshToken(n2.refresh_token), yield this._request.refreshAccessToken(), qe(Ke), qe($e, { env: this.config.env, loginType: He.CUSTOM, persistence: this.config.persistence }), yield this.refreshUserInfo(), new tt(this.config.env);
        throw new te({ message: "自定义登录失败" });
      });
    }
  }
  class rt extends Ze {
    signIn(e2, t2) {
      return __async(this, null, function* () {
        if ("string" != typeof e2) throw new te({ code: "PARAM_ERROR", message: "email must be a string" });
        const { refreshTokenKey: n2 } = this._cache.keys, s2 = yield this._request.send("auth.signIn", { loginType: "EMAIL", email: e2, password: t2, refresh_token: this._cache.getStore(n2) || "" }), { refresh_token: r2, access_token: i2, access_token_expire: o2 } = s2;
        if (r2) return this.setRefreshToken(r2), i2 && o2 ? this.setAccessToken(i2, o2) : yield this._request.refreshAccessToken(), yield this.refreshUserInfo(), qe(Ke), qe($e, { env: this.config.env, loginType: He.EMAIL, persistence: this.config.persistence }), new tt(this.config.env);
        throw s2.code ? new te({ code: s2.code, message: `邮箱登录失败: ${s2.message}` }) : new te({ message: "邮箱登录失败" });
      });
    }
    activate(e2) {
      return __async(this, null, function* () {
        return this._request.send("auth.activateEndUserMail", { token: e2 });
      });
    }
    resetPasswordWithToken(e2, t2) {
      return __async(this, null, function* () {
        return this._request.send("auth.resetPasswordWithToken", { token: e2, newPassword: t2 });
      });
    }
  }
  class it extends Ze {
    signIn(e2, t2) {
      return __async(this, null, function* () {
        if ("string" != typeof e2) throw new te({ code: "PARAM_ERROR", message: "username must be a string" });
        "string" != typeof t2 && (t2 = "", console.warn("password is empty"));
        const { refreshTokenKey: n2 } = this._cache.keys, s2 = yield this._request.send("auth.signIn", { loginType: He.USERNAME, username: e2, password: t2, refresh_token: this._cache.getStore(n2) || "" }), { refresh_token: r2, access_token_expire: i2, access_token: o2 } = s2;
        if (r2) return this.setRefreshToken(r2), o2 && i2 ? this.setAccessToken(o2, i2) : yield this._request.refreshAccessToken(), yield this.refreshUserInfo(), qe(Ke), qe($e, { env: this.config.env, loginType: He.USERNAME, persistence: this.config.persistence }), new tt(this.config.env);
        throw s2.code ? new te({ code: s2.code, message: `用户名密码登录失败: ${s2.message}` }) : new te({ message: "用户名密码登录失败" });
      });
    }
  }
  class ot {
    constructor(e2) {
      this.config = e2, this._cache = Re(e2.env), this._request = Xe(e2.env), this._onAnonymousConverted = this._onAnonymousConverted.bind(this), this._onLoginTypeChanged = this._onLoginTypeChanged.bind(this), Me($e, this._onLoginTypeChanged);
    }
    get currentUser() {
      const e2 = this.hasLoginState();
      return e2 && e2.user || null;
    }
    get loginType() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
    anonymousAuthProvider() {
      return new nt(this.config);
    }
    customAuthProvider() {
      return new st(this.config);
    }
    emailAuthProvider() {
      return new rt(this.config);
    }
    usernameAuthProvider() {
      return new it(this.config);
    }
    signInAnonymously() {
      return __async(this, null, function* () {
        return new nt(this.config).signIn();
      });
    }
    signInWithEmailAndPassword(e2, t2) {
      return __async(this, null, function* () {
        return new rt(this.config).signIn(e2, t2);
      });
    }
    signInWithUsernameAndPassword(e2, t2) {
      return new it(this.config).signIn(e2, t2);
    }
    linkAndRetrieveDataWithTicket(e2) {
      return __async(this, null, function* () {
        this._anonymousAuthProvider || (this._anonymousAuthProvider = new nt(this.config)), Me(Be, this._onAnonymousConverted);
        return yield this._anonymousAuthProvider.linkAndRetrieveDataWithTicket(e2);
      });
    }
    signOut() {
      return __async(this, null, function* () {
        if (this.loginType === He.ANONYMOUS) throw new te({ message: "匿名用户不支持登出操作" });
        const { refreshTokenKey: e2, accessTokenKey: t2, accessTokenExpireKey: n2 } = this._cache.keys, s2 = this._cache.getStore(e2);
        if (!s2) return;
        const r2 = yield this._request.send("auth.logout", { refresh_token: s2 });
        return this._cache.removeStore(e2), this._cache.removeStore(t2), this._cache.removeStore(n2), qe(Ke), qe($e, { env: this.config.env, loginType: He.NULL, persistence: this.config.persistence }), r2;
      });
    }
    signUpWithEmailAndPassword(e2, t2) {
      return __async(this, null, function* () {
        return this._request.send("auth.signUpWithEmailAndPassword", { email: e2, password: t2 });
      });
    }
    sendPasswordResetEmail(e2) {
      return __async(this, null, function* () {
        return this._request.send("auth.sendPasswordResetEmail", { email: e2 });
      });
    }
    onLoginStateChanged(e2) {
      Me(Ke, () => {
        const t3 = this.hasLoginState();
        e2.call(this, t3);
      });
      const t2 = this.hasLoginState();
      e2.call(this, t2);
    }
    onLoginStateExpired(e2) {
      Me(je, e2.bind(this));
    }
    onAccessTokenRefreshed(e2) {
      Me(We, e2.bind(this));
    }
    onAnonymousConverted(e2) {
      Me(Be, e2.bind(this));
    }
    onLoginTypeChanged(e2) {
      Me($e, () => {
        const t2 = this.hasLoginState();
        e2.call(this, t2);
      });
    }
    getAccessToken() {
      return __async(this, null, function* () {
        return { accessToken: (yield this._request.getAccessToken()).accessToken, env: this.config.env };
      });
    }
    hasLoginState() {
      const { refreshTokenKey: e2 } = this._cache.keys;
      return this._cache.getStore(e2) ? new tt(this.config.env) : null;
    }
    isUsernameRegistered(e2) {
      return __async(this, null, function* () {
        if ("string" != typeof e2) throw new te({ code: "PARAM_ERROR", message: "username must be a string" });
        const { data: t2 } = yield this._request.send("auth.isUsernameRegistered", { username: e2 });
        return t2 && t2.isRegistered;
      });
    }
    getLoginState() {
      return Promise.resolve(this.hasLoginState());
    }
    signInWithTicket(e2) {
      return __async(this, null, function* () {
        return new st(this.config).signIn(e2);
      });
    }
    shouldRefreshAccessToken(e2) {
      this._request._shouldRefreshAccessTokenHook = e2.bind(this);
    }
    getUserInfo() {
      return this._request.send("auth.getUserInfo", {}).then((e2) => e2.code ? e2 : __spreadProps(__spreadValues({}, e2.data), { requestId: e2.seqId }));
    }
    getAuthHeader() {
      const { refreshTokenKey: e2, accessTokenKey: t2 } = this._cache.keys, n2 = this._cache.getStore(e2);
      return { "x-cloudbase-credentials": this._cache.getStore(t2) + "/@@/" + n2 };
    }
    _onAnonymousConverted(e2) {
      const { env: t2 } = e2.data;
      t2 === this.config.env && this._cache.updatePersistence(this.config.persistence);
    }
    _onLoginTypeChanged(e2) {
      const { loginType: t2, persistence: n2, env: s2 } = e2.data;
      s2 === this.config.env && (this._cache.updatePersistence(n2), this._cache.setStore(this._cache.keys.loginTypeKey, t2));
    }
  }
  const at = function(e2, t2) {
    t2 = t2 || Ie();
    const n2 = Xe(this.config.env), { cloudPath: s2, filePath: r2, onUploadProgress: i2, fileType: o2 = "image" } = e2;
    return n2.send("storage.getUploadMetadata", { path: s2 }).then((e3) => {
      const { data: { url: a2, authorization: c2, token: u2, fileId: h2, cosFileId: l2 }, requestId: d2 } = e3, p2 = { key: s2, signature: c2, "x-cos-meta-fileid": l2, success_action_status: "201", "x-cos-security-token": u2 };
      n2.upload({ url: a2, data: p2, file: r2, name: s2, fileType: o2, onUploadProgress: i2 }).then((e4) => {
        201 === e4.statusCode ? t2(null, { fileID: h2, requestId: d2 }) : t2(new te({ code: "STORAGE_REQUEST_FAIL", message: `STORAGE_REQUEST_FAIL: ${e4.data}` }));
      }).catch((e4) => {
        t2(e4);
      });
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, ct = function(e2, t2) {
    t2 = t2 || Ie();
    const n2 = Xe(this.config.env), { cloudPath: s2 } = e2;
    return n2.send("storage.getUploadMetadata", { path: s2 }).then((e3) => {
      t2(null, e3);
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, ut = function({ fileList: e2 }, t2) {
    if (t2 = t2 || Ie(), !e2 || !Array.isArray(e2)) return { code: "INVALID_PARAM", message: "fileList必须是非空的数组" };
    for (let t3 of e2) if (!t3 || "string" != typeof t3) return { code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" };
    const n2 = { fileid_list: e2 };
    return Xe(this.config.env).send("storage.batchDeleteFile", n2).then((e3) => {
      e3.code ? t2(null, e3) : t2(null, { fileList: e3.data.delete_list, requestId: e3.requestId });
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, ht = function({ fileList: e2 }, t2) {
    t2 = t2 || Ie(), e2 && Array.isArray(e2) || t2(null, { code: "INVALID_PARAM", message: "fileList必须是非空的数组" });
    let n2 = [];
    for (let s3 of e2) "object" == typeof s3 ? (s3.hasOwnProperty("fileID") && s3.hasOwnProperty("maxAge") || t2(null, { code: "INVALID_PARAM", message: "fileList的元素必须是包含fileID和maxAge的对象" }), n2.push({ fileid: s3.fileID, max_age: s3.maxAge })) : "string" == typeof s3 ? n2.push({ fileid: s3 }) : t2(null, { code: "INVALID_PARAM", message: "fileList的元素必须是字符串" });
    const s2 = { file_list: n2 };
    return Xe(this.config.env).send("storage.batchGetDownloadUrl", s2).then((e3) => {
      e3.code ? t2(null, e3) : t2(null, { fileList: e3.data.download_list, requestId: e3.requestId });
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, lt = function(_0, _1) {
    return __async(this, arguments, function* ({ fileID: e2 }, t2) {
      const n2 = (yield ht.call(this, { fileList: [{ fileID: e2, maxAge: 600 }] })).fileList[0];
      if ("SUCCESS" !== n2.code) return t2 ? t2(n2) : new Promise((e3) => {
        e3(n2);
      });
      const s2 = Xe(this.config.env);
      let r2 = n2.download_url;
      if (r2 = encodeURI(r2), !t2) return s2.download({ url: r2 });
      t2(yield s2.download({ url: r2 }));
    });
  }, dt = function({ name: e2, data: t2, query: n2, parse: s2, search: r2 }, i2) {
    const o2 = i2 || Ie();
    let a2;
    try {
      a2 = t2 ? JSON.stringify(t2) : "";
    } catch (e3) {
      return Promise.reject(e3);
    }
    if (!e2) return Promise.reject(new te({ code: "PARAM_ERROR", message: "函数名不能为空" }));
    const c2 = { inQuery: n2, parse: s2, search: r2, function_name: e2, request_data: a2 };
    return Xe(this.config.env).send("functions.invokeFunction", c2).then((e3) => {
      if (e3.code) o2(null, e3);
      else {
        let t3 = e3.data.response_data;
        if (s2) o2(null, { result: t3, requestId: e3.requestId });
        else try {
          t3 = JSON.parse(e3.data.response_data), o2(null, { result: t3, requestId: e3.requestId });
        } catch (e4) {
          o2(new te({ message: "response data must be json" }));
        }
      }
      return o2.promise;
    }).catch((e3) => {
      o2(e3);
    }), o2.promise;
  }, pt = { timeout: 15e3, persistence: "session" }, ft = {};
  class gt {
    constructor(e2) {
      this.config = e2 || this.config, this.authObj = void 0;
    }
    init(e2) {
      switch (Ce.adapter || (this.requestClient = new Ce.adapter.reqClass({ timeout: e2.timeout || 5e3, timeoutMsg: `请求在${(e2.timeout || 5e3) / 1e3}s内未完成，已中断` })), this.config = __spreadValues(__spreadValues({}, pt), e2), true) {
        case this.config.timeout > 6e5:
          console.warn("timeout大于可配置上限[10分钟]，已重置为上限数值"), this.config.timeout = 6e5;
          break;
        case this.config.timeout < 100:
          console.warn("timeout小于可配置下限[100ms]，已重置为下限数值"), this.config.timeout = 100;
      }
      return new gt(this.config);
    }
    auth({ persistence: e2 } = {}) {
      if (this.authObj) return this.authObj;
      const t2 = e2 || Ce.adapter.primaryStorage || pt.persistence;
      var n2;
      return t2 !== this.config.persistence && (this.config.persistence = t2), function(e3) {
        const { env: t3 } = e3;
        Ee[t3] = new Oe(e3), Le[t3] = new Oe(__spreadProps(__spreadValues({}, e3), { persistence: "local" }));
      }(this.config), n2 = this.config, Qe[n2.env] = new Ye(n2), this.authObj = new ot(this.config), this.authObj;
    }
    on(e2, t2) {
      return Me.apply(this, [e2, t2]);
    }
    off(e2, t2) {
      return Fe.apply(this, [e2, t2]);
    }
    callFunction(e2, t2) {
      return dt.apply(this, [e2, t2]);
    }
    deleteFile(e2, t2) {
      return ut.apply(this, [e2, t2]);
    }
    getTempFileURL(e2, t2) {
      return ht.apply(this, [e2, t2]);
    }
    downloadFile(e2, t2) {
      return lt.apply(this, [e2, t2]);
    }
    uploadFile(e2, t2) {
      return at.apply(this, [e2, t2]);
    }
    getUploadMetadata(e2, t2) {
      return ct.apply(this, [e2, t2]);
    }
    registerExtension(e2) {
      ft[e2.name] = e2;
    }
    invokeExtension(e2, t2) {
      return __async(this, null, function* () {
        const n2 = ft[e2];
        if (!n2) throw new te({ message: `扩展${e2} 必须先注册` });
        return yield n2.invoke(t2, this);
      });
    }
    useAdapters(e2) {
      const { adapter: t2, runtime: n2 } = Ae(e2) || {};
      t2 && (Ce.adapter = t2), n2 && (Ce.runtime = n2);
    }
  }
  var mt = new gt();
  function yt(e2, t2, n2) {
    void 0 === n2 && (n2 = {});
    var s2 = /\?/.test(t2), r2 = "";
    for (var i2 in n2) "" === r2 ? !s2 && (t2 += "?") : r2 += "&", r2 += i2 + "=" + encodeURIComponent(n2[i2]);
    return /^http(s)?:\/\//.test(t2 += r2) ? t2 : "" + e2 + t2;
  }
  class _t {
    post(e2) {
      const { url: t2, data: n2, headers: s2 } = e2;
      return new Promise((e3, r2) => {
        ne.request({ url: yt("https:", t2), data: n2, method: "POST", header: s2, success(t3) {
          e3(t3);
        }, fail(e4) {
          r2(e4);
        } });
      });
    }
    upload(e2) {
      return new Promise((t2, n2) => {
        const { url: s2, file: r2, data: i2, headers: o2, fileType: a2 } = e2, c2 = ne.uploadFile({ url: yt("https:", s2), name: "file", formData: Object.assign({}, i2), filePath: r2, fileType: a2, header: o2, success(e3) {
          const n3 = { statusCode: e3.statusCode, data: e3.data || {} };
          200 === e3.statusCode && i2.success_action_status && (n3.statusCode = parseInt(i2.success_action_status, 10)), t2(n3);
        }, fail(e3) {
          n2(new Error(e3.errMsg || "uploadFile:fail"));
        } });
        "function" == typeof e2.onUploadProgress && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((t3) => {
          e2.onUploadProgress({ loaded: t3.totalBytesSent, total: t3.totalBytesExpectedToSend });
        });
      });
    }
  }
  const wt = { setItem(e2, t2) {
    ne.setStorageSync(e2, t2);
  }, getItem: (e2) => ne.getStorageSync(e2), removeItem(e2) {
    ne.removeStorageSync(e2);
  }, clear() {
    ne.clearStorageSync();
  } };
  var vt = { genAdapter: function() {
    return { root: {}, reqClass: _t, localStorage: wt, primaryStorage: "local" };
  }, isMatch: function() {
    return true;
  }, runtime: "uni_app" };
  mt.useAdapters(vt);
  const It = mt, St = It.init;
  It.init = function(e2) {
    e2.env = e2.spaceId;
    const t2 = St.call(this, e2);
    t2.config.provider = "tencent", t2.config.spaceId = e2.spaceId;
    const n2 = t2.auth;
    return t2.auth = function(e3) {
      const t3 = n2.call(this, e3);
      return ["linkAndRetrieveDataWithTicket", "signInAnonymously", "signOut", "getAccessToken", "getLoginState", "signInWithTicket", "getUserInfo"].forEach((e4) => {
        var n3;
        t3[e4] = (n3 = t3[e4], function(e5) {
          e5 = e5 || {};
          const { success: t4, fail: s2, complete: r2 } = ee(e5);
          if (!(t4 || s2 || r2)) return n3.call(this, e5);
          n3.call(this, e5).then((e6) => {
            t4 && t4(e6), r2 && r2(e6);
          }, (e6) => {
            s2 && s2(e6), r2 && r2(e6);
          });
        }).bind(t3);
      }), t3;
    }, t2.customAuth = t2.auth, t2;
  };
  var bt = It;
  var kt = class extends pe {
    getAccessToken() {
      return new Promise((e2, t2) => {
        const n2 = "Anonymous_Access_token";
        this.setAccessToken(n2), e2(n2);
      });
    }
    setupRequest(e2, t2) {
      const n2 = Object.assign({}, e2, { spaceId: this.config.spaceId, timestamp: Date.now() }), s2 = { "Content-Type": "application/json" };
      "auth" !== t2 && (n2.token = this.accessToken, s2["x-basement-token"] = this.accessToken), s2["x-serverless-sign"] = de.sign(n2, this.config.clientSecret);
      const r2 = le();
      s2["x-client-info"] = encodeURIComponent(JSON.stringify(r2));
      const { token: i2 } = re();
      return s2["x-client-token"] = i2, { url: this.config.requestUrl, method: "POST", data: n2, dataType: "json", header: JSON.parse(JSON.stringify(s2)) };
    }
    uploadFileToOSS({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, onUploadProgress: i2 }) {
      return new Promise((o2, a2) => {
        const c2 = this.adapter.uploadFile({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, success(e3) {
          e3 && e3.statusCode < 400 ? o2(e3) : a2(new te({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
        }, fail(e3) {
          a2(new te({ code: e3.code || "UPLOAD_FAILED", message: e3.message || e3.errMsg || "文件上传失败" }));
        } });
        "function" == typeof i2 && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((e3) => {
          i2({ loaded: e3.totalBytesSent, total: e3.totalBytesExpectedToSend });
        });
      });
    }
    uploadFile({ filePath: e2, cloudPath: t2, fileType: n2 = "image", onUploadProgress: s2 }) {
      if (!t2) throw new te({ code: "CLOUDPATH_REQUIRED", message: "cloudPath不可为空" });
      let r2;
      return this.getOSSUploadOptionsFromPath({ cloudPath: t2 }).then((t3) => {
        const { url: i2, formData: o2, name: a2 } = t3.result;
        r2 = t3.result.fileUrl;
        const c2 = { url: i2, formData: o2, name: a2, filePath: e2, fileType: n2 };
        return this.uploadFileToOSS(Object.assign({}, c2, { onUploadProgress: s2 }));
      }).then(() => this.reportOSSUpload({ cloudPath: t2 })).then((t3) => new Promise((n3, s3) => {
        t3.success ? n3({ success: true, filePath: e2, fileID: r2 }) : s3(new te({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
      }));
    }
    deleteFile({ fileList: e2 }) {
      const t2 = { method: "serverless.file.resource.delete", params: JSON.stringify({ fileList: e2 }) };
      return this.request(this.setupRequest(t2)).then((e3) => {
        if (e3.success) return e3.result;
        throw new te({ code: "DELETE_FILE_FAILED", message: "删除文件失败" });
      });
    }
    getTempFileURL({ fileList: e2, maxAge: t2 } = {}) {
      if (!Array.isArray(e2) || 0 === e2.length) throw new te({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" });
      const n2 = { method: "serverless.file.resource.getTempFileURL", params: JSON.stringify({ fileList: e2, maxAge: t2 }) };
      return this.request(this.setupRequest(n2)).then((e3) => {
        if (e3.success) return { fileList: e3.result.fileList.map((e4) => ({ fileID: e4.fileID, tempFileURL: e4.tempFileURL })) };
        throw new te({ code: "GET_TEMP_FILE_URL_FAILED", message: "获取临时文件链接失败" });
      });
    }
  };
  var At = { init(e2) {
    const t2 = new kt(e2), n2 = { signInAnonymously: function() {
      return t2.authorize();
    }, getLoginState: function() {
      return Promise.resolve(false);
    } };
    return t2.auth = function() {
      return n2;
    }, t2.customAuth = t2.auth, t2;
  } }, Ct = n$1(function(e2, t2) {
    e2.exports = r$1.enc.Hex;
  });
  function Pt() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e2) {
      var t2 = 16 * Math.random() | 0;
      return ("x" === e2 ? t2 : 3 & t2 | 8).toString(16);
    });
  }
  function Tt(e2 = "", t2 = {}) {
    const { data: n2, functionName: s2, method: r2, headers: i2, signHeaderKeys: o2 = [], config: a2 } = t2, c2 = Date.now(), u2 = Pt(), h2 = Object.assign({}, i2, { "x-from-app-id": a2.spaceAppId, "x-from-env-id": a2.spaceId, "x-to-env-id": a2.spaceId, "x-from-instance-id": c2, "x-from-function-name": s2, "x-client-timestamp": c2, "x-alipay-source": "client", "x-request-id": u2, "x-alipay-callid": u2, "x-trace-id": u2 }), l2 = ["x-from-app-id", "x-from-env-id", "x-to-env-id", "x-from-instance-id", "x-from-function-name", "x-client-timestamp"].concat(o2), [d2 = "", p2 = ""] = e2.split("?") || [], f2 = function(e3) {
      const t3 = e3.signedHeaders.join(";"), n3 = e3.signedHeaders.map((t4) => `${t4.toLowerCase()}:${e3.headers[t4]}
`).join(""), s3 = we(e3.body).toString(Ct), r3 = `${e3.method.toUpperCase()}
${e3.path}
${e3.query}
${n3}
${t3}
${s3}
`, i3 = we(r3).toString(Ct), o3 = `HMAC-SHA256
${e3.timestamp}
${i3}
`, a3 = ve(o3, e3.secretKey).toString(Ct);
      return `HMAC-SHA256 Credential=${e3.secretId}, SignedHeaders=${t3}, Signature=${a3}`;
    }({ path: d2, query: p2, method: r2, headers: h2, timestamp: c2, body: JSON.stringify(n2), secretId: a2.accessKey, secretKey: a2.secretKey, signedHeaders: l2.sort() });
    return { url: `${a2.endpoint}${e2}`, headers: Object.assign({}, h2, { Authorization: f2 }) };
  }
  function xt({ url: e2, data: t2, method: n2 = "POST", headers: s2 = {} }) {
    return new Promise((r2, i2) => {
      ne.request({ url: e2, method: n2, data: "object" == typeof t2 ? JSON.stringify(t2) : t2, header: s2, dataType: "json", complete: (e3 = {}) => {
        const t3 = s2["x-trace-id"] || "";
        if (!e3.statusCode || e3.statusCode >= 400) {
          const { message: n3, errMsg: s3, trace_id: r3 } = e3.data || {};
          return i2(new te({ code: "SYS_ERR", message: n3 || s3 || "request:fail", requestId: r3 || t3 }));
        }
        r2({ status: e3.statusCode, data: e3.data, headers: e3.header, requestId: t3 });
      } });
    });
  }
  function Ot(e2, t2) {
    const { path: n2, data: s2, method: r2 = "GET" } = e2, { url: i2, headers: o2 } = Tt(n2, { functionName: "", data: s2, method: r2, headers: { "x-alipay-cloud-mode": "oss", "x-data-api-type": "oss", "x-expire-timestamp": Date.now() + 6e4 }, signHeaderKeys: ["x-data-api-type", "x-expire-timestamp"], config: t2 });
    return xt({ url: i2, data: s2, method: r2, headers: o2 }).then((e3) => {
      const t3 = e3.data || {};
      if (!t3.success) throw new te({ code: e3.errCode, message: e3.errMsg, requestId: e3.requestId });
      return t3.data || {};
    }).catch((e3) => {
      throw new te({ code: e3.errCode, message: e3.errMsg, requestId: e3.requestId });
    });
  }
  function Et(e2 = "") {
    const t2 = e2.trim().replace(/^cloud:\/\//, ""), n2 = t2.indexOf("/");
    if (n2 <= 0) throw new te({ code: "INVALID_PARAM", message: "fileID不合法" });
    const s2 = t2.substring(0, n2), r2 = t2.substring(n2 + 1);
    return s2 !== this.config.spaceId && console.warn("file ".concat(e2, " does not belong to env ").concat(this.config.spaceId)), r2;
  }
  function Lt(e2 = "") {
    return "cloud://".concat(this.config.spaceId, "/").concat(e2.replace(/^\/+/, ""));
  }
  class Rt {
    constructor(e2) {
      this.config = e2;
    }
    signedURL(e2, t2 = {}) {
      const n2 = `/ws/function/${e2}`, s2 = this.config.wsEndpoint.replace(/^ws(s)?:\/\//, ""), r2 = Object.assign({}, t2, { accessKeyId: this.config.accessKey, signatureNonce: Pt(), timestamp: "" + Date.now() }), i2 = [n2, ["accessKeyId", "authorization", "signatureNonce", "timestamp"].sort().map(function(e3) {
        return r2[e3] ? "".concat(e3, "=").concat(r2[e3]) : null;
      }).filter(Boolean).join("&"), `host:${s2}`].join("\n"), o2 = ["HMAC-SHA256", we(i2).toString(Ct)].join("\n"), a2 = ve(o2, this.config.secretKey).toString(Ct), c2 = Object.keys(r2).map((e3) => `${e3}=${encodeURIComponent(r2[e3])}`).join("&");
      return `${this.config.wsEndpoint}${n2}?${c2}&signature=${a2}`;
    }
  }
  var Ut = class {
    constructor(e2) {
      if (["spaceId", "spaceAppId", "accessKey", "secretKey"].forEach((t2) => {
        if (!Object.prototype.hasOwnProperty.call(e2, t2)) throw new Error(`${t2} required`);
      }), e2.endpoint) {
        if ("string" != typeof e2.endpoint) throw new Error("endpoint must be string");
        if (!/^https:\/\//.test(e2.endpoint)) throw new Error("endpoint must start with https://");
        e2.endpoint = e2.endpoint.replace(/\/$/, "");
      }
      this.config = Object.assign({}, e2, { endpoint: e2.endpoint || `https://${e2.spaceId}.api-hz.cloudbasefunction.cn`, wsEndpoint: e2.wsEndpoint || `wss://${e2.spaceId}.api-hz.cloudbasefunction.cn` }), this._websocket = new Rt(this.config);
    }
    callFunction(e2) {
      return function(e3, t2) {
        const { name: n2, data: s2, async: r2 = false } = e3, i2 = "POST", o2 = { "x-to-function-name": n2 };
        r2 && (o2["x-function-invoke-type"] = "async");
        const { url: a2, headers: c2 } = Tt("/functions/invokeFunction", { functionName: n2, data: s2, method: i2, headers: o2, signHeaderKeys: ["x-to-function-name"], config: t2 });
        return xt({ url: a2, data: s2, method: i2, headers: c2 }).then((e4) => {
          let t3 = 0;
          if (r2) {
            const n3 = e4.data || {};
            t3 = "200" === n3.errCode ? 0 : n3.errCode, e4.data = n3.data || {}, e4.errMsg = n3.errMsg;
          }
          if (0 !== t3) throw new te({ code: t3, message: e4.errMsg, requestId: e4.requestId });
          return { errCode: t3, success: 0 === t3, requestId: e4.requestId, result: e4.data };
        }).catch((e4) => {
          throw new te({ code: e4.errCode, message: e4.errMsg, requestId: e4.requestId });
        });
      }(e2, this.config);
    }
    uploadFileToOSS({ url: e2, filePath: t2, fileType: n2, formData: s2, onUploadProgress: r2 }) {
      return new Promise((i2, o2) => {
        const a2 = ne.uploadFile({ url: e2, filePath: t2, fileType: n2, formData: s2, name: "file", success(e3) {
          e3 && e3.statusCode < 400 ? i2(e3) : o2(new te({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
        }, fail(e3) {
          o2(new te({ code: e3.code || "UPLOAD_FAILED", message: e3.message || e3.errMsg || "文件上传失败" }));
        } });
        "function" == typeof r2 && a2 && "function" == typeof a2.onProgressUpdate && a2.onProgressUpdate((e3) => {
          r2({ loaded: e3.totalBytesSent, total: e3.totalBytesExpectedToSend });
        });
      });
    }
    uploadFile(_0) {
      return __async(this, arguments, function* ({ filePath: e2, cloudPath: t2 = "", fileType: n2 = "image", onUploadProgress: s2 }) {
        if ("string" !== f$1(t2)) throw new te({ code: "INVALID_PARAM", message: "cloudPath必须为字符串类型" });
        if (!(t2 = t2.trim())) throw new te({ code: "INVALID_PARAM", message: "cloudPath不可为空" });
        if (/:\/\//.test(t2)) throw new te({ code: "INVALID_PARAM", message: "cloudPath不合法" });
        const r2 = yield Ot({ path: "/".concat(t2.replace(/^\//, ""), "?post_url") }, this.config), { file_id: i2, upload_url: o2, form_data: a2 } = r2, c2 = a2 && a2.reduce((e3, t3) => (e3[t3.key] = t3.value, e3), {});
        return this.uploadFileToOSS({ url: o2, filePath: e2, fileType: n2, formData: c2, onUploadProgress: s2 }).then(() => ({ fileID: i2 }));
      });
    }
    getTempFileURL(_0) {
      return __async(this, arguments, function* ({ fileList: e2 }) {
        return new Promise((t2, n2) => {
          (!e2 || e2.length < 0) && n2(new te({ errCode: "INVALID_PARAM", errMsg: "fileList不能为空数组" })), e2.length > 50 && n2(new te({ errCode: "INVALID_PARAM", errMsg: "fileList数组长度不能超过50" }));
          const s2 = [];
          for (const t3 of e2) {
            "string" !== f$1(t3) && n2(new te({ errCode: "INVALID_PARAM", errMsg: "fileList的元素必须是非空的字符串" }));
            const e3 = Et.call(this, t3);
            s2.push({ file_id: e3, expire: 600 });
          }
          Ot({ path: "/?download_url", data: { file_list: s2 }, method: "POST" }, this.config).then((e3) => {
            const { file_list: n3 = [] } = e3;
            t2({ fileList: n3.map((e4) => ({ fileID: Lt.call(this, e4.file_id), tempFileURL: e4.download_url })) });
          }).catch((e3) => n2(e3));
        });
      });
    }
    connectWebSocket(e2) {
      return __async(this, null, function* () {
        const { name: t2, query: n2 } = e2;
        return ne.connectSocket({ url: this._websocket.signedURL(t2, n2), complete: () => {
        } });
      });
    }
  };
  var Nt = { init: (e2) => {
    e2.provider = "alipay";
    const t2 = new Ut(e2);
    return t2.auth = function() {
      return { signInAnonymously: function() {
        return Promise.resolve();
      }, getLoginState: function() {
        return Promise.resolve(true);
      } };
    }, t2;
  } };
  function Dt({ data: e2 }) {
    let t2;
    t2 = le();
    const n2 = JSON.parse(JSON.stringify(e2 || {}));
    if (Object.assign(n2, { clientInfo: t2 }), !n2.uniIdToken) {
      const { token: e3 } = re();
      e3 && (n2.uniIdToken = e3);
    }
    return n2;
  }
  function Mt() {
    return __async(this, arguments, function* ({ name: e2, data: t2 } = {}) {
      yield this.__dev__.initLocalNetwork();
      const { localAddress: n2, localPort: s2 } = this.__dev__, r2 = { aliyun: "aliyun", tencent: "tcb", alipay: "alipay" }[this.config.provider], i2 = this.config.spaceId, o2 = `http://${n2}:${s2}/system/check-function`, a2 = `http://${n2}:${s2}/cloudfunctions/${e2}`;
      return new Promise((t3, n3) => {
        ne.request({ method: "POST", url: o2, data: { name: e2, platform: C, provider: r2, spaceId: i2 }, timeout: 3e3, success(e3) {
          t3(e3);
        }, fail() {
          t3({ data: { code: "NETWORK_ERROR", message: "连接本地调试服务失败，请检查客户端是否和主机在同一局域网下，自动切换为已部署的云函数。" } });
        } });
      }).then(({ data: e3 } = {}) => {
        const { code: t3, message: n3 } = e3 || {};
        return { code: 0 === t3 ? 0 : t3 || "SYS_ERR", message: n3 || "SYS_ERR" };
      }).then(({ code: n3, message: s3 }) => {
        if (0 !== n3) {
          switch (n3) {
            case "MODULE_ENCRYPTED":
              console.error(`此云函数（${e2}）依赖加密公共模块不可本地调试，自动切换为云端已部署的云函数`);
              break;
            case "FUNCTION_ENCRYPTED":
              console.error(`此云函数（${e2}）已加密不可本地调试，自动切换为云端已部署的云函数`);
              break;
            case "ACTION_ENCRYPTED":
              console.error(s3 || "需要访问加密的uni-clientDB-action，自动切换为云端环境");
              break;
            case "NETWORK_ERROR":
              console.error(s3 || "连接本地调试服务失败，请检查客户端是否和主机在同一局域网下");
              break;
            case "SWITCH_TO_CLOUD":
              break;
            default: {
              const e3 = `检测本地调试服务出现错误：${s3}，请检查网络环境或重启客户端再试`;
              throw console.error(e3), new Error(e3);
            }
          }
          return this._callCloudFunction({ name: e2, data: t2 });
        }
        return new Promise((e3, n4) => {
          const s4 = Dt.call(this, { data: t2 });
          ne.request({ method: "POST", url: a2, data: { provider: r2, platform: C, param: s4 }, success: ({ statusCode: t3, data: s5 } = {}) => !t3 || t3 >= 400 ? n4(new te({ code: s5.code || "SYS_ERR", message: s5.message || "request:fail" })) : e3({ result: s5 }), fail(e4) {
            n4(new te({ code: e4.code || e4.errCode || "SYS_ERR", message: e4.message || e4.errMsg || "request:fail" }));
          } });
        });
      });
    });
  }
  const qt = [{ rule: /fc_function_not_found|FUNCTION_NOT_FOUND/, content: "，云函数[{functionName}]在云端不存在，请检查此云函数名称是否正确以及该云函数是否已上传到服务空间", mode: "append" }];
  var Ft = /[\\^$.*+?()[\]{}|]/g, Kt = RegExp(Ft.source);
  function jt(e2, t2, n2) {
    return e2.replace(new RegExp((s2 = t2) && Kt.test(s2) ? s2.replace(Ft, "\\$&") : s2, "g"), n2);
    var s2;
  }
  const Bt = "request", Wt = "response", Ht = "both";
  const Tn = { code: 2e4, message: "System error" }, xn = { code: 20101, message: "Invalid client" };
  function Ln(e2) {
    const { errSubject: t2, subject: n2, errCode: s2, errMsg: r2, code: i2, message: o2, cause: a2 } = e2 || {};
    return new te({ subject: t2 || n2 || "uni-secure-network", code: s2 || i2 || Tn.code, message: r2 || o2, cause: a2 });
  }
  let Un;
  function Fn({ secretType: e2 } = {}) {
    return e2 === Bt || e2 === Wt || e2 === Ht;
  }
  function Kn({ name: e2, data: t2 = {} } = {}) {
    return "DCloud-clientDB" === e2 && "encryption" === t2.redirectTo && "getAppClientKey" === t2.action;
  }
  function jn({ provider: e2, spaceId: t2, functionName: n2 } = {}) {
    const { appId: s2, uniPlatform: r2, osName: i2 } = ce();
    let o2 = r2;
    "app" === r2 && (o2 = i2);
    const a2 = function({ provider: e3, spaceId: t3 } = {}) {
      const n3 = A;
      if (!n3) return {};
      e3 = /* @__PURE__ */ function(e4) {
        return "tencent" === e4 ? "tcb" : e4;
      }(e3);
      const s3 = n3.find((n4) => n4.provider === e3 && n4.spaceId === t3);
      return s3 && s3.config;
    }({ provider: e2, spaceId: t2 });
    if (!a2 || !a2.accessControl || !a2.accessControl.enable) return false;
    const c2 = a2.accessControl.function || {}, u2 = Object.keys(c2);
    if (0 === u2.length) return true;
    const h2 = function(e3, t3) {
      let n3, s3, r3;
      for (let i3 = 0; i3 < e3.length; i3++) {
        const o3 = e3[i3];
        o3 !== t3 ? "*" !== o3 ? o3.split(",").map((e4) => e4.trim()).indexOf(t3) > -1 && (s3 = o3) : r3 = o3 : n3 = o3;
      }
      return n3 || s3 || r3;
    }(u2, n2);
    if (!h2) return false;
    if ((c2[h2] || []).find((e3 = {}) => e3.appId === s2 && (e3.platform || "").toLowerCase() === o2.toLowerCase())) return true;
    throw console.error(`此应用[appId: ${s2}, platform: ${o2}]不在云端配置的允许访问的应用列表内，参考：https://uniapp.dcloud.net.cn/uniCloud/secure-network.html#verify-client`), Ln(xn);
  }
  function $n({ functionName: e2, result: t2, logPvd: n2 }) {
    if (this.__dev__.debugLog && t2 && t2.requestId) {
      const s2 = JSON.stringify({ spaceId: this.config.spaceId, functionName: e2, requestId: t2.requestId });
      console.log(`[${n2}-request]${s2}[/${n2}-request]`);
    }
  }
  function Bn(e2) {
    const t2 = e2.callFunction, n2 = function(n3) {
      const s2 = n3.name;
      n3.data = Dt.call(e2, { data: n3.data });
      const r2 = { aliyun: "aliyun", tencent: "tcb", tcb: "tcb", alipay: "alipay" }[this.config.provider], i2 = Fn(n3), o2 = Kn(n3), a2 = i2 || o2;
      return t2.call(this, n3).then((e3) => (e3.errCode = 0, !a2 && $n.call(this, { functionName: s2, result: e3, logPvd: r2 }), Promise.resolve(e3)), (e3) => (!a2 && $n.call(this, { functionName: s2, result: e3, logPvd: r2 }), e3 && e3.message && (e3.message = function({ message: e4 = "", extraInfo: t3 = {}, formatter: n4 = [] } = {}) {
        for (let s3 = 0; s3 < n4.length; s3++) {
          const { rule: r3, content: i3, mode: o3 } = n4[s3], a3 = e4.match(r3);
          if (!a3) continue;
          let c2 = i3;
          for (let e5 = 1; e5 < a3.length; e5++) c2 = jt(c2, `{$${e5}}`, a3[e5]);
          for (const e5 in t3) c2 = jt(c2, `{${e5}}`, t3[e5]);
          return "replace" === o3 ? c2 : e4 + c2;
        }
        return e4;
      }({ message: `[${n3.name}]: ${e3.message}`, formatter: qt, extraInfo: { functionName: s2 } })), Promise.reject(e3)));
    };
    e2.callFunction = function(t3) {
      const { provider: s2, spaceId: r2 } = e2.config, i2 = t3.name;
      let o2, a2;
      if (t3.data = t3.data || {}, e2.__dev__.debugInfo && !e2.__dev__.debugInfo.forceRemote && T$1 ? (e2._callCloudFunction || (e2._callCloudFunction = n2, e2._callLocalFunction = Mt), o2 = Mt) : o2 = n2, o2 = o2.bind(e2), Kn(t3)) a2 = n2.call(e2, t3);
      else if (Fn(t3)) {
        a2 = new Un({ secretType: t3.secretType, uniCloudIns: e2 }).wrapEncryptDataCallFunction(n2.bind(e2))(t3);
      } else if (jn({ provider: s2, spaceId: r2, functionName: i2 })) {
        a2 = new Un({ secretType: t3.secretType, uniCloudIns: e2 }).wrapVerifyClientCallFunction(n2.bind(e2))(t3);
      } else a2 = o2(t3);
      return Object.defineProperty(a2, "result", { get: () => (console.warn("当前返回结果为Promise类型，不可直接访问其result属性，详情请参考：https://uniapp.dcloud.net.cn/uniCloud/faq?id=promise"), {}) }), a2.then((e3) => ("undefined" != typeof UTSJSONObject && (e3.result = new UTSJSONObject(e3.result)), e3));
    };
  }
  Un = class {
    constructor() {
      throw Ln({ message: `Platform ${C} is not enabled, please check whether secure network module is enabled in your manifest.json` });
    }
  };
  const Wn = Symbol("CLIENT_DB_INTERNAL");
  function Hn(e2, t2) {
    return e2.then = "DoNotReturnProxyWithAFunctionNamedThen", e2._internalType = Wn, e2.inspect = null, e2.__v_raw = void 0, new Proxy(e2, { get(e3, n2, s2) {
      if ("_uniClient" === n2) return null;
      if ("symbol" == typeof n2) return e3[n2];
      if (n2 in e3 || "string" != typeof n2) {
        const t3 = e3[n2];
        return "function" == typeof t3 ? t3.bind(e3) : t3;
      }
      return t2.get(e3, n2, s2);
    } });
  }
  function zn(e2) {
    return { on: (t2, n2) => {
      e2[t2] = e2[t2] || [], e2[t2].indexOf(n2) > -1 || e2[t2].push(n2);
    }, off: (t2, n2) => {
      e2[t2] = e2[t2] || [];
      const s2 = e2[t2].indexOf(n2);
      -1 !== s2 && e2[t2].splice(s2, 1);
    } };
  }
  const Jn = ["db.Geo", "db.command", "command.aggregate"];
  function Vn(e2, t2) {
    return Jn.indexOf(`${e2}.${t2}`) > -1;
  }
  function Gn(e2) {
    switch (f$1(e2 = se(e2))) {
      case "array":
        return e2.map((e3) => Gn(e3));
      case "object":
        return e2._internalType === Wn || Object.keys(e2).forEach((t2) => {
          e2[t2] = Gn(e2[t2]);
        }), e2;
      case "regexp":
        return { $regexp: { source: e2.source, flags: e2.flags } };
      case "date":
        return { $date: e2.toISOString() };
      default:
        return e2;
    }
  }
  function Yn(e2) {
    return e2 && e2.content && e2.content.$method;
  }
  class Qn {
    constructor(e2, t2, n2) {
      this.content = e2, this.prevStage = t2 || null, this.udb = null, this._database = n2;
    }
    toJSON() {
      let e2 = this;
      const t2 = [e2.content];
      for (; e2.prevStage; ) e2 = e2.prevStage, t2.push(e2.content);
      return { $db: t2.reverse().map((e3) => ({ $method: e3.$method, $param: Gn(e3.$param) })) };
    }
    toString() {
      return JSON.stringify(this.toJSON());
    }
    getAction() {
      const e2 = this.toJSON().$db.find((e3) => "action" === e3.$method);
      return e2 && e2.$param && e2.$param[0];
    }
    getCommand() {
      return { $db: this.toJSON().$db.filter((e2) => "action" !== e2.$method) };
    }
    get isAggregate() {
      let e2 = this;
      for (; e2; ) {
        const t2 = Yn(e2), n2 = Yn(e2.prevStage);
        if ("aggregate" === t2 && "collection" === n2 || "pipeline" === t2) return true;
        e2 = e2.prevStage;
      }
      return false;
    }
    get isCommand() {
      let e2 = this;
      for (; e2; ) {
        if ("command" === Yn(e2)) return true;
        e2 = e2.prevStage;
      }
      return false;
    }
    get isAggregateCommand() {
      let e2 = this;
      for (; e2; ) {
        const t2 = Yn(e2), n2 = Yn(e2.prevStage);
        if ("aggregate" === t2 && "command" === n2) return true;
        e2 = e2.prevStage;
      }
      return false;
    }
    getNextStageFn(e2) {
      const t2 = this;
      return function() {
        return Xn({ $method: e2, $param: Gn(Array.from(arguments)) }, t2, t2._database);
      };
    }
    get count() {
      return this.isAggregate ? this.getNextStageFn("count") : function() {
        return this._send("count", Array.from(arguments));
      };
    }
    get remove() {
      return this.isCommand ? this.getNextStageFn("remove") : function() {
        return this._send("remove", Array.from(arguments));
      };
    }
    get() {
      return this._send("get", Array.from(arguments));
    }
    get add() {
      return this.isCommand ? this.getNextStageFn("add") : function() {
        return this._send("add", Array.from(arguments));
      };
    }
    update() {
      return this._send("update", Array.from(arguments));
    }
    end() {
      return this._send("end", Array.from(arguments));
    }
    get set() {
      return this.isCommand ? this.getNextStageFn("set") : function() {
        throw new Error("JQL禁止使用set方法");
      };
    }
    _send(e2, t2) {
      const n2 = this.getAction(), s2 = this.getCommand();
      if (s2.$db.push({ $method: e2, $param: Gn(t2) }), S$1) {
        const e3 = s2.$db.find((e4) => "collection" === e4.$method), t3 = e3 && e3.$param;
        t3 && 1 === t3.length && "string" == typeof e3.$param[0] && e3.$param[0].indexOf(",") > -1 && console.warn("检测到使用JQL语法联表查询时，未使用getTemp先过滤主表数据，在主表数据量大的情况下可能会查询缓慢。\n- 如何优化请参考此文档：https://uniapp.dcloud.net.cn/uniCloud/jql?id=lookup-with-temp \n- 如果主表数据量很小请忽略此信息，项目发行时不会出现此提示。");
      }
      return this._database._callCloudFunction({ action: n2, command: s2 });
    }
  }
  function Xn(e2, t2, n2) {
    return Hn(new Qn(e2, t2, n2), { get(e3, t3) {
      let s2 = "db";
      return e3 && e3.content && (s2 = e3.content.$method), Vn(s2, t3) ? Xn({ $method: t3 }, e3, n2) : function() {
        return Xn({ $method: t3, $param: Gn(Array.from(arguments)) }, e3, n2);
      };
    } });
  }
  function Zn({ path: e2, method: t2 }) {
    return class {
      constructor() {
        this.param = Array.from(arguments);
      }
      toJSON() {
        return { $newDb: [...e2.map((e3) => ({ $method: e3 })), { $method: t2, $param: this.param }] };
      }
      toString() {
        return JSON.stringify(this.toJSON());
      }
    };
  }
  function es(e2, t2 = {}) {
    return Hn(new e2(t2), { get: (e3, t3) => Vn("db", t3) ? Xn({ $method: t3 }, null, e3) : function() {
      return Xn({ $method: t3, $param: Gn(Array.from(arguments)) }, null, e3);
    } });
  }
  class ts extends class {
    constructor({ uniClient: e2 = {}, isJQL: t2 = false } = {}) {
      this._uniClient = e2, this._authCallBacks = {}, this._dbCallBacks = {}, e2._isDefault && (this._dbCallBacks = L("_globalUniCloudDatabaseCallback")), t2 || (this.auth = zn(this._authCallBacks)), this._isJQL = t2, Object.assign(this, zn(this._dbCallBacks)), this.env = Hn({}, { get: (e3, t3) => ({ $env: t3 }) }), this.Geo = Hn({}, { get: (e3, t3) => Zn({ path: ["Geo"], method: t3 }) }), this.serverDate = Zn({ path: [], method: "serverDate" }), this.RegExp = Zn({ path: [], method: "RegExp" });
    }
    getCloudEnv(e2) {
      if ("string" != typeof e2 || !e2.trim()) throw new Error("getCloudEnv参数错误");
      return { $env: e2.replace("$cloudEnv_", "") };
    }
    _callback(e2, t2) {
      const n2 = this._dbCallBacks;
      n2[e2] && n2[e2].forEach((e3) => {
        e3(...t2);
      });
    }
    _callbackAuth(e2, t2) {
      const n2 = this._authCallBacks;
      n2[e2] && n2[e2].forEach((e3) => {
        e3(...t2);
      });
    }
    multiSend() {
      const e2 = Array.from(arguments), t2 = e2.map((e3) => {
        const t3 = e3.getAction(), n2 = e3.getCommand();
        if ("getTemp" !== n2.$db[n2.$db.length - 1].$method) throw new Error("multiSend只支持子命令内使用getTemp");
        return { action: t3, command: n2 };
      });
      return this._callCloudFunction({ multiCommand: t2, queryList: e2 });
    }
  } {
    _parseResult(e2) {
      return this._isJQL ? e2.result : e2;
    }
    _callCloudFunction({ action: e2, command: t2, multiCommand: n2, queryList: s2 }) {
      function r2(e3, t3) {
        if (n2 && s2) for (let n3 = 0; n3 < s2.length; n3++) {
          const r3 = s2[n3];
          r3.udb && "function" == typeof r3.udb.setResult && (t3 ? r3.udb.setResult(t3) : r3.udb.setResult(e3.result.dataList[n3]));
        }
      }
      const i2 = this, o2 = this._isJQL ? "databaseForJQL" : "database";
      function a2(e3) {
        return i2._callback("error", [e3]), M(q(o2, "fail"), e3).then(() => M(q(o2, "complete"), e3)).then(() => (r2(null, e3), Y(j$1, { type: W, content: e3 }), Promise.reject(e3)));
      }
      const c2 = M(q(o2, "invoke")), u2 = this._uniClient;
      return c2.then(() => u2.callFunction({ name: "DCloud-clientDB", type: h$2, data: { action: e2, command: t2, multiCommand: n2 } })).then((e3) => {
        const { code: t3, message: n3, token: s3, tokenExpired: c3, systemInfo: u3 = [] } = e3.result;
        if (u3) for (let e4 = 0; e4 < u3.length; e4++) {
          const { level: t4, message: n4, detail: s4 } = u3[e4], r3 = console["warn" === t4 ? "error" : t4] || console.log;
          let i3 = "[System Info]" + n4;
          s4 && (i3 = `${i3}
详细信息：${s4}`), r3(i3);
        }
        if (t3) {
          return a2(new te({ code: t3, message: n3, requestId: e3.requestId }));
        }
        e3.result.errCode = e3.result.errCode || e3.result.code, e3.result.errMsg = e3.result.errMsg || e3.result.message, s3 && c3 && (ie({ token: s3, tokenExpired: c3 }), this._callbackAuth("refreshToken", [{ token: s3, tokenExpired: c3 }]), this._callback("refreshToken", [{ token: s3, tokenExpired: c3 }]), Y(B, { token: s3, tokenExpired: c3 }));
        const h2 = [{ prop: "affectedDocs", tips: "affectedDocs不再推荐使用，请使用inserted/deleted/updated/data.length替代" }, { prop: "code", tips: "code不再推荐使用，请使用errCode替代" }, { prop: "message", tips: "message不再推荐使用，请使用errMsg替代" }];
        for (let t4 = 0; t4 < h2.length; t4++) {
          const { prop: n4, tips: s4 } = h2[t4];
          if (n4 in e3.result) {
            const t5 = e3.result[n4];
            Object.defineProperty(e3.result, n4, { get: () => (console.warn(s4), t5) });
          }
        }
        return function(e4) {
          return M(q(o2, "success"), e4).then(() => M(q(o2, "complete"), e4)).then(() => {
            r2(e4, null);
            const t4 = i2._parseResult(e4);
            return Y(j$1, { type: W, content: t4 }), Promise.resolve(t4);
          });
        }(e3);
      }, (e3) => {
        /fc_function_not_found|FUNCTION_NOT_FOUND/g.test(e3.message) && console.warn("clientDB未初始化，请在web控制台保存一次schema以开启clientDB");
        return a2(new te({ code: e3.code || "SYSTEM_ERROR", message: e3.message, requestId: e3.requestId }));
      });
    }
  }
  const ns = "token无效，跳转登录页面", ss = "token过期，跳转登录页面", rs = { TOKEN_INVALID_TOKEN_EXPIRED: ss, TOKEN_INVALID_INVALID_CLIENTID: ns, TOKEN_INVALID: ns, TOKEN_INVALID_WRONG_TOKEN: ns, TOKEN_INVALID_ANONYMOUS_USER: ns }, is = { "uni-id-token-expired": ss, "uni-id-check-token-failed": ns, "uni-id-token-not-exist": ns, "uni-id-check-device-feature-failed": ns };
  function os(e2, t2) {
    let n2 = "";
    return n2 = e2 ? `${e2}/${t2}` : t2, n2.replace(/^\//, "");
  }
  function as(e2 = [], t2 = "") {
    const n2 = [], s2 = [];
    return e2.forEach((e3) => {
      true === e3.needLogin ? n2.push(os(t2, e3.path)) : false === e3.needLogin && s2.push(os(t2, e3.path));
    }), { needLoginPage: n2, notNeedLoginPage: s2 };
  }
  function cs(e2) {
    return e2.split("?")[0].replace(/^\//, "");
  }
  function us() {
    return function(e2) {
      let t2 = e2 && e2.$page && e2.$page.fullPath || "";
      return t2 ? ("/" !== t2.charAt(0) && (t2 = "/" + t2), t2) : t2;
    }(function() {
      const e2 = getCurrentPages();
      return e2[e2.length - 1];
    }());
  }
  function hs() {
    return cs(us());
  }
  function ls(e2 = "", t2 = {}) {
    if (!e2) return false;
    if (!(t2 && t2.list && t2.list.length)) return false;
    const n2 = t2.list, s2 = cs(e2);
    return n2.some((e3) => e3.pagePath === s2);
  }
  const ds = !!e$1.uniIdRouter;
  const { loginPage: ps, routerNeedLogin: fs, resToLogin: gs, needLoginPage: ms, notNeedLoginPage: ys, loginPageInTabBar: _s } = function({ pages: t2 = [], subPackages: n2 = [], uniIdRouter: s2 = {}, tabBar: r2 = {} } = e$1) {
    const { loginPage: i2, needLogin: o2 = [], resToLogin: a2 = true } = s2, { needLoginPage: c2, notNeedLoginPage: u2 } = as(t2), { needLoginPage: h2, notNeedLoginPage: l2 } = function(e2 = []) {
      const t3 = [], n3 = [];
      return e2.forEach((e3) => {
        const { root: s3, pages: r3 = [] } = e3, { needLoginPage: i3, notNeedLoginPage: o3 } = as(r3, s3);
        t3.push(...i3), n3.push(...o3);
      }), { needLoginPage: t3, notNeedLoginPage: n3 };
    }(n2);
    return { loginPage: i2, routerNeedLogin: o2, resToLogin: a2, needLoginPage: [...c2, ...h2], notNeedLoginPage: [...u2, ...l2], loginPageInTabBar: ls(i2, r2) };
  }();
  if (ms.indexOf(ps) > -1) throw new Error(`Login page [${ps}] should not be "needLogin", please check your pages.json`);
  function ws(e2) {
    const t2 = hs();
    if ("/" === e2.charAt(0)) return e2;
    const [n2, s2] = e2.split("?"), r2 = n2.replace(/^\//, "").split("/"), i2 = t2.split("/");
    i2.pop();
    for (let e3 = 0; e3 < r2.length; e3++) {
      const t3 = r2[e3];
      ".." === t3 ? i2.pop() : "." !== t3 && i2.push(t3);
    }
    return "" === i2[0] && i2.shift(), "/" + i2.join("/") + (s2 ? "?" + s2 : "");
  }
  function vs(e2) {
    const t2 = cs(ws(e2));
    return !(ys.indexOf(t2) > -1) && (ms.indexOf(t2) > -1 || fs.some((t3) => function(e3, t4) {
      return new RegExp(t4).test(e3);
    }(e2, t3)));
  }
  function Is({ redirect: e2 }) {
    const t2 = cs(e2), n2 = cs(ps);
    return hs() !== n2 && t2 !== n2;
  }
  function Ss({ api: e2, redirect: t2 } = {}) {
    if (!t2 || !Is({ redirect: t2 })) return;
    const n2 = function(e3, t3) {
      return "/" !== e3.charAt(0) && (e3 = "/" + e3), t3 ? e3.indexOf("?") > -1 ? e3 + `&uniIdRedirectUrl=${encodeURIComponent(t3)}` : e3 + `?uniIdRedirectUrl=${encodeURIComponent(t3)}` : e3;
    }(ps, t2);
    _s ? "navigateTo" !== e2 && "redirectTo" !== e2 || (e2 = "switchTab") : "switchTab" === e2 && (e2 = "navigateTo");
    const s2 = { navigateTo: uni.navigateTo, redirectTo: uni.redirectTo, switchTab: uni.switchTab, reLaunch: uni.reLaunch };
    setTimeout(() => {
      s2[e2]({ url: n2 });
    }, 0);
  }
  function bs({ url: e2 } = {}) {
    const t2 = { abortLoginPageJump: false, autoToLoginPage: false }, n2 = function() {
      const { token: e3, tokenExpired: t3 } = re();
      let n3;
      if (e3) {
        if (t3 < Date.now()) {
          const e4 = "uni-id-token-expired";
          n3 = { errCode: e4, errMsg: is[e4] };
        }
      } else {
        const e4 = "uni-id-check-token-failed";
        n3 = { errCode: e4, errMsg: is[e4] };
      }
      return n3;
    }();
    if (vs(e2) && n2) {
      n2.uniIdRedirectUrl = e2;
      if (J($$1).length > 0) return setTimeout(() => {
        Y($$1, n2);
      }, 0), t2.abortLoginPageJump = true, t2;
      t2.autoToLoginPage = true;
    }
    return t2;
  }
  function ks() {
    !function() {
      const e3 = us(), { abortLoginPageJump: t2, autoToLoginPage: n2 } = bs({ url: e3 });
      t2 || n2 && Ss({ api: "redirectTo", redirect: e3 });
    }();
    const e2 = ["navigateTo", "redirectTo", "reLaunch", "switchTab"];
    for (let t2 = 0; t2 < e2.length; t2++) {
      const n2 = e2[t2];
      uni.addInterceptor(n2, { invoke(e3) {
        const { abortLoginPageJump: t3, autoToLoginPage: s2 } = bs({ url: e3.url });
        return t3 ? e3 : s2 ? (Ss({ api: n2, redirect: ws(e3.url) }), false) : e3;
      } });
    }
  }
  function As() {
    this.onResponse((e2) => {
      const { type: t2, content: n2 } = e2;
      let s2 = false;
      switch (t2) {
        case "cloudobject":
          s2 = function(e3) {
            if ("object" != typeof e3) return false;
            const { errCode: t3 } = e3 || {};
            return t3 in is;
          }(n2);
          break;
        case "clientdb":
          s2 = function(e3) {
            if ("object" != typeof e3) return false;
            const { errCode: t3 } = e3 || {};
            return t3 in rs;
          }(n2);
      }
      s2 && function(e3 = {}) {
        const t3 = J($$1);
        Z().then(() => {
          const n3 = us();
          if (n3 && Is({ redirect: n3 })) return t3.length > 0 ? Y($$1, Object.assign({ uniIdRedirectUrl: n3 }, e3)) : void (ps && Ss({ api: "navigateTo", redirect: n3 }));
        });
      }(n2);
    });
  }
  function Cs(e2) {
    !function(e3) {
      e3.onResponse = function(e4) {
        V(j$1, e4);
      }, e3.offResponse = function(e4) {
        G(j$1, e4);
      };
    }(e2), function(e3) {
      e3.onNeedLogin = function(e4) {
        V($$1, e4);
      }, e3.offNeedLogin = function(e4) {
        G($$1, e4);
      }, ds && (L("_globalUniCloudStatus").needLoginInit || (L("_globalUniCloudStatus").needLoginInit = true, Z().then(() => {
        ks.call(e3);
      }), gs && As.call(e3)));
    }(e2), function(e3) {
      e3.onRefreshToken = function(e4) {
        V(B, e4);
      }, e3.offRefreshToken = function(e4) {
        G(B, e4);
      };
    }(e2);
  }
  let Ps;
  const Ts = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", xs = /^(?:[A-Za-z\d+/]{4})*?(?:[A-Za-z\d+/]{2}(?:==)?|[A-Za-z\d+/]{3}=?)?$/;
  function Os() {
    const e2 = re().token || "", t2 = e2.split(".");
    if (!e2 || 3 !== t2.length) return { uid: null, role: [], permission: [], tokenExpired: 0 };
    let n2;
    try {
      n2 = JSON.parse((s2 = t2[1], decodeURIComponent(Ps(s2).split("").map(function(e3) {
        return "%" + ("00" + e3.charCodeAt(0).toString(16)).slice(-2);
      }).join(""))));
    } catch (e3) {
      throw new Error("获取当前用户信息出错，详细错误信息为：" + e3.message);
    }
    var s2;
    return n2.tokenExpired = 1e3 * n2.exp, delete n2.exp, delete n2.iat, n2;
  }
  Ps = "function" != typeof atob ? function(e2) {
    if (e2 = String(e2).replace(/[\t\n\f\r ]+/g, ""), !xs.test(e2)) throw new Error("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");
    var t2;
    e2 += "==".slice(2 - (3 & e2.length));
    for (var n2, s2, r2 = "", i2 = 0; i2 < e2.length; ) t2 = Ts.indexOf(e2.charAt(i2++)) << 18 | Ts.indexOf(e2.charAt(i2++)) << 12 | (n2 = Ts.indexOf(e2.charAt(i2++))) << 6 | (s2 = Ts.indexOf(e2.charAt(i2++))), r2 += 64 === n2 ? String.fromCharCode(t2 >> 16 & 255) : 64 === s2 ? String.fromCharCode(t2 >> 16 & 255, t2 >> 8 & 255) : String.fromCharCode(t2 >> 16 & 255, t2 >> 8 & 255, 255 & t2);
    return r2;
  } : atob;
  var Es = n$1(function(e2, t2) {
    Object.defineProperty(t2, "__esModule", { value: true });
    const n2 = "chooseAndUploadFile:ok", s2 = "chooseAndUploadFile:fail";
    function r2(e3, t3) {
      return e3.tempFiles.forEach((e4, n3) => {
        e4.name || (e4.name = e4.path.substring(e4.path.lastIndexOf("/") + 1)), t3 && (e4.fileType = t3), e4.cloudPath = Date.now() + "_" + n3 + e4.name.substring(e4.name.lastIndexOf("."));
      }), e3.tempFilePaths || (e3.tempFilePaths = e3.tempFiles.map((e4) => e4.path)), e3;
    }
    function i2(e3, t3, { onChooseFile: s3, onUploadProgress: r3 }) {
      return t3.then((e4) => {
        if (s3) {
          const t4 = s3(e4);
          if (void 0 !== t4) return Promise.resolve(t4).then((t5) => void 0 === t5 ? e4 : t5);
        }
        return e4;
      }).then((t4) => false === t4 ? { errMsg: n2, tempFilePaths: [], tempFiles: [] } : function(e4, t5, s4 = 5, r4) {
        (t5 = Object.assign({}, t5)).errMsg = n2;
        const i3 = t5.tempFiles, o2 = i3.length;
        let a2 = 0;
        return new Promise((n3) => {
          for (; a2 < s4; ) c2();
          function c2() {
            const s5 = a2++;
            if (s5 >= o2) return void (!i3.find((e5) => !e5.url && !e5.errMsg) && n3(t5));
            const u2 = i3[s5];
            e4.uploadFile({ provider: u2.provider, filePath: u2.path, cloudPath: u2.cloudPath, fileType: u2.fileType, cloudPathAsRealPath: u2.cloudPathAsRealPath, onUploadProgress(e5) {
              e5.index = s5, e5.tempFile = u2, e5.tempFilePath = u2.path, r4 && r4(e5);
            } }).then((e5) => {
              u2.url = e5.fileID, s5 < o2 && c2();
            }).catch((e5) => {
              u2.errMsg = e5.errMsg || e5.message, s5 < o2 && c2();
            });
          }
        });
      }(e3, t4, 5, r3));
    }
    t2.initChooseAndUploadFile = function(e3) {
      return function(t3 = { type: "all" }) {
        return "image" === t3.type ? i2(e3, function(e4) {
          const { count: t4, sizeType: n3, sourceType: i3 = ["album", "camera"], extension: o2 } = e4;
          return new Promise((e5, a2) => {
            uni.chooseImage({ count: t4, sizeType: n3, sourceType: i3, extension: o2, success(t5) {
              e5(r2(t5, "image"));
            }, fail(e6) {
              a2({ errMsg: e6.errMsg.replace("chooseImage:fail", s2) });
            } });
          });
        }(t3), t3) : "video" === t3.type ? i2(e3, function(e4) {
          const { camera: t4, compressed: n3, maxDuration: i3, sourceType: o2 = ["album", "camera"], extension: a2 } = e4;
          return new Promise((e5, c2) => {
            uni.chooseVideo({ camera: t4, compressed: n3, maxDuration: i3, sourceType: o2, extension: a2, success(t5) {
              const { tempFilePath: n4, duration: s3, size: i4, height: o3, width: a3 } = t5;
              e5(r2({ errMsg: "chooseVideo:ok", tempFilePaths: [n4], tempFiles: [{ name: t5.tempFile && t5.tempFile.name || "", path: n4, size: i4, type: t5.tempFile && t5.tempFile.type || "", width: a3, height: o3, duration: s3, fileType: "video", cloudPath: "" }] }, "video"));
            }, fail(e6) {
              c2({ errMsg: e6.errMsg.replace("chooseVideo:fail", s2) });
            } });
          });
        }(t3), t3) : i2(e3, function(e4) {
          const { count: t4, extension: n3 } = e4;
          return new Promise((e5, i3) => {
            let o2 = uni.chooseFile;
            if ("undefined" != typeof wx && "function" == typeof wx.chooseMessageFile && (o2 = wx.chooseMessageFile), "function" != typeof o2) return i3({ errMsg: s2 + " 请指定 type 类型，该平台仅支持选择 image 或 video。" });
            o2({ type: "all", count: t4, extension: n3, success(t5) {
              e5(r2(t5));
            }, fail(e6) {
              i3({ errMsg: e6.errMsg.replace("chooseFile:fail", s2) });
            } });
          });
        }(t3), t3);
      };
    };
  }), Ls = t$1(Es);
  const Rs = "manual";
  function Us(e2) {
    return { props: { localdata: { type: Array, default: () => [] }, options: { type: [Object, Array], default: () => ({}) }, spaceInfo: { type: Object, default: () => ({}) }, collection: { type: [String, Array], default: "" }, action: { type: String, default: "" }, field: { type: String, default: "" }, orderby: { type: String, default: "" }, where: { type: [String, Object], default: "" }, pageData: { type: String, default: "add" }, pageCurrent: { type: Number, default: 1 }, pageSize: { type: Number, default: 20 }, getcount: { type: [Boolean, String], default: false }, gettree: { type: [Boolean, String], default: false }, gettreepath: { type: [Boolean, String], default: false }, startwith: { type: String, default: "" }, limitlevel: { type: Number, default: 10 }, groupby: { type: String, default: "" }, groupField: { type: String, default: "" }, distinct: { type: [Boolean, String], default: false }, foreignKey: { type: String, default: "" }, loadtime: { type: String, default: "auto" }, manual: { type: Boolean, default: false } }, data: () => ({ mixinDatacomLoading: false, mixinDatacomHasMore: false, mixinDatacomResData: [], mixinDatacomErrorMessage: "", mixinDatacomPage: {}, mixinDatacomError: null }), created() {
      this.mixinDatacomPage = { current: this.pageCurrent, size: this.pageSize, count: 0 }, this.$watch(() => {
        var e3 = [];
        return ["pageCurrent", "pageSize", "localdata", "collection", "action", "field", "orderby", "where", "getont", "getcount", "gettree", "groupby", "groupField", "distinct"].forEach((t2) => {
          e3.push(this[t2]);
        }), e3;
      }, (e3, t2) => {
        if (this.loadtime === Rs) return;
        let n2 = false;
        const s2 = [];
        for (let r2 = 2; r2 < e3.length; r2++) e3[r2] !== t2[r2] && (s2.push(e3[r2]), n2 = true);
        e3[0] !== t2[0] && (this.mixinDatacomPage.current = this.pageCurrent), this.mixinDatacomPage.size = this.pageSize, this.onMixinDatacomPropsChange(n2, s2);
      });
    }, methods: { onMixinDatacomPropsChange(e3, t2) {
    }, mixinDatacomEasyGet({ getone: e3 = false, success: t2, fail: n2 } = {}) {
      this.mixinDatacomLoading || (this.mixinDatacomLoading = true, this.mixinDatacomErrorMessage = "", this.mixinDatacomError = null, this.mixinDatacomGet().then((n3) => {
        this.mixinDatacomLoading = false;
        const { data: s2, count: r2 } = n3.result;
        this.getcount && (this.mixinDatacomPage.count = r2), this.mixinDatacomHasMore = s2.length < this.pageSize;
        const i2 = e3 ? s2.length ? s2[0] : void 0 : s2;
        this.mixinDatacomResData = i2, t2 && t2(i2);
      }).catch((e4) => {
        this.mixinDatacomLoading = false, this.mixinDatacomErrorMessage = e4, this.mixinDatacomError = e4, n2 && n2(e4);
      }));
    }, mixinDatacomGet(t2 = {}) {
      let n2;
      t2 = t2 || {}, n2 = "undefined" != typeof __uniX && __uniX ? e2.databaseForJQL(this.spaceInfo) : e2.database(this.spaceInfo);
      const s2 = t2.action || this.action;
      s2 && (n2 = n2.action(s2));
      const r2 = t2.collection || this.collection;
      n2 = Array.isArray(r2) ? n2.collection(...r2) : n2.collection(r2);
      const i2 = t2.where || this.where;
      i2 && Object.keys(i2).length && (n2 = n2.where(i2));
      const o2 = t2.field || this.field;
      o2 && (n2 = n2.field(o2));
      const a2 = t2.foreignKey || this.foreignKey;
      a2 && (n2 = n2.foreignKey(a2));
      const c2 = t2.groupby || this.groupby;
      c2 && (n2 = n2.groupBy(c2));
      const u2 = t2.groupField || this.groupField;
      u2 && (n2 = n2.groupField(u2));
      true === (void 0 !== t2.distinct ? t2.distinct : this.distinct) && (n2 = n2.distinct());
      const h2 = t2.orderby || this.orderby;
      h2 && (n2 = n2.orderBy(h2));
      const l2 = void 0 !== t2.pageCurrent ? t2.pageCurrent : this.mixinDatacomPage.current, d2 = void 0 !== t2.pageSize ? t2.pageSize : this.mixinDatacomPage.size, p2 = void 0 !== t2.getcount ? t2.getcount : this.getcount, f2 = void 0 !== t2.gettree ? t2.gettree : this.gettree, g2 = void 0 !== t2.gettreepath ? t2.gettreepath : this.gettreepath, m2 = { getCount: p2 }, y2 = { limitLevel: void 0 !== t2.limitlevel ? t2.limitlevel : this.limitlevel, startWith: void 0 !== t2.startwith ? t2.startwith : this.startwith };
      return f2 && (m2.getTree = y2), g2 && (m2.getTreePath = y2), n2 = n2.skip(d2 * (l2 - 1)).limit(d2).get(m2), n2;
    } } };
  }
  function Ns(e2) {
    return function(t2, n2 = {}) {
      n2 = function(e3, t3 = {}) {
        return e3.customUI = t3.customUI || e3.customUI, e3.parseSystemError = t3.parseSystemError || e3.parseSystemError, Object.assign(e3.loadingOptions, t3.loadingOptions), Object.assign(e3.errorOptions, t3.errorOptions), "object" == typeof t3.secretMethods && (e3.secretMethods = t3.secretMethods), e3;
      }({ customUI: false, loadingOptions: { title: "加载中...", mask: true }, errorOptions: { type: "modal", retry: false } }, n2);
      const { customUI: s2, loadingOptions: r2, errorOptions: i2, parseSystemError: o2 } = n2, a2 = !s2;
      return new Proxy({}, { get(s3, c2) {
        switch (c2) {
          case "toString":
            return "[object UniCloudObject]";
          case "toJSON":
            return {};
        }
        return function({ fn: e3, interceptorName: t3, getCallbackArgs: n3 } = {}) {
          return function(...s4) {
            return __async(this, null, function* () {
              const r3 = n3 ? n3({ params: s4 }) : {};
              let i3, o3;
              try {
                return yield M(q(t3, "invoke"), __spreadValues({}, r3)), i3 = yield e3(...s4), yield M(q(t3, "success"), __spreadProps(__spreadValues({}, r3), { result: i3 })), i3;
              } catch (e4) {
                throw o3 = e4, yield M(q(t3, "fail"), __spreadProps(__spreadValues({}, r3), { error: o3 })), o3;
              } finally {
                yield M(q(t3, "complete"), o3 ? __spreadProps(__spreadValues({}, r3), { error: o3 }) : __spreadProps(__spreadValues({}, r3), { result: i3 }));
              }
            });
          };
        }({ fn: function s4(...h2) {
          return __async(this, null, function* () {
            let l2;
            a2 && uni.showLoading({ title: r2.title, mask: r2.mask });
            const d2 = { name: t2, type: u$1, data: { method: c2, params: h2 } };
            "object" == typeof n2.secretMethods && function(e3, t3) {
              const n3 = t3.data.method, s5 = e3.secretMethods || {}, r3 = s5[n3] || s5["*"];
              r3 && (t3.secretType = r3);
            }(n2, d2);
            let p2 = false;
            try {
              l2 = yield e2.callFunction(d2);
            } catch (e3) {
              p2 = true, l2 = { result: new te(e3) };
            }
            const { errSubject: f2, errCode: g2, errMsg: m2, newToken: y2 } = l2.result || {};
            if (a2 && uni.hideLoading(), y2 && y2.token && y2.tokenExpired && (ie(y2), Y(B, __spreadValues({}, y2))), g2) {
              let e3 = m2;
              if (p2 && o2) {
                e3 = (yield o2({ objectName: t2, methodName: c2, params: h2, errSubject: f2, errCode: g2, errMsg: m2 })).errMsg || m2;
              }
              if (a2) if ("toast" === i2.type) uni.showToast({ title: e3, icon: "none" });
              else {
                if ("modal" !== i2.type) throw new Error(`Invalid errorOptions.type: ${i2.type}`);
                {
                  const { confirm: t3 } = yield function() {
                    return __async(this, arguments, function* ({ title: e4, content: t4, showCancel: n4, cancelText: s5, confirmText: r3 } = {}) {
                      return new Promise((i3, o3) => {
                        uni.showModal({ title: e4, content: t4, showCancel: n4, cancelText: s5, confirmText: r3, success(e5) {
                          i3(e5);
                        }, fail() {
                          i3({ confirm: false, cancel: true });
                        } });
                      });
                    });
                  }({ title: "提示", content: e3, showCancel: i2.retry, cancelText: "取消", confirmText: i2.retry ? "重试" : "确定" });
                  if (i2.retry && t3) return s4(...h2);
                }
              }
              const n3 = new te({ subject: f2, code: g2, message: m2, requestId: l2.requestId });
              throw n3.detail = l2.result, Y(j$1, { type: z, content: n3 }), n3;
            }
            return Y(j$1, { type: z, content: l2.result }), l2.result;
          });
        }, interceptorName: "callObject", getCallbackArgs: function({ params: e3 } = {}) {
          return { objectName: t2, methodName: c2, params: e3 };
        } });
      } });
    };
  }
  function Ds(e2) {
    return L("_globalUniCloudSecureNetworkCache__{spaceId}".replace("{spaceId}", e2.config.spaceId));
  }
  function Ms() {
    return __async(this, arguments, function* ({ openid: e2, callLoginByWeixin: t2 = false } = {}) {
      Ds(this);
      throw new Error(`[SecureNetwork] API \`initSecureNetworkByWeixin\` is not supported on platform \`${C}\``);
    });
  }
  function qs(e2) {
    return __async(this, null, function* () {
      const t2 = Ds(this);
      return t2.initPromise || (t2.initPromise = Ms.call(this, e2).then((e3) => e3).catch((e3) => {
        throw delete t2.initPromise, e3;
      })), t2.initPromise;
    });
  }
  function Fs(e2) {
    return function({ openid: t2, callLoginByWeixin: n2 = false } = {}) {
      return qs.call(e2, { openid: t2, callLoginByWeixin: n2 });
    };
  }
  function Ks(e2) {
    !function(e3) {
      he = e3;
    }(e2);
  }
  function js(e2) {
    const t2 = { getSystemInfo: uni.getSystemInfo, getPushClientId: uni.getPushClientId };
    return function(n2) {
      return new Promise((s2, r2) => {
        t2[e2](__spreadProps(__spreadValues({}, n2), { success(e3) {
          s2(e3);
        }, fail(e3) {
          r2(e3);
        } }));
      });
    };
  }
  class $s extends class {
    constructor() {
      this._callback = {};
    }
    addListener(e2, t2) {
      this._callback[e2] || (this._callback[e2] = []), this._callback[e2].push(t2);
    }
    on(e2, t2) {
      return this.addListener(e2, t2);
    }
    removeListener(e2, t2) {
      if (!t2) throw new Error('The "listener" argument must be of type function. Received undefined');
      const n2 = this._callback[e2];
      if (!n2) return;
      const s2 = function(e3, t3) {
        for (let n3 = e3.length - 1; n3 >= 0; n3--) if (e3[n3] === t3) return n3;
        return -1;
      }(n2, t2);
      n2.splice(s2, 1);
    }
    off(e2, t2) {
      return this.removeListener(e2, t2);
    }
    removeAllListener(e2) {
      delete this._callback[e2];
    }
    emit(e2, ...t2) {
      const n2 = this._callback[e2];
      if (n2) for (let e3 = 0; e3 < n2.length; e3++) n2[e3](...t2);
    }
  } {
    constructor() {
      super(), this._uniPushMessageCallback = this._receivePushMessage.bind(this), this._currentMessageId = -1, this._payloadQueue = [];
    }
    init() {
      return Promise.all([js("getSystemInfo")(), js("getPushClientId")()]).then(([{ appId: e2 } = {}, { cid: t2 } = {}] = []) => {
        if (!e2) throw new Error("Invalid appId, please check the manifest.json file");
        if (!t2) throw new Error("Invalid push client id");
        this._appId = e2, this._pushClientId = t2, this._seqId = Date.now() + "-" + Math.floor(9e5 * Math.random() + 1e5), this.emit("open"), this._initMessageListener();
      }, (e2) => {
        throw this.emit("error", e2), this.close(), e2;
      });
    }
    open() {
      return __async(this, null, function* () {
        return this.init();
      });
    }
    _isUniCloudSSE(e2) {
      if ("receive" !== e2.type) return false;
      const t2 = e2 && e2.data && e2.data.payload;
      return !(!t2 || "UNI_CLOUD_SSE" !== t2.channel || t2.seqId !== this._seqId);
    }
    _receivePushMessage(e2) {
      if (!this._isUniCloudSSE(e2)) return;
      const t2 = e2 && e2.data && e2.data.payload, { action: n2, messageId: s2, message: r2 } = t2;
      this._payloadQueue.push({ action: n2, messageId: s2, message: r2 }), this._consumMessage();
    }
    _consumMessage() {
      for (; ; ) {
        const e2 = this._payloadQueue.find((e3) => e3.messageId === this._currentMessageId + 1);
        if (!e2) break;
        this._currentMessageId++, this._parseMessagePayload(e2);
      }
    }
    _parseMessagePayload(e2) {
      const { action: t2, messageId: n2, message: s2 } = e2;
      "end" === t2 ? this._end({ messageId: n2, message: s2 }) : "message" === t2 && this._appendMessage({ messageId: n2, message: s2 });
    }
    _appendMessage({ messageId: e2, message: t2 } = {}) {
      this.emit("message", t2);
    }
    _end({ messageId: e2, message: t2 } = {}) {
      this.emit("end", t2), this.close();
    }
    _initMessageListener() {
      uni.onPushMessage(this._uniPushMessageCallback);
    }
    _destroy() {
      uni.offPushMessage(this._uniPushMessageCallback);
    }
    toJSON() {
      return { appId: this._appId, pushClientId: this._pushClientId, seqId: this._seqId };
    }
    close() {
      this._destroy(), this.emit("close");
    }
  }
  function Bs(e2, t2) {
    return __async(this, null, function* () {
      const n2 = `http://${e2}:${t2}/system/ping`;
      try {
        const e3 = yield (s2 = { url: n2, timeout: 500 }, new Promise((e4, t3) => {
          ne.request(__spreadProps(__spreadValues({}, s2), { success(t4) {
            e4(t4);
          }, fail(e5) {
            t3(e5);
          } }));
        }));
        return !(!e3.data || 0 !== e3.data.code);
      } catch (e3) {
        return false;
      }
      var s2;
    });
  }
  function Ws(e2) {
    return __async(this, null, function* () {
      {
        const { osName: e3, osVersion: t3 } = ce();
        "ios" === e3 && function(e4) {
          if (!e4 || "string" != typeof e4) return 0;
          const t4 = e4.match(/^(\d+)./);
          return t4 && t4[1] ? parseInt(t4[1]) : 0;
        }(t3) >= 14 && console.warn("iOS 14及以上版本连接uniCloud本地调试服务需要允许客户端查找并连接到本地网络上的设备（仅开发期间需要，发行后不需要）");
      }
      const t2 = e2.__dev__;
      if (!t2.debugInfo) return;
      const { address: n2, servePort: s2 } = t2.debugInfo, { address: r2 } = yield function(e3, t3) {
        return __async(this, null, function* () {
          let n3;
          for (let s3 = 0; s3 < e3.length; s3++) {
            const r3 = e3[s3];
            if (yield Bs(r3, t3)) {
              n3 = r3;
              break;
            }
          }
          return { address: n3, port: t3 };
        });
      }(n2, s2);
      if (r2) return t2.localAddress = r2, void (t2.localPort = s2);
      const i2 = console["error"];
      let o2 = "";
      if ("remote" === t2.debugInfo.initialLaunchType ? (t2.debugInfo.forceRemote = true, o2 = "当前客户端和HBuilderX不在同一局域网下（或其他网络原因无法连接HBuilderX），uniCloud本地调试服务不对当前客户端生效。\n- 如果不使用uniCloud本地调试服务，请直接忽略此信息。\n- 如需使用uniCloud本地调试服务，请将客户端与主机连接到同一局域网下并重新运行到客户端。") : o2 = "无法连接uniCloud本地调试服务，请检查当前客户端是否与主机在同一局域网下。\n- 如需使用uniCloud本地调试服务，请将客户端与主机连接到同一局域网下并重新运行到客户端。", o2 += "\n- 如果在HBuilderX开启的状态下切换过网络环境，请重启HBuilderX后再试\n- 检查系统防火墙是否拦截了HBuilderX自带的nodejs\n- 检查是否错误的使用拦截器修改uni.request方法的参数", 0 === C.indexOf("mp-") && (o2 += "\n- 小程序中如何使用uniCloud，请参考：https://uniapp.dcloud.net.cn/uniCloud/publish.html#useinmp"), !t2.debugInfo.forceRemote) throw new Error(o2);
      i2(o2);
    });
  }
  function Hs(e2) {
    e2._initPromiseHub || (e2._initPromiseHub = new v$1({ createPromise: function() {
      let t2 = Promise.resolve();
      var n2;
      n2 = 1, t2 = new Promise((e3) => {
        setTimeout(() => {
          e3();
        }, n2);
      });
      const s2 = e2.auth();
      return t2.then(() => s2.getLoginState()).then((e3) => e3 ? Promise.resolve() : s2.signInAnonymously());
    } }));
  }
  const zs = { tcb: bt, tencent: bt, aliyun: fe, private: At, alipay: Nt };
  let Js = new class {
    init(e2) {
      let t2 = {};
      const n2 = zs[e2.provider];
      if (!n2) throw new Error("未提供正确的provider参数");
      t2 = n2.init(e2), function(e3) {
        const t3 = {};
        e3.__dev__ = t3, t3.debugLog = "app" === C;
        const n3 = P$1;
        n3 && !n3.code && (t3.debugInfo = n3);
        const s2 = new v$1({ createPromise: function() {
          return Ws(e3);
        } });
        t3.initLocalNetwork = function() {
          return s2.exec();
        };
      }(t2), Hs(t2), Bn(t2), function(e3) {
        const t3 = e3.uploadFile;
        e3.uploadFile = function(e4) {
          return t3.call(this, e4);
        };
      }(t2), function(e3) {
        e3.database = function(t3) {
          if (t3 && Object.keys(t3).length > 0) return e3.init(t3).database();
          if (this._database) return this._database;
          const n3 = es(ts, { uniClient: e3 });
          return this._database = n3, n3;
        }, e3.databaseForJQL = function(t3) {
          if (t3 && Object.keys(t3).length > 0) return e3.init(t3).databaseForJQL();
          if (this._databaseForJQL) return this._databaseForJQL;
          const n3 = es(ts, { uniClient: e3, isJQL: true });
          return this._databaseForJQL = n3, n3;
        };
      }(t2), function(e3) {
        e3.getCurrentUserInfo = Os, e3.chooseAndUploadFile = Ls.initChooseAndUploadFile(e3), Object.assign(e3, { get mixinDatacom() {
          return Us(e3);
        } }), e3.SSEChannel = $s, e3.initSecureNetworkByWeixin = Fs(e3), e3.setCustomClientInfo = Ks, e3.importObject = Ns(e3);
      }(t2);
      return ["callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "chooseAndUploadFile"].forEach((e3) => {
        if (!t2[e3]) return;
        const n3 = t2[e3];
        t2[e3] = function() {
          return n3.apply(t2, Array.from(arguments));
        }, t2[e3] = (/* @__PURE__ */ function(e4, t3) {
          return function(n4) {
            let s2 = false;
            if ("callFunction" === t3) {
              const e5 = n4 && n4.type || c$1;
              s2 = e5 !== c$1;
            }
            const r2 = "callFunction" === t3 && !s2, i2 = this._initPromiseHub.exec();
            n4 = n4 || {};
            const { success: o2, fail: a2, complete: u2 } = ee(n4), h2 = i2.then(() => s2 ? Promise.resolve() : M(q(t3, "invoke"), n4)).then(() => e4.call(this, n4)).then((e5) => s2 ? Promise.resolve(e5) : M(q(t3, "success"), e5).then(() => M(q(t3, "complete"), e5)).then(() => (r2 && Y(j$1, { type: H, content: e5 }), Promise.resolve(e5))), (e5) => s2 ? Promise.reject(e5) : M(q(t3, "fail"), e5).then(() => M(q(t3, "complete"), e5)).then(() => (Y(j$1, { type: H, content: e5 }), Promise.reject(e5))));
            if (!(o2 || a2 || u2)) return h2;
            h2.then((e5) => {
              o2 && o2(e5), u2 && u2(e5), r2 && Y(j$1, { type: H, content: e5 });
            }, (e5) => {
              a2 && a2(e5), u2 && u2(e5), r2 && Y(j$1, { type: H, content: e5 });
            });
          };
        }(t2[e3], e3)).bind(t2);
      }), t2.init = this.init, t2;
    }
  }();
  (() => {
    const e2 = T$1;
    let t2 = {};
    if (e2 && 1 === e2.length) t2 = e2[0], Js = Js.init(t2), Js._isDefault = true;
    else {
      const t3 = ["auth", "callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "database", "getCurrentUSerInfo", "importObject"];
      let n2;
      n2 = e2 && e2.length > 0 ? "应用有多个服务空间，请通过uniCloud.init方法指定要使用的服务空间" : "应用未关联服务空间，请在uniCloud目录右键关联服务空间", t3.forEach((e3) => {
        Js[e3] = function() {
          return console.error(n2), Promise.reject(new te({ code: "SYS_ERR", message: n2 }));
        };
      });
    }
    Object.assign(Js, { get mixinDatacom() {
      return Us(Js);
    } }), Cs(Js), Js.addInterceptor = N, Js.removeInterceptor = D, Js.interceptObject = F;
  })();
  var Vs = Js;
  const _sfc_main$q = {
    name: "loading1",
    data() {
      return {};
    }
  };
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container loading1" }, [
      vue$1.createElementVNode("view", { class: "shape shape1" }),
      vue$1.createElementVNode("view", { class: "shape shape2" }),
      vue$1.createElementVNode("view", { class: "shape shape3" }),
      vue$1.createElementVNode("view", { class: "shape shape4" })
    ]);
  }
  const Loading1 = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$p], ["__scopeId", "data-v-a59cc858"], ["__file", "D:/ty/medical-device/src/uni_modules/qiun-data-charts/components/qiun-loading/loading1.vue"]]);
  const _sfc_main$p = {
    name: "loading2",
    data() {
      return {};
    }
  };
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container loading2" }, [
      vue$1.createElementVNode("view", { class: "shape shape1" }),
      vue$1.createElementVNode("view", { class: "shape shape2" }),
      vue$1.createElementVNode("view", { class: "shape shape3" }),
      vue$1.createElementVNode("view", { class: "shape shape4" })
    ]);
  }
  const Loading2 = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$o], ["__scopeId", "data-v-ea750a45"], ["__file", "D:/ty/medical-device/src/uni_modules/qiun-data-charts/components/qiun-loading/loading2.vue"]]);
  const _sfc_main$o = {
    name: "loading3",
    data() {
      return {};
    }
  };
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container loading3" }, [
      vue$1.createElementVNode("view", { class: "shape shape1" }),
      vue$1.createElementVNode("view", { class: "shape shape2" }),
      vue$1.createElementVNode("view", { class: "shape shape3" }),
      vue$1.createElementVNode("view", { class: "shape shape4" })
    ]);
  }
  const Loading3 = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$n], ["__scopeId", "data-v-9e18a663"], ["__file", "D:/ty/medical-device/src/uni_modules/qiun-data-charts/components/qiun-loading/loading3.vue"]]);
  const _sfc_main$n = {
    name: "loading5",
    data() {
      return {};
    }
  };
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container loading5" }, [
      vue$1.createElementVNode("view", { class: "shape shape1" }),
      vue$1.createElementVNode("view", { class: "shape shape2" }),
      vue$1.createElementVNode("view", { class: "shape shape3" }),
      vue$1.createElementVNode("view", { class: "shape shape4" })
    ]);
  }
  const Loading4 = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$m], ["__scopeId", "data-v-7e96cf90"], ["__file", "D:/ty/medical-device/src/uni_modules/qiun-data-charts/components/qiun-loading/loading4.vue"]]);
  const _sfc_main$m = {
    name: "loading6",
    data() {
      return {};
    }
  };
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container loading6" }, [
      vue$1.createElementVNode("view", { class: "shape shape1" }),
      vue$1.createElementVNode("view", { class: "shape shape2" }),
      vue$1.createElementVNode("view", { class: "shape shape3" }),
      vue$1.createElementVNode("view", { class: "shape shape4" })
    ]);
  }
  const Loading5 = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$l], ["__scopeId", "data-v-3b2040f4"], ["__file", "D:/ty/medical-device/src/uni_modules/qiun-data-charts/components/qiun-loading/loading5.vue"]]);
  const _sfc_main$l = {
    components: { Loading1, Loading2, Loading3, Loading4, Loading5 },
    name: "qiun-loading",
    props: {
      loadingType: {
        type: Number,
        default: 2
      }
    },
    data() {
      return {};
    }
  };
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Loading1 = vue$1.resolveComponent("Loading1");
    const _component_Loading2 = vue$1.resolveComponent("Loading2");
    const _component_Loading3 = vue$1.resolveComponent("Loading3");
    const _component_Loading4 = vue$1.resolveComponent("Loading4");
    const _component_Loading5 = vue$1.resolveComponent("Loading5");
    return vue$1.openBlock(), vue$1.createElementBlock("view", null, [
      $props.loadingType == 1 ? (vue$1.openBlock(), vue$1.createBlock(_component_Loading1, { key: 0 })) : vue$1.createCommentVNode("v-if", true),
      $props.loadingType == 2 ? (vue$1.openBlock(), vue$1.createBlock(_component_Loading2, { key: 1 })) : vue$1.createCommentVNode("v-if", true),
      $props.loadingType == 3 ? (vue$1.openBlock(), vue$1.createBlock(_component_Loading3, { key: 2 })) : vue$1.createCommentVNode("v-if", true),
      $props.loadingType == 4 ? (vue$1.openBlock(), vue$1.createBlock(_component_Loading4, { key: 3 })) : vue$1.createCommentVNode("v-if", true),
      $props.loadingType == 5 ? (vue$1.openBlock(), vue$1.createBlock(_component_Loading5, { key: 4 })) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const __easycom_0$2 = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$k], ["__file", "D:/ty/medical-device/src/uni_modules/qiun-data-charts/components/qiun-loading/qiun-loading.vue"]]);
  const _sfc_main$k = {
    name: "qiun-error",
    props: {
      errorMessage: {
        type: String,
        default: null
      }
    },
    data() {
      return {};
    }
  };
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "chartsview" }, [
      vue$1.createElementVNode("view", { class: "charts-error" }),
      vue$1.createElementVNode(
        "view",
        { class: "charts-font" },
        vue$1.toDisplayString($props.errorMessage == null ? "请点击重试" : $props.errorMessage),
        1
        /* TEXT */
      )
    ]);
  }
  const __easycom_1 = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$j], ["__scopeId", "data-v-e5f1ec16"], ["__file", "D:/ty/medical-device/src/uni_modules/qiun-data-charts/components/qiun-error/qiun-error.vue"]]);
  const color$1 = ["#1890FF", "#91CB74", "#FAC858", "#EE6666", "#73C0DE", "#3CA272", "#FC8452", "#9A60B4", "#ea7ccc"];
  const formatDateTime = (timeStamp, returnType) => {
    var date = /* @__PURE__ */ new Date();
    date.setTime(timeStamp * 1e3);
    date.getFullYear();
    date.getMonth() + 1;
    date.getDate();
    var h2 = date.getHours();
    h2 = h2 < 10 ? "0" + h2 : h2;
    var minute = date.getMinutes();
    date.getSeconds();
    minute = minute < 10 ? "0" + minute : minute;
    {
      return h2 + ":" + minute;
    }
  };
  const cfu = {
    //demotype为自定义图表类型，一般不需要自定义图表类型，只需要改根节点上对应的类型即可
    "type": ["pie", "ring", "rose", "word", "funnel", "map", "arcbar", "line", "column", "mount", "bar", "area", "radar", "gauge", "candle", "mix", "tline", "tarea", "scatter", "bubble", "demotype"],
    "range": ["饼状图", "圆环图", "玫瑰图", "词云图", "漏斗图", "地图", "圆弧进度条", "折线图", "柱状图", "山峰图", "条状图", "区域图", "雷达图", "仪表盘", "K线图", "混合图", "时间轴折线", "时间轴区域", "散点图", "气泡图", "自定义类型"],
    //增加自定义图表类型，如果需要categories，请在这里加入您的图表类型，例如最后的"demotype"
    //自定义类型时需要注意"tline","tarea","scatter","bubble"等时间轴（矢量x轴）类图表，没有categories，不需要加入categories
    "categories": ["line", "column", "mount", "bar", "area", "radar", "gauge", "candle", "mix", "demotype"],
    //instance为实例变量承载属性，不要删除
    "instance": {},
    //option为opts及eopts承载属性，不要删除
    "option": {},
    //下面是自定义format配置，因除H5端外的其他端无法通过props传递函数，只能通过此属性对应下标的方式来替换
    "formatter": {
      "yAxisDemo1": function(val, index, opts) {
        return val + "元";
      },
      "yAxisDemo2": function(val, index, opts) {
        return val.toFixed(2);
      },
      "xAxisDemo1": function(val, index, opts) {
        return val + "年";
      },
      "xAxisDemo2": function(val, index, opts) {
        return formatDateTime(val);
      },
      "seriesDemo1": function(val, index, series, opts) {
        return val + "元";
      },
      "tooltipDemo1": function(item, category, index, opts) {
        if (index == 0) {
          return "随便用" + item.data + "年";
        } else {
          return "其他我没改" + item.data + "天";
        }
      },
      "pieDemo": function(val, index, series, opts) {
        if (index !== void 0) {
          return series[index].name + "：" + series[index].data + "元";
        }
      }
    },
    //这里演示了自定义您的图表类型的option，可以随意命名，之后在组件上 type="demotype" 后，组件会调用这个花括号里的option，如果组件上还存在opts参数，会将demotype与opts中option合并后渲染图表。
    "demotype": {
      //我这里把曲线图当做了自定义图表类型，您可以根据需要随意指定类型或配置
      "type": "line",
      "color": color$1,
      "padding": [15, 10, 0, 15],
      "xAxis": {
        "disableGrid": true
      },
      "yAxis": {
        "gridType": "dash",
        "dashLength": 2
      },
      "legend": {},
      "extra": {
        "line": {
          "type": "curve",
          "width": 2
        }
      }
    },
    //下面是自定义配置，请添加项目所需的通用配置
    "pie": {
      "type": "pie",
      "color": color$1,
      "padding": [5, 5, 5, 5],
      "extra": {
        "pie": {
          "activeOpacity": 0.5,
          "activeRadius": 10,
          "offsetAngle": 0,
          "labelWidth": 15,
          "border": true,
          "borderWidth": 3,
          "borderColor": "#FFFFFF"
        }
      }
    },
    "ring": {
      "type": "ring",
      "color": color$1,
      "padding": [5, 5, 5, 5],
      "rotate": false,
      "dataLabel": true,
      "legend": {
        "show": true,
        "position": "right",
        "lineHeight": 25
      },
      "title": {
        "name": "收益率",
        "fontSize": 15,
        "color": "#666666"
      },
      "subtitle": {
        "name": "70%",
        "fontSize": 25,
        "color": "#7cb5ec"
      },
      "extra": {
        "ring": {
          "ringWidth": 30,
          "activeOpacity": 0.5,
          "activeRadius": 10,
          "offsetAngle": 0,
          "labelWidth": 15,
          "border": true,
          "borderWidth": 3,
          "borderColor": "#FFFFFF"
        }
      }
    },
    "rose": {
      "type": "rose",
      "color": color$1,
      "padding": [5, 5, 5, 5],
      "legend": {
        "show": true,
        "position": "left",
        "lineHeight": 25
      },
      "extra": {
        "rose": {
          "type": "area",
          "minRadius": 50,
          "activeOpacity": 0.5,
          "activeRadius": 10,
          "offsetAngle": 0,
          "labelWidth": 15,
          "border": false,
          "borderWidth": 2,
          "borderColor": "#FFFFFF"
        }
      }
    },
    "word": {
      "type": "word",
      "color": color$1,
      "extra": {
        "word": {
          "type": "normal",
          "autoColors": false
        }
      }
    },
    "funnel": {
      "type": "funnel",
      "color": color$1,
      "padding": [15, 15, 0, 15],
      "extra": {
        "funnel": {
          "activeOpacity": 0.3,
          "activeWidth": 10,
          "border": true,
          "borderWidth": 2,
          "borderColor": "#FFFFFF",
          "fillOpacity": 1,
          "labelAlign": "right"
        }
      }
    },
    "map": {
      "type": "map",
      "color": color$1,
      "padding": [0, 0, 0, 0],
      "dataLabel": true,
      "extra": {
        "map": {
          "border": true,
          "borderWidth": 1,
          "borderColor": "#666666",
          "fillOpacity": 0.6,
          "activeBorderColor": "#F04864",
          "activeFillColor": "#FACC14",
          "activeFillOpacity": 1
        }
      }
    },
    "arcbar": {
      "type": "arcbar",
      "color": color$1,
      "title": {
        "name": "百分比",
        "fontSize": 25,
        "color": "#00FF00"
      },
      "subtitle": {
        "name": "默认标题",
        "fontSize": 15,
        "color": "#666666"
      },
      "extra": {
        "arcbar": {
          "type": "default",
          "width": 12,
          "backgroundColor": "#E9E9E9",
          "startAngle": 0.75,
          "endAngle": 0.25,
          "gap": 2
        }
      }
    },
    "line": {
      "type": "line",
      "color": color$1,
      "padding": [15, 10, 0, 15],
      "xAxis": {
        "disableGrid": true
      },
      "yAxis": {
        "gridType": "dash",
        "dashLength": 2
      },
      "legend": {},
      "extra": {
        "line": {
          "type": "straight",
          "width": 2,
          "activeType": "hollow"
        }
      }
    },
    "tline": {
      "type": "line",
      "color": color$1,
      "padding": [15, 10, 0, 15],
      "xAxis": {
        "disableGrid": false,
        "boundaryGap": "justify"
      },
      "yAxis": {
        "gridType": "dash",
        "dashLength": 2,
        "data": [
          {
            "min": 0,
            "max": 80
          }
        ]
      },
      "legend": {},
      "extra": {
        "line": {
          "type": "curve",
          "width": 2,
          "activeType": "hollow"
        }
      }
    },
    "tarea": {
      "type": "area",
      "color": color$1,
      "padding": [15, 10, 0, 15],
      "xAxis": {
        "disableGrid": true,
        "boundaryGap": "justify"
      },
      "yAxis": {
        "gridType": "dash",
        "dashLength": 2,
        "data": [
          {
            "min": 0,
            "max": 80
          }
        ]
      },
      "legend": {},
      "extra": {
        "area": {
          "type": "curve",
          "opacity": 0.2,
          "addLine": true,
          "width": 2,
          "gradient": true,
          "activeType": "hollow"
        }
      }
    },
    "column": {
      "type": "column",
      "color": color$1,
      "padding": [15, 15, 0, 5],
      "xAxis": {
        "disableGrid": true
      },
      "yAxis": {
        "data": [{ "min": 0 }]
      },
      "legend": {},
      "extra": {
        "column": {
          "type": "group",
          "width": 30,
          "activeBgColor": "#000000",
          "activeBgOpacity": 0.08
        }
      }
    },
    "mount": {
      "type": "mount",
      "color": color$1,
      "padding": [15, 15, 0, 5],
      "xAxis": {
        "disableGrid": true
      },
      "yAxis": {
        "data": [{ "min": 0 }]
      },
      "legend": {},
      "extra": {
        "mount": {
          "type": "mount",
          "widthRatio": 1.5
        }
      }
    },
    "bar": {
      "type": "bar",
      "color": color$1,
      "padding": [15, 30, 0, 5],
      "xAxis": {
        "boundaryGap": "justify",
        "disableGrid": false,
        "min": 0,
        "axisLine": false
      },
      "yAxis": {},
      "legend": {},
      "extra": {
        "bar": {
          "type": "group",
          "width": 30,
          "meterBorde": 1,
          "meterFillColor": "#FFFFFF",
          "activeBgColor": "#000000",
          "activeBgOpacity": 0.08
        }
      }
    },
    "area": {
      "type": "area",
      "color": color$1,
      "padding": [15, 15, 0, 15],
      "xAxis": {
        "disableGrid": true
      },
      "yAxis": {
        "gridType": "dash",
        "dashLength": 2
      },
      "legend": {},
      "extra": {
        "area": {
          "type": "straight",
          "opacity": 0.2,
          "addLine": true,
          "width": 2,
          "gradient": false,
          "activeType": "hollow"
        }
      }
    },
    "radar": {
      "type": "radar",
      "color": color$1,
      "padding": [5, 5, 5, 5],
      "dataLabel": false,
      "legend": {
        "show": true,
        "position": "right",
        "lineHeight": 25
      },
      "extra": {
        "radar": {
          "gridType": "radar",
          "gridColor": "#CCCCCC",
          "gridCount": 3,
          "opacity": 0.2,
          "max": 200,
          "labelShow": true
        }
      }
    },
    "gauge": {
      "type": "gauge",
      "color": color$1,
      "title": {
        "name": "66Km/H",
        "fontSize": 25,
        "color": "#2fc25b",
        "offsetY": 50
      },
      "subtitle": {
        "name": "实时速度",
        "fontSize": 15,
        "color": "#1890ff",
        "offsetY": -50
      },
      "extra": {
        "gauge": {
          "type": "default",
          "width": 30,
          "labelColor": "#666666",
          "startAngle": 0.75,
          "endAngle": 0.25,
          "startNumber": 0,
          "endNumber": 100,
          "labelFormat": "",
          "splitLine": {
            "fixRadius": 0,
            "splitNumber": 10,
            "width": 30,
            "color": "#FFFFFF",
            "childNumber": 5,
            "childWidth": 12
          },
          "pointer": {
            "width": 24,
            "color": "auto"
          }
        }
      }
    },
    "candle": {
      "type": "candle",
      "color": color$1,
      "padding": [15, 15, 0, 15],
      "enableScroll": true,
      "enableMarkLine": true,
      "dataLabel": false,
      "xAxis": {
        "labelCount": 4,
        "itemCount": 40,
        "disableGrid": true,
        "gridColor": "#CCCCCC",
        "gridType": "solid",
        "dashLength": 4,
        "scrollShow": true,
        "scrollAlign": "left",
        "scrollColor": "#A6A6A6",
        "scrollBackgroundColor": "#EFEBEF"
      },
      "yAxis": {},
      "legend": {},
      "extra": {
        "candle": {
          "color": {
            "upLine": "#f04864",
            "upFill": "#f04864",
            "downLine": "#2fc25b",
            "downFill": "#2fc25b"
          },
          "average": {
            "show": true,
            "name": ["MA5", "MA10", "MA30"],
            "day": [5, 10, 20],
            "color": ["#1890ff", "#2fc25b", "#facc14"]
          }
        },
        "markLine": {
          "type": "dash",
          "dashLength": 5,
          "data": [
            {
              "value": 2150,
              "lineColor": "#f04864",
              "showLabel": true
            },
            {
              "value": 2350,
              "lineColor": "#f04864",
              "showLabel": true
            }
          ]
        }
      }
    },
    "mix": {
      "type": "mix",
      "color": color$1,
      "padding": [15, 15, 0, 15],
      "xAxis": {
        "disableGrid": true
      },
      "yAxis": {
        "disabled": false,
        "disableGrid": false,
        "splitNumber": 5,
        "gridType": "dash",
        "dashLength": 4,
        "gridColor": "#CCCCCC",
        "padding": 10,
        "showTitle": true,
        "data": []
      },
      "legend": {},
      "extra": {
        "mix": {
          "column": {
            "width": 20
          }
        }
      }
    },
    "scatter": {
      "type": "scatter",
      "color": color$1,
      "padding": [15, 15, 0, 15],
      "dataLabel": false,
      "xAxis": {
        "disableGrid": false,
        "gridType": "dash",
        "splitNumber": 5,
        "boundaryGap": "justify",
        "min": 0
      },
      "yAxis": {
        "disableGrid": false,
        "gridType": "dash"
      },
      "legend": {},
      "extra": {
        "scatter": {}
      }
    },
    "bubble": {
      "type": "bubble",
      "color": color$1,
      "padding": [15, 15, 0, 15],
      "xAxis": {
        "disableGrid": false,
        "gridType": "dash",
        "splitNumber": 5,
        "boundaryGap": "justify",
        "min": 0,
        "max": 250
      },
      "yAxis": {
        "disableGrid": false,
        "gridType": "dash",
        "data": [{
          "min": 0,
          "max": 150
        }]
      },
      "legend": {},
      "extra": {
        "bubble": {
          "border": 2,
          "opacity": 0.5
        }
      }
    }
  };
  const color = ["#1890FF", "#91CB74", "#FAC858", "#EE6666", "#73C0DE", "#3CA272", "#FC8452", "#9A60B4", "#ea7ccc"];
  const cfe = {
    //demotype为自定义图表类型
    "type": ["pie", "ring", "rose", "funnel", "line", "column", "area", "radar", "gauge", "candle", "demotype"],
    //增加自定义图表类型，如果需要categories，请在这里加入您的图表类型例如最后的"demotype"
    "categories": ["line", "column", "area", "radar", "gauge", "candle", "demotype"],
    //instance为实例变量承载属性，option为eopts承载属性，不要删除
    "instance": {},
    "option": {},
    //下面是自定义format配置，因除H5端外的其他端无法通过props传递函数，只能通过此属性对应下标的方式来替换
    "formatter": {
      "tooltipDemo1": function(res) {
        let result = "";
        for (let i2 in res) {
          if (i2 == 0) {
            result += res[i2].axisValueLabel + "年销售额";
          }
          let value = "--";
          if (res[i2].data !== null) {
            value = res[i2].data;
          }
          result += "<br/>" + res[i2].marker + res[i2].seriesName + "：" + value + " 万元";
        }
        return result;
      },
      legendFormat: function(name2) {
        return "自定义图例+" + name2;
      },
      yAxisFormatDemo: function(value, index) {
        return value + "元";
      },
      seriesFormatDemo: function(res) {
        return res.name + "年" + res.value + "元";
      }
    },
    //这里演示了自定义您的图表类型的option，可以随意命名，之后在组件上 type="demotype" 后，组件会调用这个花括号里的option，如果组件上还存在eopts参数，会将demotype与eopts中option合并后渲染图表。
    "demotype": {
      "color": color
      //在这里填写echarts的option即可
    },
    //下面是自定义配置，请添加项目所需的通用配置
    "column": {
      "color": color,
      "title": {
        "text": ""
      },
      "tooltip": {
        "trigger": "axis"
      },
      "grid": {
        "top": 30,
        "bottom": 50,
        "right": 15,
        "left": 40
      },
      "legend": {
        "bottom": "left"
      },
      "toolbox": {
        "show": false
      },
      "xAxis": {
        "type": "category",
        "axisLabel": {
          "color": "#666666"
        },
        "axisLine": {
          "lineStyle": {
            "color": "#CCCCCC"
          }
        },
        "boundaryGap": true,
        "data": []
      },
      "yAxis": {
        "type": "value",
        "axisTick": {
          "show": false
        },
        "axisLabel": {
          "color": "#666666"
        },
        "axisLine": {
          "lineStyle": {
            "color": "#CCCCCC"
          }
        }
      },
      "seriesTemplate": {
        "name": "",
        "type": "bar",
        "data": [],
        "barwidth": 20,
        "label": {
          "show": true,
          "color": "#666666",
          "position": "top"
        }
      }
    },
    "line": {
      "color": color,
      "title": {
        "text": ""
      },
      "tooltip": {
        "trigger": "axis"
      },
      "grid": {
        "top": 30,
        "bottom": 50,
        "right": 15,
        "left": 40
      },
      "legend": {
        "bottom": "left"
      },
      "toolbox": {
        "show": false
      },
      "xAxis": {
        "type": "category",
        "axisLabel": {
          "color": "#666666"
        },
        "axisLine": {
          "lineStyle": {
            "color": "#CCCCCC"
          }
        },
        "boundaryGap": true,
        "data": []
      },
      "yAxis": {
        "type": "value",
        "axisTick": {
          "show": false
        },
        "axisLabel": {
          "color": "#666666"
        },
        "axisLine": {
          "lineStyle": {
            "color": "#CCCCCC"
          }
        }
      },
      "seriesTemplate": {
        "name": "",
        "type": "line",
        "data": [],
        "barwidth": 20,
        "label": {
          "show": true,
          "color": "#666666",
          "position": "top"
        }
      }
    },
    "area": {
      "color": color,
      "title": {
        "text": ""
      },
      "tooltip": {
        "trigger": "axis"
      },
      "grid": {
        "top": 30,
        "bottom": 50,
        "right": 15,
        "left": 40
      },
      "legend": {
        "bottom": "left"
      },
      "toolbox": {
        "show": false
      },
      "xAxis": {
        "type": "category",
        "axisLabel": {
          "color": "#666666"
        },
        "axisLine": {
          "lineStyle": {
            "color": "#CCCCCC"
          }
        },
        "boundaryGap": true,
        "data": []
      },
      "yAxis": {
        "type": "value",
        "axisTick": {
          "show": false
        },
        "axisLabel": {
          "color": "#666666"
        },
        "axisLine": {
          "lineStyle": {
            "color": "#CCCCCC"
          }
        }
      },
      "seriesTemplate": {
        "name": "",
        "type": "line",
        "data": [],
        "areaStyle": {},
        "label": {
          "show": true,
          "color": "#666666",
          "position": "top"
        }
      }
    },
    "pie": {
      "color": color,
      "title": {
        "text": ""
      },
      "tooltip": {
        "trigger": "item"
      },
      "grid": {
        "top": 40,
        "bottom": 30,
        "right": 15,
        "left": 15
      },
      "legend": {
        "bottom": "left"
      },
      "seriesTemplate": {
        "name": "",
        "type": "pie",
        "data": [],
        "radius": "50%",
        "label": {
          "show": true,
          "color": "#666666",
          "position": "top"
        }
      }
    },
    "ring": {
      "color": color,
      "title": {
        "text": ""
      },
      "tooltip": {
        "trigger": "item"
      },
      "grid": {
        "top": 40,
        "bottom": 30,
        "right": 15,
        "left": 15
      },
      "legend": {
        "bottom": "left"
      },
      "seriesTemplate": {
        "name": "",
        "type": "pie",
        "data": [],
        "radius": ["40%", "70%"],
        "avoidLabelOverlap": false,
        "label": {
          "show": true,
          "color": "#666666",
          "position": "top"
        },
        "labelLine": {
          "show": true
        }
      }
    },
    "rose": {
      "color": color,
      "title": {
        "text": ""
      },
      "tooltip": {
        "trigger": "item"
      },
      "legend": {
        "top": "bottom"
      },
      "seriesTemplate": {
        "name": "",
        "type": "pie",
        "data": [],
        "radius": "55%",
        "center": ["50%", "50%"],
        "roseType": "area"
      }
    },
    "funnel": {
      "color": color,
      "title": {
        "text": ""
      },
      "tooltip": {
        "trigger": "item",
        "formatter": "{b} : {c}%"
      },
      "legend": {
        "top": "bottom"
      },
      "seriesTemplate": {
        "name": "",
        "type": "funnel",
        "left": "10%",
        "top": 60,
        "bottom": 60,
        "width": "80%",
        "min": 0,
        "max": 100,
        "minSize": "0%",
        "maxSize": "100%",
        "sort": "descending",
        "gap": 2,
        "label": {
          "show": true,
          "position": "inside"
        },
        "labelLine": {
          "length": 10,
          "lineStyle": {
            "width": 1,
            "type": "solid"
          }
        },
        "itemStyle": {
          "bordercolor": "#fff",
          "borderwidth": 1
        },
        "emphasis": {
          "label": {
            "fontSize": 20
          }
        },
        "data": []
      }
    },
    "gauge": {
      "color": color,
      "tooltip": {
        "formatter": "{a} <br/>{b} : {c}%"
      },
      "seriesTemplate": {
        "name": "业务指标",
        "type": "gauge",
        "detail": { "formatter": "{value}%" },
        "data": [{ "value": 50, "name": "完成率" }]
      }
    },
    "candle": {
      "xAxis": {
        "data": []
      },
      "yAxis": {},
      "color": color,
      "title": {
        "text": ""
      },
      "dataZoom": [
        {
          "type": "inside",
          "xAxisIndex": [0, 1],
          "start": 10,
          "end": 100
        },
        {
          "show": true,
          "xAxisIndex": [0, 1],
          "type": "slider",
          "bottom": 10,
          "start": 10,
          "end": 100
        }
      ],
      "seriesTemplate": {
        "name": "",
        "type": "k",
        "data": []
      }
    }
  };
  const block0 = (Comp) => {
    (Comp.$renderjs || (Comp.$renderjs = [])).push("rdcharts");
    (Comp.$renderjsModules || (Comp.$renderjsModules = {}))["rdcharts"] = "f9cb76fc";
  };
  function deepCloneAssign(origin = {}, ...args) {
    for (let i2 in args) {
      for (let key2 in args[i2]) {
        if (args[i2].hasOwnProperty(key2)) {
          origin[key2] = args[i2][key2] && typeof args[i2][key2] === "object" ? deepCloneAssign(Array.isArray(args[i2][key2]) ? [] : {}, origin[key2], args[i2][key2]) : args[i2][key2];
        }
      }
    }
    return origin;
  }
  function formatterAssign(args, formatter) {
    for (let key2 in args) {
      if (args.hasOwnProperty(key2) && args[key2] !== null && typeof args[key2] === "object") {
        formatterAssign(args[key2], formatter);
      } else if (key2 === "format" && typeof args[key2] === "string") {
        args["formatter"] = formatter[args[key2]] ? formatter[args[key2]] : void 0;
      }
    }
    return args;
  }
  function getFormatDate(date) {
    var seperator = "-";
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var strDate = date.getDate();
    if (month >= 1 && month <= 9) {
      month = "0" + month;
    }
    if (strDate >= 0 && strDate <= 9) {
      strDate = "0" + strDate;
    }
    var currentdate = year + seperator + month + seperator + strDate;
    return currentdate;
  }
  const _sfc_main$j = {
    name: "qiun-data-charts",
    mixins: [Vs.mixinDatacom],
    props: {
      type: {
        type: String,
        default: null
      },
      canvasId: {
        type: String,
        default: "uchartsid"
      },
      canvas2d: {
        type: Boolean,
        default: false
      },
      background: {
        type: String,
        default: "rgba(0,0,0,0)"
      },
      animation: {
        type: Boolean,
        default: true
      },
      chartData: {
        type: Object,
        default() {
          return {
            categories: [],
            series: []
          };
        }
      },
      opts: {
        type: Object,
        default() {
          return {};
        }
      },
      eopts: {
        type: Object,
        default() {
          return {};
        }
      },
      loadingType: {
        type: Number,
        default: 2
      },
      errorShow: {
        type: Boolean,
        default: true
      },
      errorReload: {
        type: Boolean,
        default: true
      },
      errorMessage: {
        type: String,
        default: null
      },
      inScrollView: {
        type: Boolean,
        default: false
      },
      reshow: {
        type: Boolean,
        default: false
      },
      reload: {
        type: Boolean,
        default: false
      },
      disableScroll: {
        type: Boolean,
        default: false
      },
      optsWatch: {
        type: Boolean,
        default: true
      },
      onzoom: {
        type: Boolean,
        default: false
      },
      ontap: {
        type: Boolean,
        default: true
      },
      ontouch: {
        type: Boolean,
        default: false
      },
      onmouse: {
        type: Boolean,
        default: true
      },
      onmovetip: {
        type: Boolean,
        default: false
      },
      echartsH5: {
        type: Boolean,
        default: false
      },
      echartsApp: {
        type: Boolean,
        default: false
      },
      tooltipShow: {
        type: Boolean,
        default: true
      },
      tooltipFormat: {
        type: String,
        default: void 0
      },
      tooltipCustom: {
        type: Object,
        default: void 0
      },
      startDate: {
        type: String,
        default: void 0
      },
      endDate: {
        type: String,
        default: void 0
      },
      textEnum: {
        type: Array,
        default() {
          return [];
        }
      },
      groupEnum: {
        type: Array,
        default() {
          return [];
        }
      },
      pageScrollTop: {
        type: Number,
        default: 0
      },
      directory: {
        type: String,
        default: "/"
      },
      tapLegend: {
        type: Boolean,
        default: true
      },
      menus: {
        type: Array,
        default() {
          return [];
        }
      }
    },
    data() {
      return {
        cid: "uchartsid",
        inWx: false,
        inAli: false,
        inTt: false,
        inBd: false,
        inH5: false,
        inApp: false,
        inWin: false,
        type2d: true,
        disScroll: false,
        openmouse: false,
        pixel: 1,
        cWidth: 375,
        cHeight: 250,
        showchart: false,
        echarts: false,
        echartsResize: {
          state: false
        },
        uchartsOpts: {},
        echartsOpts: {},
        drawData: {},
        lastDrawTime: null
      };
    },
    created() {
      this.cid = this.canvasId;
      if (this.canvasId == "uchartsid" || this.canvasId == "") {
        let t2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        let len2 = t2.length;
        let id2 = "";
        for (let i2 = 0; i2 < 32; i2++) {
          id2 += t2.charAt(Math.floor(Math.random() * len2));
        }
        this.cid = id2;
      }
      const systemInfo = uni.getSystemInfoSync();
      if (systemInfo.platform === "windows" || systemInfo.platform === "mac") {
        this.inWin = true;
      }
      this.type2d = false;
      this.disScroll = this.disableScroll;
    },
    mounted() {
      this.inApp = true;
      if (this.echartsApp === true) {
        this.echarts = true;
        this.openmouse = false;
      }
      this.$nextTick(() => {
        this.beforeInit();
      });
    },
    destroyed() {
      if (this.echarts === true) {
        delete cfe.option[this.cid];
        delete cfe.instance[this.cid];
      } else {
        delete cfu.option[this.cid];
        delete cfu.instance[this.cid];
      }
      uni.offWindowResize(() => {
      });
    },
    watch: {
      chartDataProps: {
        handler(val, oldval) {
          if (typeof val === "object") {
            if (JSON.stringify(val) !== JSON.stringify(oldval)) {
              this._clearChart();
              if (val.series && val.series.length > 0) {
                this.beforeInit();
              } else {
                this.mixinDatacomLoading = true;
                this.showchart = false;
                this.mixinDatacomErrorMessage = null;
              }
            }
          } else {
            this.mixinDatacomLoading = false;
            this._clearChart();
            this.showchart = false;
            this.mixinDatacomErrorMessage = "参数错误：chartData数据类型错误";
          }
        },
        immediate: false,
        deep: true
      },
      localdata: {
        handler(val, oldval) {
          if (JSON.stringify(val) !== JSON.stringify(oldval)) {
            if (val.length > 0) {
              this.beforeInit();
            } else {
              this.mixinDatacomLoading = true;
              this._clearChart();
              this.showchart = false;
              this.mixinDatacomErrorMessage = null;
            }
          }
        },
        immediate: false,
        deep: true
      },
      optsProps: {
        handler(val, oldval) {
          if (typeof val === "object") {
            if (JSON.stringify(val) !== JSON.stringify(oldval) && this.echarts === false && this.optsWatch == true) {
              this.checkData(this.drawData);
            }
          } else {
            this.mixinDatacomLoading = false;
            this._clearChart();
            this.showchart = false;
            this.mixinDatacomErrorMessage = "参数错误：opts数据类型错误";
          }
        },
        immediate: false,
        deep: true
      },
      eoptsProps: {
        handler(val, oldval) {
          if (typeof val === "object") {
            if (JSON.stringify(val) !== JSON.stringify(oldval) && this.echarts === true) {
              this.checkData(this.drawData);
            }
          } else {
            this.mixinDatacomLoading = false;
            this.showchart = false;
            this.mixinDatacomErrorMessage = "参数错误：eopts数据类型错误";
          }
        },
        immediate: false,
        deep: true
      },
      reshow(val, oldval) {
        if (val === true && this.mixinDatacomLoading === false) {
          setTimeout(() => {
            this.mixinDatacomErrorMessage = null;
            this.echartsResize.state = !this.echartsResize.state;
            this.checkData(this.drawData);
          }, 200);
        }
      },
      reload(val, oldval) {
        if (val === true) {
          this.showchart = false;
          this.mixinDatacomErrorMessage = null;
          this.reloading();
        }
      },
      mixinDatacomErrorMessage(val, oldval) {
        if (val) {
          this.emitMsg({ name: "error", params: { type: "error", errorShow: this.errorShow, msg: val, id: this.cid } });
          if (this.errorShow) {
            formatAppLog("log", "at uni_modules/qiun-data-charts/components/qiun-data-charts/qiun-data-charts.vue:611", "[秋云图表组件]" + val);
          }
        }
      },
      errorMessage(val, oldval) {
        if (val && this.errorShow && val !== null && val !== "null" && val !== "") {
          this.showchart = false;
          this.mixinDatacomLoading = false;
          this.mixinDatacomErrorMessage = val;
        } else {
          this.showchart = false;
          this.mixinDatacomErrorMessage = null;
          this.reloading();
        }
      }
    },
    computed: {
      optsProps() {
        return JSON.parse(JSON.stringify(this.opts));
      },
      eoptsProps() {
        return JSON.parse(JSON.stringify(this.eopts));
      },
      chartDataProps() {
        return JSON.parse(JSON.stringify(this.chartData));
      }
    },
    methods: {
      beforeInit() {
        this.mixinDatacomErrorMessage = null;
        if (typeof this.chartData === "object" && this.chartData != null && this.chartData.series !== void 0 && this.chartData.series.length > 0) {
          this.drawData = deepCloneAssign({}, this.chartData);
          this.mixinDatacomLoading = false;
          this.showchart = true;
          this.checkData(this.chartData);
        } else if (this.localdata.length > 0) {
          this.mixinDatacomLoading = false;
          this.showchart = true;
          this.localdataInit(this.localdata);
        } else if (this.collection !== "") {
          this.mixinDatacomLoading = false;
          this.getCloudData();
        } else {
          this.mixinDatacomLoading = true;
        }
      },
      localdataInit(resdata) {
        if (this.groupEnum.length > 0) {
          for (let i2 = 0; i2 < resdata.length; i2++) {
            for (let j2 = 0; j2 < this.groupEnum.length; j2++) {
              if (resdata[i2].group === this.groupEnum[j2].value) {
                resdata[i2].group = this.groupEnum[j2].text;
              }
            }
          }
        }
        if (this.textEnum.length > 0) {
          for (let i2 = 0; i2 < resdata.length; i2++) {
            for (let j2 = 0; j2 < this.textEnum.length; j2++) {
              if (resdata[i2].text === this.textEnum[j2].value) {
                resdata[i2].text = this.textEnum[j2].text;
              }
            }
          }
        }
        let needCategories = false;
        let tmpData = { categories: [], series: [] };
        let tmpcategories = [];
        let tmpseries = [];
        if (this.echarts === true) {
          needCategories = cfe.categories.includes(this.type);
        } else {
          needCategories = cfu.categories.includes(this.type);
        }
        if (needCategories === true) {
          if (this.chartData && this.chartData.categories && this.chartData.categories.length > 0) {
            tmpcategories = this.chartData.categories;
          } else {
            if (this.startDate && this.endDate) {
              let idate = new Date(this.startDate);
              let edate = new Date(this.endDate);
              while (idate <= edate) {
                tmpcategories.push(getFormatDate(idate));
                idate = idate.setDate(idate.getDate() + 1);
                idate = new Date(idate);
              }
            } else {
              let tempckey = {};
              resdata.map(function(item, index) {
                if (item.text != void 0 && !tempckey[item.text]) {
                  tmpcategories.push(item.text);
                  tempckey[item.text] = true;
                }
              });
            }
          }
          tmpData.categories = tmpcategories;
        }
        let tempskey = {};
        resdata.map(function(item, index) {
          if (item.group != void 0 && !tempskey[item.group]) {
            tmpseries.push({ name: item.group, data: [] });
            tempskey[item.group] = true;
          }
        });
        if (tmpseries.length == 0) {
          tmpseries = [{ name: "默认分组", data: [] }];
          if (needCategories === true) {
            for (let j2 = 0; j2 < tmpcategories.length; j2++) {
              let seriesdata = 0;
              for (let i2 = 0; i2 < resdata.length; i2++) {
                if (resdata[i2].text == tmpcategories[j2]) {
                  seriesdata = resdata[i2].value;
                }
              }
              tmpseries[0].data.push(seriesdata);
            }
          } else {
            for (let i2 = 0; i2 < resdata.length; i2++) {
              tmpseries[0].data.push({ "name": resdata[i2].text, "value": resdata[i2].value });
            }
          }
        } else {
          for (let k2 = 0; k2 < tmpseries.length; k2++) {
            if (tmpcategories.length > 0) {
              for (let j2 = 0; j2 < tmpcategories.length; j2++) {
                let seriesdata = 0;
                for (let i2 = 0; i2 < resdata.length; i2++) {
                  if (tmpseries[k2].name == resdata[i2].group && resdata[i2].text == tmpcategories[j2]) {
                    seriesdata = resdata[i2].value;
                  }
                }
                tmpseries[k2].data.push(seriesdata);
              }
            } else {
              for (let i2 = 0; i2 < resdata.length; i2++) {
                if (tmpseries[k2].name == resdata[i2].group) {
                  tmpseries[k2].data.push(resdata[i2].value);
                }
              }
            }
          }
        }
        tmpData.series = tmpseries;
        this.drawData = deepCloneAssign({}, tmpData);
        this.checkData(tmpData);
      },
      reloading() {
        if (this.errorReload === false) {
          return;
        }
        this.showchart = false;
        this.mixinDatacomErrorMessage = null;
        if (this.collection !== "") {
          this.mixinDatacomLoading = false;
          this.onMixinDatacomPropsChange(true);
        } else {
          this.beforeInit();
        }
      },
      checkData(anyData) {
        let cid = this.cid;
        if (this.echarts === true) {
          cfe.option[cid] = deepCloneAssign({}, this.eopts);
          cfe.option[cid].id = cid;
          cfe.option[cid].type = this.type;
        } else {
          if (this.type && cfu.type.includes(this.type)) {
            cfu.option[cid] = deepCloneAssign({}, cfu[this.type], this.opts);
            cfu.option[cid].canvasId = cid;
          } else {
            this.mixinDatacomLoading = false;
            this.showchart = false;
            this.mixinDatacomErrorMessage = "参数错误：props参数中type类型不正确";
          }
        }
        let newData = deepCloneAssign({}, anyData);
        if (newData.series !== void 0 && newData.series.length > 0) {
          this.mixinDatacomErrorMessage = null;
          if (this.echarts === true) {
            cfe.option[cid].chartData = newData;
            this.$nextTick(() => {
              this.init();
            });
          } else {
            cfu.option[cid].categories = newData.categories;
            cfu.option[cid].series = newData.series;
            this.$nextTick(() => {
              this.init();
            });
          }
        }
      },
      resizeHandler() {
        let currTime = Date.now();
        let lastDrawTime = this.lastDrawTime ? this.lastDrawTime : currTime - 3e3;
        let duration = currTime - lastDrawTime;
        if (duration < 1e3) return;
        uni.createSelectorQuery().in(this).select("#ChartBoxId" + this.cid).boundingClientRect((data) => {
          this.showchart = true;
          if (data.width > 0 && data.height > 0) {
            if (data.width !== this.cWidth || data.height !== this.cHeight) {
              this.checkData(this.drawData);
            }
          }
        }).exec();
      },
      getCloudData() {
        if (this.mixinDatacomLoading == true) {
          return;
        }
        this.mixinDatacomLoading = true;
        this.mixinDatacomGet().then((res) => {
          this.mixinDatacomResData = res.result.data;
          this.localdataInit(this.mixinDatacomResData);
        }).catch((err) => {
          this.mixinDatacomLoading = false;
          this.showchart = false;
          this.mixinDatacomErrorMessage = "请求错误：" + err;
        });
      },
      onMixinDatacomPropsChange(needReset, changed) {
        if (needReset == true && this.collection !== "") {
          this.showchart = false;
          this.mixinDatacomErrorMessage = null;
          this._clearChart();
          this.getCloudData();
        }
      },
      _clearChart() {
        let cid = this.cid;
        if (this.echarts !== true && cfu.option[cid] && cfu.option[cid].context) {
          const ctx = cfu.option[cid].context;
          if (typeof ctx === "object" && !!!cfu.option[cid].update) {
            ctx.clearRect(0, 0, this.cWidth * this.pixel, this.cHeight * this.pixel);
            ctx.draw();
          }
        }
      },
      init() {
        let cid = this.cid;
        uni.createSelectorQuery().in(this).select("#ChartBoxId" + cid).boundingClientRect((data) => {
          if (data.width > 0 && data.height > 0) {
            this.mixinDatacomLoading = false;
            this.showchart = true;
            this.lastDrawTime = Date.now();
            this.cWidth = data.width;
            this.cHeight = data.height;
            if (this.echarts !== true) {
              cfu.option[cid].background = this.background == "rgba(0,0,0,0)" ? "#FFFFFF" : this.background;
              cfu.option[cid].canvas2d = this.type2d;
              cfu.option[cid].pixelRatio = this.pixel;
              cfu.option[cid].animation = this.animation;
              cfu.option[cid].width = data.width * this.pixel;
              cfu.option[cid].height = data.height * this.pixel;
              cfu.option[cid].onzoom = this.onzoom;
              cfu.option[cid].ontap = this.ontap;
              cfu.option[cid].ontouch = this.ontouch;
              cfu.option[cid].onmouse = this.openmouse;
              cfu.option[cid].onmovetip = this.onmovetip;
              cfu.option[cid].tooltipShow = this.tooltipShow;
              cfu.option[cid].tooltipFormat = this.tooltipFormat;
              cfu.option[cid].tooltipCustom = this.tooltipCustom;
              cfu.option[cid].inScrollView = this.inScrollView;
              cfu.option[cid].lastDrawTime = this.lastDrawTime;
              cfu.option[cid].tapLegend = this.tapLegend;
            }
            if (this.inH5 || this.inApp) {
              if (this.echarts == true) {
                cfe.option[cid].ontap = this.ontap;
                cfe.option[cid].onmouse = this.openmouse;
                cfe.option[cid].tooltipShow = this.tooltipShow;
                cfe.option[cid].tooltipFormat = this.tooltipFormat;
                cfe.option[cid].tooltipCustom = this.tooltipCustom;
                cfe.option[cid].lastDrawTime = this.lastDrawTime;
                this.echartsOpts = deepCloneAssign({}, cfe.option[cid]);
              } else {
                cfu.option[cid].rotateLock = cfu.option[cid].rotate;
                this.uchartsOpts = deepCloneAssign({}, cfu.option[cid]);
              }
            } else {
              cfu.option[cid] = formatterAssign(cfu.option[cid], cfu.formatter);
              this.mixinDatacomErrorMessage = null;
              this.mixinDatacomLoading = false;
              this.showchart = true;
              this.$nextTick(() => {
                if (this.type2d === true) {
                  const query = uni.createSelectorQuery().in(this);
                  query.select("#" + cid).fields({ node: true, size: true }).exec((res) => {
                    if (res[0]) {
                      const canvas = res[0].node;
                      const ctx = canvas.getContext("2d");
                      cfu.option[cid].context = ctx;
                      cfu.option[cid].rotateLock = cfu.option[cid].rotate;
                      if (cfu.instance[cid] && cfu.option[cid] && cfu.option[cid].update === true) {
                        this._updataUChart(cid);
                      } else {
                        canvas.width = data.width * this.pixel;
                        canvas.height = data.height * this.pixel;
                        canvas._width = data.width * this.pixel;
                        canvas._height = data.height * this.pixel;
                        setTimeout(() => {
                          cfu.option[cid].context.restore();
                          cfu.option[cid].context.save();
                          this._newChart(cid);
                        }, 100);
                      }
                    } else {
                      this.showchart = false;
                      this.mixinDatacomErrorMessage = "参数错误：开启2d模式后，未获取到dom节点，canvas-id:" + cid;
                    }
                  });
                } else {
                  if (this.inAli) {
                    cfu.option[cid].rotateLock = cfu.option[cid].rotate;
                  }
                  cfu.option[cid].context = uni.createCanvasContext(cid, this);
                  if (cfu.instance[cid] && cfu.option[cid] && cfu.option[cid].update === true) {
                    this._updataUChart(cid);
                  } else {
                    setTimeout(() => {
                      cfu.option[cid].context.restore();
                      cfu.option[cid].context.save();
                      this._newChart(cid);
                    }, 100);
                  }
                }
              });
            }
          } else {
            this.mixinDatacomLoading = false;
            this.showchart = false;
            if (this.reshow == true) {
              this.mixinDatacomErrorMessage = "布局错误：未获取到父元素宽高尺寸！canvas-id:" + cid;
            }
          }
        }).exec();
      },
      saveImage() {
        uni.canvasToTempFilePath({
          canvasId: this.cid,
          success: (res) => {
            uni.saveImageToPhotosAlbum({
              filePath: res.tempFilePath,
              success: function() {
                uni.showToast({
                  title: "保存成功",
                  duration: 2e3
                });
              }
            });
          }
        }, this);
      },
      getImage() {
        if (this.type2d == false) {
          uni.canvasToTempFilePath({
            canvasId: this.cid,
            success: (res) => {
              this.emitMsg({ name: "getImage", params: { type: "getImage", base64: res.tempFilePath } });
            }
          }, this);
        } else {
          const query = uni.createSelectorQuery().in(this);
          query.select("#" + this.cid).fields({ node: true, size: true }).exec((res) => {
            if (res[0]) {
              const canvas = res[0].node;
              this.emitMsg({ name: "getImage", params: { type: "getImage", base64: canvas.toDataURL("image/png") } });
            }
          });
        }
      },
      _error(e2) {
        this.mixinDatacomErrorMessage = e2.detail.errMsg;
      },
      emitMsg(msg) {
        this.$emit(msg.name, msg.params);
      },
      getRenderType() {
        if (this.echarts === true && this.mixinDatacomLoading === false) {
          this.beforeInit();
        }
      },
      toJSON() {
        return this;
      }
    }
  };
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_qiun_loading = resolveEasycom(vue$1.resolveDynamicComponent("qiun-loading"), __easycom_0$2);
    const _component_qiun_error = resolveEasycom(vue$1.resolveDynamicComponent("qiun-error"), __easycom_1);
    return vue$1.openBlock(), vue$1.createElementBlock("view", {
      class: "chartsview",
      id: "ChartBoxId" + $data.cid
    }, [
      _ctx.mixinDatacomLoading ? (vue$1.openBlock(), vue$1.createElementBlock("view", { key: 0 }, [
        vue$1.createCommentVNode(" 自定义加载状态，请改这里 "),
        vue$1.createVNode(_component_qiun_loading, { loadingType: $props.loadingType }, null, 8, ["loadingType"])
      ])) : vue$1.createCommentVNode("v-if", true),
      _ctx.mixinDatacomErrorMessage && $props.errorShow ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 1,
        onClick: _cache[0] || (_cache[0] = (...args) => $options.reloading && $options.reloading(...args))
      }, [
        vue$1.createCommentVNode(" 自定义错误提示，请改这里 "),
        vue$1.createVNode(_component_qiun_error, { errorMessage: $props.errorMessage }, null, 8, ["errorMessage"])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" APP和H5采用renderjs渲染图表 "),
      $data.echarts ? vue$1.withDirectives((vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 2,
        style: vue$1.normalizeStyle([{ background: $props.background }, { "width": "100%", "height": "100%" }]),
        "data-directory": $props.directory,
        id: "EC" + $data.cid,
        prop: vue$1.wp($data.echartsOpts),
        "change:prop": _ctx.rdcharts.ecinit,
        resize: vue$1.wp($data.echartsResize),
        "change:resize": _ctx.rdcharts.ecresize
      }, null, 12, ["data-directory", "id", "prop", "change:prop", "resize", "change:resize"])), [
        [vue$1.vShow, $data.showchart]
      ]) : (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 3,
        onClick: _cache[2] || (_cache[2] = (...args) => _ctx.rdcharts.tap && _ctx.rdcharts.tap(...args)),
        onMousemove: _cache[3] || (_cache[3] = (...args) => _ctx.rdcharts.mouseMove && _ctx.rdcharts.mouseMove(...args)),
        onMousedown: _cache[4] || (_cache[4] = (...args) => _ctx.rdcharts.mouseDown && _ctx.rdcharts.mouseDown(...args)),
        onMouseup: _cache[5] || (_cache[5] = (...args) => _ctx.rdcharts.mouseUp && _ctx.rdcharts.mouseUp(...args)),
        onTouchstart: _cache[6] || (_cache[6] = (...args) => _ctx.rdcharts.touchStart && _ctx.rdcharts.touchStart(...args)),
        onTouchmove: _cache[7] || (_cache[7] = (...args) => _ctx.rdcharts.touchMove && _ctx.rdcharts.touchMove(...args)),
        onTouchend: _cache[8] || (_cache[8] = (...args) => _ctx.rdcharts.touchEnd && _ctx.rdcharts.touchEnd(...args)),
        id: "UC" + $data.cid,
        prop: vue$1.wp($data.uchartsOpts),
        "change:prop": _ctx.rdcharts.ucinit
      }, [
        vue$1.withDirectives(vue$1.createElementVNode("canvas", {
          id: $data.cid,
          canvasId: $data.cid,
          style: vue$1.normalizeStyle({ width: $data.cWidth + "px", height: $data.cHeight + "px", background: $props.background }),
          "disable-scroll": $props.disableScroll,
          onError: _cache[1] || (_cache[1] = (...args) => $options._error && $options._error(...args))
        }, null, 44, ["id", "canvasId", "disable-scroll"]), [
          [vue$1.vShow, $data.showchart]
        ])
      ], 40, ["id", "prop", "change:prop"])),
      vue$1.createCommentVNode(" 支付宝小程序 "),
      vue$1.createCommentVNode(" 其他小程序通过vue渲染图表 ")
    ], 8, ["id"]);
  }
  if (typeof block0 === "function") block0(_sfc_main$j);
  const __easycom_0$1 = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$i], ["__scopeId", "data-v-4f90b8bf"], ["__file", "D:/ty/medical-device/src/uni_modules/qiun-data-charts/components/qiun-data-charts/qiun-data-charts.vue"]]);
  const _sfc_main$i = {
    components: {
      ContentBox
    },
    data() {
      return {
        chartData: {},
        //您可以通过修改 config-ucharts.js 文件中下标为 ['gauge'] 的节点来配置全局默认参数，如都是默认参数，此处可以不传 opts 。实际应用过程中 opts 只需传入与全局默认参数中不一致的【某一个属性】即可实现同类型的图表显示不同的样式，达到页面简洁的需求。
        opts: {
          color: [
            "#1890FF",
            "#91CB74",
            "#FAC858",
            "#EE6666",
            "#73C0DE",
            "#3CA272",
            "#FC8452",
            "#9A60B4",
            "#ea7ccc"
          ],
          padding: void 0,
          title: {
            name: "36℃",
            fontSize: 25,
            color: "#2fc25b",
            offsetY: 50
          },
          subtitle: {
            name: "",
            fontSize: 15,
            color: "#fff",
            offsetY: -50
          },
          extra: {
            gauge: {
              type: "default",
              width: 30,
              labelColor: "#fff",
              startAngle: 0.75,
              endAngle: 0.25,
              startNumber: 30,
              endNumber: 40,
              labelFormat: "",
              splitLine: {
                fixRadius: 0,
                splitNumber: 10,
                width: 30,
                color: "#FFFFFF",
                childNumber: 5,
                childWidth: 12
              },
              pointer: {
                width: 24,
                color: "auto"
              }
            }
          }
        }
      };
    },
    mounted() {
      this.getServerData();
    },
    methods: {
      getServerData() {
        setTimeout(() => {
          let res = {
            categories: [{
              "value": 0.2,
              "color": "#1890ff"
            }, {
              "value": 0.8,
              "color": "#2fc25b"
            }, {
              "value": 1,
              "color": "#f04864"
            }],
            series: [{
              name: "完成率",
              data: 0.6
            }]
          };
          this.chartData = JSON.parse(JSON.stringify(res));
        }, 500);
      }
    }
  };
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_qiun_data_charts = resolveEasycom(vue$1.resolveDynamicComponent("qiun-data-charts"), __easycom_0$1);
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "charts-box" }, [
          vue$1.createVNode(_component_qiun_data_charts, {
            type: "gauge",
            opts: $data.opts,
            chartData: $data.chartData
          }, null, 8, ["opts", "chartData"])
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const Erwen = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$h], ["__scopeId", "data-v-9d476d0d"], ["__file", "D:/ty/medical-device/src/components/HealthStep/Erwen.vue"]]);
  const _sfc_main$h = {
    components: {
      ContentBox
    },
    data() {
      return {
        chartData: {},
        //您可以通过修改 config-ucharts.js 文件中下标为 ['gauge'] 的节点来配置全局默认参数，如都是默认参数，此处可以不传 opts 。实际应用过程中 opts 只需传入与全局默认参数中不一致的【某一个属性】即可实现同类型的图表显示不同的样式，达到页面简洁的需求。
        opts: {
          color: [
            "#1890FF",
            "#91CB74",
            "#FAC858",
            "#EE6666",
            "#73C0DE",
            "#3CA272",
            "#FC8452",
            "#9A60B4",
            "#ea7ccc"
          ],
          padding: void 0,
          title: {
            name: "80%",
            fontSize: 35,
            color: "#2fc25b"
          },
          subtitle: {
            name: "",
            fontSize: 25,
            color: "#666666"
          },
          extra: {
            arcbar: {
              type: "default",
              width: 30,
              backgroundColor: "#E9E9E9",
              startAngle: 0.75,
              endAngle: 0.25,
              gap: 2,
              linearType: "custom"
            }
          }
        }
      };
    },
    mounted() {
      this.getServerData();
    },
    methods: {
      getServerData() {
        setTimeout(() => {
          let res = {
            series: [{
              name: "%",
              color: "#2fc25b",
              data: 0.8
            }]
          };
          this.chartData = JSON.parse(JSON.stringify(res));
        }, 500);
      }
    }
  };
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_qiun_data_charts = resolveEasycom(vue$1.resolveDynamicComponent("qiun-data-charts"), __easycom_0$1);
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "charts-box" }, [
          vue$1.createVNode(_component_qiun_data_charts, {
            type: "arcbar",
            opts: $data.opts,
            chartData: $data.chartData
          }, null, 8, ["opts", "chartData"])
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const Oximeter = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$g], ["__scopeId", "data-v-043ac528"], ["__file", "D:/ty/medical-device/src/components/HealthStep/Oximeter.vue"]]);
  const _sfc_main$g = {
    components: {
      ContentBox
    },
    data() {
      return {
        num1: this.getRandomNumber(),
        num2: this.getRandomNumber(),
        num3: this.getRandomNumber()
      };
    },
    mounted() {
      this.interval = setInterval(() => {
        this.updateValues();
      }, 1e3);
    },
    unMounted() {
      clearInterval(this.interval);
    },
    methods: {
      getRandomNumber() {
        return Math.floor(Math.random() * (200 - 20 + 1)) + 20;
      },
      updateValues() {
        this.num1 = this.getRandomNumber();
        this.num2 = this.getRandomNumber();
        this.num3 = this.getRandomNumber();
      }
    }
  };
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" }, [
          vue$1.createElementVNode("view", { class: "data-item" }, [
            vue$1.createElementVNode(
              "view",
              { class: "num" },
              vue$1.toDisplayString($data.num1),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("view", { class: "tip" }, [
              vue$1.createTextVNode("SYS"),
              vue$1.createElementVNode("br"),
              vue$1.createTextVNode("mmHg")
            ])
          ]),
          vue$1.createElementVNode("view", { class: "data-item" }, [
            vue$1.createElementVNode(
              "view",
              { class: "num" },
              vue$1.toDisplayString($data.num2),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("view", { class: "tip" }, [
              vue$1.createTextVNode("DIA"),
              vue$1.createElementVNode("br"),
              vue$1.createTextVNode("mmHg")
            ])
          ]),
          vue$1.createElementVNode("view", { class: "data-item" }, [
            vue$1.createElementVNode(
              "view",
              { class: "num" },
              vue$1.toDisplayString($data.num3),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("view", { class: "tip" }, [
              vue$1.createTextVNode("PUL"),
              vue$1.createElementVNode("br"),
              vue$1.createTextVNode("bpm")
            ])
          ])
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const BloodPressure = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$f], ["__scopeId", "data-v-78cc0198"], ["__file", "D:/ty/medical-device/src/components/HealthStep/BloodPressure.vue"]]);
  const _sfc_main$f = {
    components: {
      ContentBox
    },
    data() {
      return {
        step: 1,
        steps: [
          {
            id: 1,
            name: "Insert Strip",
            showLoading: false,
            done: false
          },
          {
            id: 2,
            name: "Add Blood",
            showLoading: false,
            done: false
          }
        ],
        showData: false
      };
    },
    mounted() {
      this.initMock();
    },
    methods: {
      initMock() {
        let completedCount = 0;
        const totalSteps = this.steps.length;
        this.steps.forEach((item, index) => {
          setTimeout(() => {
            item.showLoading = true;
          }, index * 2e3);
          setTimeout(() => {
            completedCount++;
            if (completedCount === totalSteps) {
              formatAppLog("log", "at components/HealthStep/RandomBloodSugar.vue:65", "所有项都已完成");
              this.showData = true;
            }
            item.done = true;
          }, index * 2e3 + 1e3);
        });
      }
    }
  };
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_up_loading_icon = vue$1.resolveComponent("up-loading-icon");
    const _component_up_icon = vue$1.resolveComponent("up-icon");
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" }, [
          !$data.showData ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "step1"
          }, [
            vue$1.createElementVNode("view", { class: "title" }, "Steps to follow:"),
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($data.steps, (item) => {
                return vue$1.openBlock(), vue$1.createElementBlock("view", {
                  class: "checkItem",
                  key: item.id
                }, [
                  vue$1.createElementVNode(
                    "view",
                    { class: "checkItemLabel" },
                    vue$1.toDisplayString(item.id) + ": " + vue$1.toDisplayString(item.name),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode("view", { class: "loading" }, [
                    item.showLoading && !item.done ? (vue$1.openBlock(), vue$1.createBlock(_component_up_loading_icon, {
                      key: 0,
                      color: "red"
                    })) : vue$1.createCommentVNode("v-if", true),
                    item.done ? (vue$1.openBlock(), vue$1.createBlock(_component_up_icon, {
                      key: 1,
                      name: "checkmark-circle-fill",
                      color: "#2979ff",
                      size: "30"
                    })) : vue$1.createCommentVNode("v-if", true)
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])) : vue$1.createCommentVNode("v-if", true),
          $data.showData ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 1,
            class: "dataBox"
          }, [
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "num" }, "103"),
              vue$1.createElementVNode("view", { class: "tips" }, "mg/dL")
            ])
          ])) : vue$1.createCommentVNode("v-if", true)
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const RandomBloodSugar = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$e], ["__scopeId", "data-v-0440cc4a"], ["__file", "D:/ty/medical-device/src/components/HealthStep/RandomBloodSugar.vue"]]);
  const _sfc_main$e = {
    components: {
      ContentBox
    },
    data() {
      return {};
    },
    mounted() {
    },
    methods: {}
  };
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" }, [
          vue$1.createElementVNode("view", { class: "dataBox" }, [
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "num" }, "5.33"),
              vue$1.createElementVNode("view", { class: "tips" }, "%")
            ])
          ])
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const HBA1C = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$d], ["__scopeId", "data-v-beed5a2e"], ["__file", "D:/ty/medical-device/src/components/HealthStep/HBA1C.vue"]]);
  const _sfc_main$d = {
    components: {
      ContentBox
    },
    data() {
      return {
        step: 1,
        steps: [
          {
            id: 1,
            name: "Connected",
            showLoading: false,
            done: false
          },
          {
            id: 2,
            name: "Open Tray",
            showLoading: false,
            done: false
          },
          {
            id: 3,
            name: "Add Blood",
            showLoading: false,
            done: false
          },
          {
            id: 4,
            name: "Blood Analysing",
            showLoading: false,
            done: false
          }
        ],
        showData: false
      };
    },
    mounted() {
      this.initMock();
    },
    methods: {
      initMock() {
        let completedCount = 0;
        const totalSteps = this.steps.length;
        this.steps.forEach((item, index) => {
          setTimeout(() => {
            item.showLoading = true;
          }, index * 2e3);
          setTimeout(() => {
            completedCount++;
            if (completedCount === totalSteps) {
              formatAppLog("log", "at components/HealthStep/HemoglobinTest.vue:77", "所有项都已完成");
              this.showData = true;
            }
            item.done = true;
          }, index * 2e3 + 1e3);
        });
      }
    }
  };
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_up_loading_icon = vue$1.resolveComponent("up-loading-icon");
    const _component_up_icon = vue$1.resolveComponent("up-icon");
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" }, [
          !$data.showData ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "step1"
          }, [
            vue$1.createElementVNode("view", { class: "title" }, "Steps to follow:"),
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($data.steps, (item) => {
                return vue$1.openBlock(), vue$1.createElementBlock("view", {
                  class: "checkItem",
                  key: item.id
                }, [
                  vue$1.createElementVNode(
                    "view",
                    { class: "checkItemLabel" },
                    vue$1.toDisplayString(item.id) + ": " + vue$1.toDisplayString(item.name),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode("view", { class: "loading" }, [
                    item.showLoading && !item.done ? (vue$1.openBlock(), vue$1.createBlock(_component_up_loading_icon, {
                      key: 0,
                      color: "red"
                    })) : vue$1.createCommentVNode("v-if", true),
                    item.done ? (vue$1.openBlock(), vue$1.createBlock(_component_up_icon, {
                      key: 1,
                      name: "checkmark-circle-fill",
                      color: "#2979ff",
                      size: "30"
                    })) : vue$1.createCommentVNode("v-if", true)
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])) : vue$1.createCommentVNode("v-if", true),
          $data.showData ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 1,
            class: "dataBox"
          }, [
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "num" }, "12.6"),
              vue$1.createElementVNode("view", { class: "tips" }, "g/dl")
            ])
          ])) : vue$1.createCommentVNode("v-if", true)
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const HemoglobinTest = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$c], ["__scopeId", "data-v-9c11494e"], ["__file", "D:/ty/medical-device/src/components/HealthStep/HemoglobinTest.vue"]]);
  const _sfc_main$c = {
    components: {
      ContentBox
    },
    data() {
      return {
        step: 1,
        steps: [
          {
            id: 1,
            name: "Connected",
            showLoading: false,
            done: false
          },
          {
            id: 2,
            name: "Wating For Result",
            showLoading: false,
            done: false
          }
        ],
        showData: false
      };
    },
    mounted() {
      this.initMock();
    },
    methods: {
      initMock() {
        let completedCount = 0;
        const totalSteps = this.steps.length;
        this.steps.forEach((item, index) => {
          setTimeout(() => {
            item.showLoading = true;
          }, index * 2e3);
          setTimeout(() => {
            completedCount++;
            if (completedCount === totalSteps) {
              formatAppLog("log", "at components/HealthStep/Lipid.vue:97", "所有项都已完成");
              this.showData = true;
            }
            item.done = true;
          }, index * 2e3 + 1e3);
        });
      }
    }
  };
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_up_loading_icon = vue$1.resolveComponent("up-loading-icon");
    const _component_up_icon = vue$1.resolveComponent("up-icon");
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" }, [
          !$data.showData ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "step1"
          }, [
            vue$1.createElementVNode("view", { class: "title" }, "Steps to follow:"),
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($data.steps, (item) => {
                return vue$1.openBlock(), vue$1.createElementBlock("view", {
                  class: "checkItem",
                  key: item.id
                }, [
                  vue$1.createElementVNode(
                    "view",
                    { class: "checkItemLabel" },
                    vue$1.toDisplayString(item.id) + ": " + vue$1.toDisplayString(item.name),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode("view", { class: "loading" }, [
                    item.showLoading && !item.done ? (vue$1.openBlock(), vue$1.createBlock(_component_up_loading_icon, {
                      key: 0,
                      color: "red"
                    })) : vue$1.createCommentVNode("v-if", true),
                    item.done ? (vue$1.openBlock(), vue$1.createBlock(_component_up_icon, {
                      key: 1,
                      name: "checkmark-circle-fill",
                      color: "#2979ff",
                      size: "30"
                    })) : vue$1.createCommentVNode("v-if", true)
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])) : vue$1.createCommentVNode("v-if", true),
          $data.showData ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 1,
            class: "dataBox"
          }, [
            vue$1.createElementVNode("view", { class: "title" }, "Test Result:"),
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "showDataBox-title" }, "TC"),
              vue$1.createElementVNode("view", { class: "line" }, "-"),
              vue$1.createElementVNode("view", { class: "data" }, [
                vue$1.createTextVNode("131 "),
                vue$1.createElementVNode("view", { class: "tip" }, "mg/dL")
              ])
            ]),
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "showDataBox-title" }, "TC"),
              vue$1.createElementVNode("view", { class: "line" }, "-"),
              vue$1.createElementVNode("view", { class: "data" }, [
                vue$1.createTextVNode("131 "),
                vue$1.createElementVNode("view", { class: "tip" }, "mg/dL")
              ])
            ]),
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "showDataBox-title" }, "TC"),
              vue$1.createElementVNode("view", { class: "line" }, "-"),
              vue$1.createElementVNode("view", { class: "data" }, [
                vue$1.createTextVNode("131 "),
                vue$1.createElementVNode("view", { class: "tip" }, "mg/dL")
              ])
            ]),
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "showDataBox-title" }, "TC"),
              vue$1.createElementVNode("view", { class: "line" }, "-"),
              vue$1.createElementVNode("view", { class: "data" }, [
                vue$1.createTextVNode("131 "),
                vue$1.createElementVNode("view", { class: "tip" }, "mg/dL")
              ])
            ]),
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "showDataBox-title" }, "TC"),
              vue$1.createElementVNode("view", { class: "line" }, "-"),
              vue$1.createElementVNode("view", { class: "data" }, [
                vue$1.createTextVNode("131 "),
                vue$1.createElementVNode("view", { class: "tip" }, "mg/dL")
              ])
            ]),
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "showDataBox-title" }, "TC"),
              vue$1.createElementVNode("view", { class: "line" }, "-"),
              vue$1.createElementVNode("view", { class: "data" }, [
                vue$1.createTextVNode("131 "),
                vue$1.createElementVNode("view", { class: "tip" }, "mg/dL")
              ])
            ]),
            vue$1.createElementVNode("view", { class: "showDataBox" }, [
              vue$1.createElementVNode("view", { class: "showDataBox-title" }, "TC"),
              vue$1.createElementVNode("view", { class: "line" }, "-"),
              vue$1.createElementVNode("view", { class: "data" }, [
                vue$1.createTextVNode("131 "),
                vue$1.createElementVNode("view", { class: "tip" }, "mg/dL")
              ])
            ])
          ])) : vue$1.createCommentVNode("v-if", true)
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const Lipid = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$b], ["__scopeId", "data-v-32e1ae14"], ["__file", "D:/ty/medical-device/src/components/HealthStep/Lipid.vue"]]);
  const _sfc_main$b = {
    components: {
      ContentBox
    },
    data() {
      return {};
    },
    mounted() {
    },
    methods: {}
  };
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, null, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" }, [
          vue$1.createElementVNode("view", { class: "dataBox" })
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const SixLeadECG = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$a], ["__scopeId", "data-v-d942c7b2"], ["__file", "D:/ty/medical-device/src/components/HealthStep/SixLeadECG.vue"]]);
  const _sfc_main$a = {
    components: {
      ContentBox
    },
    data() {
      return {};
    },
    mounted() {
    },
    methods: {}
  };
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" })
      ]),
      _: 1
      /* STABLE */
    });
  }
  const Spirometry = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$9], ["__scopeId", "data-v-195e0a8d"], ["__file", "D:/ty/medical-device/src/components/HealthStep/Spirometry.vue"]]);
  function getRect(selector, options2 = {}) {
    const typeDefault = "boundingClientRect";
    const { context, type: type2 = typeDefault } = options2;
    return new Promise((resolve, reject) => {
      const dom = uni.createSelectorQuery().in(context).select(selector);
      const result = (rect) => {
        if (rect) {
          resolve(rect);
        } else {
          reject();
        }
      };
      if (type2 == typeDefault) {
        dom[type2](result).exec();
      } else {
        dom[type2]({
          node: true,
          size: true,
          rect: true
        }, result).exec();
      }
    });
  }
  function useCanvas(selector, options2) {
    const { context } = options2;
    const canvas = vue$1.ref();
    vue$1.onMounted(() => {
      {
        getRect(selector, { context }).then((res) => {
          if (res) {
            uni.createCanvasContext(selector.replace("#", ""), context);
            const { bottom, width, height, left } = res;
            canvas.value = {
              bottom,
              width,
              height,
              left,
              context: uni.createCanvasContext(selector.replace("#", ""), context),
              offscreen: uni.createCanvasContext(selector.replace("#", "") + "line", context)
            };
          }
        });
      }
    });
    return canvas;
  }
  function t(t2, i2) {
    if (!(t2 instanceof i2)) throw new TypeError("Cannot call a class as a function");
  }
  function i$1(t2, i2) {
    for (var e2 = 0; i2.length > e2; e2++) {
      var r2 = i2[e2];
      r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(t2, r2.key, r2);
    }
  }
  function e(t2, e2, r2) {
    return e2 && i$1(t2.prototype, e2), Object.defineProperty(t2, "prototype", { writable: false }), t2;
  }
  function r(t2, i2) {
    return function(t3) {
      if (Array.isArray(t3)) return t3;
    }(t2) || function(t3, i3) {
      var e2 = null == t3 ? null : "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
      if (null == e2) return;
      var r2, n2, s2 = [], o2 = true, a2 = false;
      try {
        for (e2 = e2.call(t3); !(o2 = (r2 = e2.next()).done) && (s2.push(r2.value), !i3 || s2.length !== i3); o2 = true) ;
      } catch (t4) {
        a2 = true, n2 = t4;
      } finally {
        try {
          o2 || null == e2.return || e2.return();
        } finally {
          if (a2) throw n2;
        }
      }
      return s2;
    }(t2, i2) || s$1(t2, i2) || function() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function n(t2) {
    return function(t3) {
      if (Array.isArray(t3)) return o(t3);
    }(t2) || function(t3) {
      if ("undefined" != typeof Symbol && null != t3[Symbol.iterator] || null != t3["@@iterator"]) return Array.from(t3);
    }(t2) || s$1(t2) || function() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function s$1(t2, i2) {
    if (t2) {
      if ("string" == typeof t2) return o(t2, i2);
      var e2 = Object.prototype.toString.call(t2).slice(8, -1);
      return "Object" === e2 && t2.constructor && (e2 = t2.constructor.name), "Map" === e2 || "Set" === e2 ? Array.from(t2) : "Arguments" === e2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e2) ? o(t2, i2) : void 0;
    }
  }
  function o(t2, i2) {
    (null == i2 || i2 > t2.length) && (i2 = t2.length);
    for (var e2 = 0, r2 = Array(i2); i2 > e2; e2++) r2[e2] = t2[e2];
    return r2;
  }
  var a$1 = function() {
    function i2(e2, r2) {
      t(this, i2), this.canvas = void 0, this.options = void 0, this.queue = [], this.lastX = 0, this.lastY = 0, this.padding = [1, 0.5], this.currentY = 0, this.currentX = 0, this.timeId = void 0, this.pointsLast = [], this.drawInterval = 20, this.width = 0, this.height = 0, this.canvas = e2, this.options = r2, this.drawInterval = Math.floor(1 / r2.frameSize * 1e3 * r2.step), this.width = Math.floor(e2.width / r2.gridSize) * r2.gridSize, this.height = Math.floor(e2.height / r2.gridSize / 10) * r2.gridSize * 10;
    }
    return e(i2, [{ key: "draw", value: function() {
      var t2 = this.canvas.offscreen, i3 = this.height, e2 = this.width, n2 = this.options, s2 = n2.lineColor, o2 = n2.yOffset, a2 = n2.clearGap, h2 = n2.step, l2 = n2.yMax, u2 = n2.gridSize, c2 = n2.speedRatio, d2 = n2.frameSize, v2 = n2.waveHeight, f2 = r(this.padding, 1)[0], p2 = (i3 - v2) / 2;
      t2.beginPath(), t2.strokeStyle = s2, t2.clearRect(0 === this.lastX ? f2 - 2 : f2 + this.lastX, o2, a2, i3);
      for (var y2 = 0; h2 > y2; y2++) this.currentY = 0 === this.queue.length ? v2 / 2 : -1 * this.queue.shift() / l2 * v2 + v2, this.currentY > v2 && (this.currentY = v2), this.pointsLast[1] && 0 !== this.lastX ? (t2.moveTo(f2 + this.pointsLast[1].x, o2 + this.pointsLast[1].y + p2), t2.lineTo(f2 + this.lastX, o2 + this.lastY + p2)) : t2.moveTo(f2 + this.lastX, o2 + this.lastY + p2), t2.lineTo(f2 + this.currentX, o2 + this.currentY + p2), this.lastX = this.currentX, this.lastY = this.currentY, this.currentX += 25 * u2 * c2 / d2, e2 - f2 > f2 + this.currentX || (this.currentX = 0, this.lastX = 0), this.pointsLast.push({ x: this.lastX, y: this.lastY }), this.pointsLast.length > 3 && this.pointsLast.shift();
      t2.stroke(), t2.draw && t2.draw(true);
    } }, { key: "addData", value: function(t2) {
      var i3;
      (i3 = this.queue).push.apply(i3, n(t2));
    } }]), i2;
  }(), h$1 = function() {
    function i2(e2) {
      var r2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      t(this, i2), this.canvas = void 0, this.options = { bgColor: "", ampTime: "", textColor: "", lineColor: [], gridSize: 5, gridLength: [] }, this.wave = void 0, this.timeId = void 0, this.isPlay = false, this.waveOptions = { lineColor: "red", frameSize: 250, speedRatio: 1, clearGap: 20, step: 10, yMax: 0, yOffset: 0, waveHeight: 100 }, this.canvas = e2, Object.assign(this.options, r2), Object.assign(this.waveOptions, { yMax: e2.height, gridSize: r2.gridSize }, this.options.wave), this.init();
    }
    return e(i2, [{ key: "init", value: function() {
      this.drawBG(), this.setWave();
    } }, { key: "_draw", value: function() {
      var t2 = this.canvas.context;
      t2.draw && t2.draw();
    } }, { key: "drawBG", value: function() {
      this.options.bgColor && this.drawBackground(), this.options.lineColor.length && (this.drawMd(), this.drawLg()), this.options.ampTime && this.drawTxt(), this._draw();
    } }, { key: "drawBackground", value: function() {
      var t2 = this.canvas, i3 = t2.context, e2 = t2.width, r2 = t2.height;
      i3.fillStyle = this.options.bgColor, i3.fillRect(0, 0, e2, r2), this._draw();
    } }, { key: "drawMd", value: function() {
      var t2 = this.canvas, i3 = t2.context, e2 = t2.width, n2 = t2.height, s2 = r(this.options.lineColor, 1), o2 = this.options.gridSize;
      i3.strokeStyle = s2[0], i3.strokeWidth = 1, i3.beginPath();
      for (var a2 = 0.5; e2 > a2; a2 += o2) i3.moveTo(a2, 0), i3.lineTo(a2, n2), i3.stroke();
      for (var h2 = 0.5; n2 > h2; h2 += o2) i3.moveTo(0, h2), i3.lineTo(e2, h2), i3.stroke();
      i3.closePath();
    } }, { key: "drawLg", value: function() {
      var t2 = this.canvas, i3 = t2.context, e2 = t2.width, n2 = t2.height, s2 = r(this.options.lineColor, 2), o2 = this.options.gridSize;
      i3.strokeStyle = s2[1], i3.strokeWidth = 1, i3.beginPath();
      for (var a2 = 5 * o2, h2 = e2 + 0.5, l2 = n2 + 0.5, u2 = 0, c2 = 0, d2 = 0.5; h2 > d2; d2 += a2) i3.moveTo(d2, 0), i3.lineTo(d2, l2), i3.stroke(), c2 = d2;
      for (var v2 = 0.5; l2 > v2; v2 += a2) i3.moveTo(0, v2), i3.lineTo(h2, v2), i3.stroke(), u2 = v2;
      i3.moveTo(c2 + a2, 0), i3.lineTo(c2 + a2, u2 + a2), i3.lineTo(0, u2 + a2), i3.stroke(), i3.closePath();
    } }, { key: "drawTxt", value: function() {
      var t2 = this.canvas, i3 = t2.context, e2 = t2.height, r2 = this.options.textColor;
      i3.font = "10px Arial", i3.fontWeight = "300", i3.fillStyle = r2, i3.fillText(this.options.ampTime, 10, e2 - 10);
    } }, { key: "update", value: function(t2) {
      this.wave ? this.wave.addData(t2) : formatAppLog("warn", "at uni_modules/lime-ecg/components/l-ecg/ecg.js:1", "wave no init");
    } }, { key: "pause", value: function() {
      clearTimeout(this.timeId), this.isPlay = false;
    } }, { key: "step", value: function() {
      this.wave && this.wave.queue.length ? (this.isPlay = true, this.wave.draw(), this.timeId = setTimeout(this.step.bind(this), this.wave.drawInterval)) : this.pause();
    } }, { key: "resume", value: function() {
      this.isPlay || this.step();
    } }, { key: "setWave", value: function() {
      this.wave || (this.wave = new a$1(this.canvas, this.waveOptions));
    } }]), i2;
  }();
  const EcgProps = {
    gridLength: {
      type: Array
      // default: [19, 8]
    },
    gridSize: {
      type: Number,
      default: 5
    }
  };
  const _sfc_main$9 = vue$1.defineComponent({
    name: "l-ecg",
    externalClasses: ["l-class"],
    options: {
      addGlobalClass: true,
      virtualHost: true
    },
    props: EcgProps,
    setup(props, { expose }) {
      const app = vue$1.getCurrentInstance();
      const canvasId = `l-ecg-${app.uid}`;
      const canvas = useCanvas(`#${canvasId}`, { context: app.proxy });
      let ecgChart = null;
      let grid = vue$1.reactive({
        length: props.gridLength,
        size: props.gridSize
      });
      const styles = vue$1.computed(() => {
        const lineWidth = 1 / 2;
        if (grid.length) {
          return {
            // 每小格5px 每大格为 5小格
            width: grid.length[0] * grid.size * 5 + lineWidth + "px",
            height: grid.length[1] * grid.size * 5 + lineWidth + "px"
          };
        }
      });
      const init = (options2) => {
        if (ecgChart) {
          return;
        }
        vue$1.watch(canvas, (v2) => {
          if (v2) {
            ecgChart = new h$1(canvas.value, Object.assign({}, props, options2));
          }
        }, { immediate: true });
      };
      const update = (data) => ecgChart.update(data);
      const resume = () => ecgChart.resume();
      const pause = () => ecgChart.pause();
      expose({
        init,
        update,
        resume,
        pause
      });
      return {
        styles,
        canvasId
      };
    }
  });
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "view",
      {
        class: "l-ecg l-class",
        style: vue$1.normalizeStyle([_ctx.styles])
      },
      [
        vue$1.createElementVNode("canvas", {
          class: "l-ecg__canvas",
          "canvas-id": _ctx.canvasId,
          id: _ctx.canvasId,
          type: "2d"
        }, null, 8, ["canvas-id", "id"]),
        vue$1.createElementVNode("canvas", {
          class: "l-ecg__canvas",
          "canvas-id": _ctx.canvasId + "line",
          id: _ctx.canvasId + "line",
          type: "2d"
        }, null, 8, ["canvas-id", "id"])
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_0 = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$8], ["__scopeId", "data-v-b9f449ab"], ["__file", "D:/ty/medical-device/src/uni_modules/lime-ecg/components/l-ecg/l-ecg.vue"]]);
  const _sfc_main$8 = {
    __name: "CardiovascularSystemicExamination",
    setup(__props, { expose: __expose }) {
      __expose();
      const value = [
        122,
        122,
        122,
        122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        122,
        122,
        122,
        123,
        125,
        127,
        130,
        133,
        135,
        137,
        138,
        139,
        140,
        140,
        139,
        138,
        136,
        134,
        130,
        127,
        125,
        124,
        123,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        121,
        119,
        116,
        113,
        111,
        132,
        151,
        171,
        190,
        210,
        229,
        210,
        190,
        171,
        151,
        132,
        112,
        114,
        117,
        120,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        123,
        124,
        124,
        126,
        128,
        131,
        133,
        134,
        136,
        140,
        143,
        144,
        146,
        149,
        150,
        152,
        153,
        153,
        154,
        155,
        156,
        157,
        156,
        155,
        153,
        153,
        152,
        150,
        149,
        146,
        145,
        142,
        138,
        135,
        133,
        129,
        127,
        124,
        123,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122
      ];
      const ecgRef = vue$1.ref(null);
      vue$1.onMounted(() => {
        ecgRef.value.init({
          // 小格和大格的border color
          lineColor: ["#c7dff5", "#63b3f8"],
          ampTime: "Amp: 10mm/mv  Time: 25mm/sec",
          textColor: "#000",
          wave: {
            // ecg
            // 1秒多少个点
            frameSize: 250,
            yMax: 250,
            waveHeight: 100,
            // 每次画几个点
            step: 10,
            // 扫纸速度，1 默认 表示 25mm/s (1秒25个小格子 每个小格子0.04s)。 0.5表示扫纸速度为 12.5mm/s。2表示扫纸速度为 50mm/s。
            speedRatio: 1,
            lineColor: "red"
          }
        });
        vue$1.nextTick(() => {
          setTimeout(() => {
            resume();
          }, 1e3);
        });
      });
      vue$1.onUnmounted(() => {
        pause();
      });
      const resume = () => {
        ecgRef.value.update(value);
        ecgRef.value.resume();
        setInterval(() => {
          ecgRef.value.update(value);
        }, 1e3);
      };
      const pause = () => {
        ecgRef.value.pause();
      };
      const __returned__ = { value, ecgRef, resume, pause, ref: vue$1.ref, onMounted: vue$1.onMounted, nextTick: vue$1.nextTick, onUnmounted: vue$1.onUnmounted };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_l_ecg = resolveEasycom(vue$1.resolveDynamicComponent("l-ecg"), __easycom_0);
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "content" }, [
      vue$1.createElementVNode("view", { class: "box" }, [
        vue$1.createVNode(
          _component_l_ecg,
          { ref: "ecgRef" },
          null,
          512
          /* NEED_PATCH */
        )
      ])
    ]);
  }
  const CardiovascularSystemicExamination = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$7], ["__scopeId", "data-v-a394367b"], ["__file", "D:/ty/medical-device/src/components/HealthStep/CardiovascularSystemicExamination.vue"]]);
  const _imports_0 = "/static/eye.png";
  const _sfc_main$7 = {
    components: {
      ContentBox
    },
    data() {
      return {
        show: false
      };
    },
    mounted() {
    },
    methods: {
      close() {
        this.show = false;
      }
    }
  };
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_up_popup = vue$1.resolveComponent("up-popup");
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" }, [
          vue$1.createElementVNode("view", { class: "title" }, " Visual Acuity Testing "),
          vue$1.createElementVNode("view", { class: "remark" }, " Snellan created his chart using a geometric scalethat gives an exact measurement of a person'svisual acuity. The chart has 6 lines of capitalizedblock letters, known as optotypes. "),
          vue$1.createElementVNode("view", null, [
            vue$1.createTextVNode(" Instruction : "),
            vue$1.createElementVNode("br"),
            vue$1.createTextVNode(" To be read from a distance of 7 feet. ")
          ]),
          vue$1.createElementVNode("view", {
            class: "btn",
            onClick: _cache[0] || (_cache[0] = ($event) => $data.show = true)
          }, "Start"),
          vue$1.createVNode(_component_up_popup, {
            show: $data.show,
            mode: "center",
            onClose: $options.close
          }, {
            default: vue$1.withCtx(() => [
              vue$1.createElementVNode("view", { class: "popupBox" }, [
                vue$1.createElementVNode("image", {
                  src: _imports_0,
                  mode: "widthFix",
                  style: { "width": "100%" }
                }),
                vue$1.createElementVNode("view", {
                  class: "btn popupBtn",
                  onClick: _cache[1] || (_cache[1] = (...args) => $options.close && $options.close(...args))
                }, "Finish")
              ])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["show", "onClose"])
        ]),
        vue$1.createElementVNode("view", null, " asd ")
      ]),
      _: 1
      /* STABLE */
    });
  }
  const SnellenChart = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$6], ["__scopeId", "data-v-afef70c8"], ["__file", "D:/ty/medical-device/src/components/HealthStep/SnellenChart.vue"]]);
  const _sfc_main$6 = {
    __name: "Audiometry",
    setup(__props, { expose: __expose }) {
      __expose();
      const value = [
        122,
        122,
        122,
        122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        -122,
        122,
        122,
        122,
        123,
        125,
        127,
        130,
        133,
        135,
        137,
        138,
        139,
        140,
        140,
        139,
        138,
        136,
        134,
        130,
        127,
        125,
        124,
        123,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        121,
        119,
        116,
        113,
        111,
        132,
        151,
        171,
        190,
        210,
        229,
        210,
        190,
        171,
        151,
        132,
        112,
        114,
        117,
        120,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        123,
        124,
        124,
        126,
        128,
        131,
        133,
        134,
        136,
        140,
        143,
        144,
        146,
        149,
        150,
        152,
        153,
        153,
        154,
        155,
        156,
        157,
        156,
        155,
        153,
        153,
        152,
        150,
        149,
        146,
        145,
        142,
        138,
        135,
        133,
        129,
        127,
        124,
        123,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122,
        122
      ];
      const ecgRef = vue$1.ref(null);
      vue$1.onMounted(() => {
        ecgRef.value.init({
          // 小格和大格的border color
          lineColor: ["#c7dff5", "#63b3f8"],
          ampTime: "Amp: 10mm/mv  Time: 25mm/sec",
          textColor: "#000",
          wave: {
            // ecg
            // 1秒多少个点
            frameSize: 250,
            yMax: 250,
            waveHeight: 100,
            // 每次画几个点
            step: 10,
            // 扫纸速度，1 默认 表示 25mm/s (1秒25个小格子 每个小格子0.04s)。 0.5表示扫纸速度为 12.5mm/s。2表示扫纸速度为 50mm/s。
            speedRatio: 1,
            lineColor: "red"
          }
        });
        vue$1.nextTick(() => {
          setTimeout(() => {
            resume();
          }, 1e3);
        });
      });
      vue$1.onUnmounted(() => {
        pause();
      });
      const resume = () => {
        ecgRef.value.update(value);
        ecgRef.value.resume();
        setInterval(() => {
          ecgRef.value.update(value);
        }, 1e3);
      };
      const pause = () => {
        ecgRef.value.pause();
      };
      const __returned__ = { value, ecgRef, resume, pause, ref: vue$1.ref, onMounted: vue$1.onMounted, nextTick: vue$1.nextTick, onUnmounted: vue$1.onUnmounted };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_l_ecg = resolveEasycom(vue$1.resolveDynamicComponent("l-ecg"), __easycom_0);
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "content" }, [
      vue$1.createElementVNode("view", { class: "box" }, [
        vue$1.createVNode(
          _component_l_ecg,
          { ref: "ecgRef" },
          null,
          512
          /* NEED_PATCH */
        )
      ])
    ]);
  }
  const Audiometry = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$5], ["__scopeId", "data-v-4ec7a769"], ["__file", "D:/ty/medical-device/src/components/HealthStep/Audiometry.vue"]]);
  const _sfc_main$5 = {
    components: {
      ContentBox
    },
    data() {
      return {};
    },
    mounted() {
    },
    methods: {}
  };
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" }, [
          vue$1.createElementVNode(
            "camera",
            {
              "device-position": "back",
              flash: "off",
              onError: _cache[0] || (_cache[0] = (...args) => _ctx.error && _ctx.error(...args)),
              style: { "width": "600rpx", "height": "600rpx" }
            },
            null,
            32
            /* NEED_HYDRATION */
          )
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const Dermascope = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$4], ["__scopeId", "data-v-46e392ae"], ["__file", "D:/ty/medical-device/src/components/HealthStep/Dermascope.vue"]]);
  const _sfc_main$4 = {
    components: {
      ContentBox
    },
    data() {
      return {};
    },
    mounted() {
    },
    methods: {}
  };
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ContentBox = vue$1.resolveComponent("ContentBox");
    return vue$1.openBlock(), vue$1.createBlock(_component_ContentBox, { image: "@/static/height.jpg" }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("view", { class: "box" }, [
          vue$1.createElementVNode(
            "camera",
            {
              "device-position": "back",
              flash: "off",
              onError: _cache[0] || (_cache[0] = (...args) => _ctx.error && _ctx.error(...args)),
              style: { "width": "600rpx", "height": "600rpx" }
            },
            null,
            32
            /* NEED_HYDRATION */
          )
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const Otoscope = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$3], ["__scopeId", "data-v-e9215345"], ["__file", "D:/ty/medical-device/src/components/HealthStep/Otoscope.vue"]]);
  const _sfc_main$3 = {
    __name: "detection",
    setup(__props, { expose: __expose }) {
      __expose();
      const stepComponent = vue$1.shallowRef(Height);
      const activeIndex = vue$1.ref(0);
      const stepArr = vue$1.shallowRef([
        {
          id: 1,
          name: Height,
          text: "Height"
        },
        {
          id: 2,
          name: BodyFat,
          text: "BodyFat"
        },
        {
          id: 3,
          name: Erwen,
          text: "Erwen"
        },
        {
          id: 4,
          name: Oximeter,
          text: "Oximeter"
        },
        {
          id: 5,
          name: BloodPressure,
          text: "BloodPressure"
        },
        {
          id: 6,
          name: RandomBloodSugar,
          text: "RandomBloodSugar"
        },
        {
          id: 7,
          name: HBA1C,
          text: "HBA1C"
        },
        {
          id: 8,
          name: HemoglobinTest,
          text: "HemoglobinTest"
        },
        {
          id: 9,
          name: Lipid,
          text: "Lipid"
        },
        {
          id: 10,
          name: SixLeadECG,
          text: "SixLeadECG"
        },
        {
          id: 10,
          name: Spirometry,
          text: "Spirometry"
        },
        {
          id: 10,
          name: CardiovascularSystemicExamination,
          text: "CardiovascularSystemicExamination"
        },
        {
          id: 10,
          name: SnellenChart,
          text: "SnellenChart"
        },
        {
          id: 10,
          name: Audiometry,
          text: "Audiometry"
        },
        {
          id: 10,
          name: Dermascope,
          text: "Dermascope"
        },
        {
          id: 10,
          name: Otoscope,
          text: "Otoscope"
        }
      ]);
      const handleClickStep = (item, index) => {
        stepComponent.value = item.name;
        activeIndex.value = index;
        updateStatus();
      };
      const handleClickAction = (flag2) => {
        if (flag2 == "left") {
          stepComponent.value = stepArr.value[activeIndex.value - 1].name;
          activeIndex.value = activeIndex.value - 1;
        } else {
          stepComponent.value = stepArr.value[activeIndex.value + 1].name;
          activeIndex.value = activeIndex.value + 1;
        }
        updateStatus();
      };
      const updateStatus = () => {
        stepArr.value = stepArr.value.map((item, index) => {
          if (index < activeIndex.value) {
            item.status = "pass";
          } else {
            item.status = "";
          }
          return item;
        });
      };
      const __returned__ = { stepComponent, activeIndex, stepArr, handleClickStep, handleClickAction, updateStatus, Header, ScrollText, ref: vue$1.ref, shallowRef: vue$1.shallowRef, markRaw: vue$1.markRaw, Height, BodyFat, Erwen, Oximeter, BloodPressure, RandomBloodSugar, HBA1C, HemoglobinTest, Lipid, SixLeadECG, Spirometry, CardiovascularSystemicExamination, SnellenChart, Audiometry, Dermascope, Otoscope };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "page" }, [
      vue$1.createVNode($setup["Header"], {
        title: "Health",
        showBack: ""
      }),
      vue$1.createElementVNode("div", { class: "content" }, [
        vue$1.createElementVNode("scroll-view", {
          "scroll-x": "true",
          class: "scrollBox flex-shrink-0",
          "show-scrollbar": false
        }, [
          vue$1.createElementVNode("view", { class: "stepBox space-x-40" }, [
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($setup.stepArr, (item, index) => {
                return vue$1.openBlock(), vue$1.createElementBlock("view", {
                  class: vue$1.normalizeClass(["stepBoxItem", [$setup.activeIndex == index ? "activeSetp" : "", item.status == "pass" ? "doneStep" : ""]]),
                  key: item.id,
                  onClick: ($event) => $setup.handleClickStep(item, index)
                }, [
                  vue$1.createElementVNode("view", { class: "icon" }, [
                    vue$1.createElementVNode("i", { class: "fas fa-ruler-vertical" })
                  ]),
                  vue$1.createElementVNode("view", {
                    class: "text",
                    style: { "width": "200rpx" }
                  }, [
                    vue$1.createVNode($setup["ScrollText"], {
                      content: item.text,
                      index
                    }, null, 8, ["content", "index"]),
                    vue$1.createCommentVNode(" {{ item.text }} ")
                  ]),
                  $setup.activeIndex == index ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
                    key: 0,
                    class: "activeIcon"
                  }, [
                    vue$1.createElementVNode("i", { class: "fas fa-running text-white text-2xl" })
                  ])) : vue$1.createCommentVNode("v-if", true)
                ], 10, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ]),
        vue$1.createElementVNode("view", { class: "flex-1 w-full" }, [
          (vue$1.openBlock(), vue$1.createBlock(vue$1.resolveDynamicComponent($setup.stepComponent)))
        ]),
        vue$1.createElementVNode("view", { class: "actionBar flex justify-between w-full p-6" }, [
          vue$1.createElementVNode("view", { class: "left" }, [
            $setup.activeIndex != 0 ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
              key: 0,
              class: "fas fa-angle-double-left text-6xl",
              onClick: _cache[0] || (_cache[0] = ($event) => $setup.handleClickAction("left"))
            })) : vue$1.createCommentVNode("v-if", true)
          ]),
          vue$1.createElementVNode("view", { class: "right" }, [
            vue$1.createElementVNode("view", {
              class: "fas fa-angle-double-right text-6xl",
              onClick: _cache[1] || (_cache[1] = ($event) => $setup.handleClickAction("right"))
            })
          ])
        ])
      ])
    ]);
  }
  const PagesHealthDetection = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$2], ["__scopeId", "data-v-11700886"], ["__file", "D:/ty/medical-device/src/pages/health/detection.vue"]]);
  const _sfc_main$2 = {
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const handleGoto = () => {
        uni.navigateTo({
          url: "/pages/login/code"
        });
      };
      const __returned__ = { handleGoto, Header };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "page" }, [
      vue$1.createVNode($setup["Header"], { title: "Login" }),
      vue$1.createElementVNode("view", { class: "content" }, [
        vue$1.createElementVNode("view", { class: "left" }, [
          vue$1.createElementVNode("view", { class: "label" }, " Login With "),
          vue$1.createElementVNode("view", { class: "selectBox" }, [
            vue$1.createElementVNode("view", { class: "select-item" }, [
              vue$1.createElementVNode("view", null, "Mobile")
            ]),
            vue$1.createElementVNode("view", { class: "select-item" }, [
              vue$1.createElementVNode("view", null, "Unique Id")
            ]),
            vue$1.createElementVNode("view", { class: "select-item" }, [
              vue$1.createElementVNode("view", null, "Aadhaar Card")
            ])
          ])
        ]),
        vue$1.createElementVNode("view", { class: "right" }, [
          vue$1.createElementVNode("view", { class: "loginBox" }, [
            vue$1.createElementVNode("view", { class: "title" }, "Patient Login"),
            vue$1.createElementVNode("view", { class: "inputBox" }, [
              vue$1.createElementVNode("view", { class: "label" }, "Mobile"),
              vue$1.createElementVNode("view", { class: "input" }, [
                vue$1.createElementVNode("input", { type: "text" })
              ])
            ]),
            vue$1.createElementVNode("view", {
              class: "loginBtn",
              onClick: $setup.handleGoto
            }, " Login ")
          ])
        ])
      ])
    ]);
  }
  const PagesLoginIndex = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$1], ["__scopeId", "data-v-45258083"], ["__file", "D:/ty/medical-device/src/pages/login/index.vue"]]);
  const _sfc_main$1 = {
    __name: "info",
    setup(__props, { expose: __expose }) {
      __expose();
      const save = () => {
        formatAppLog("log", "at pages/login/info.vue:152", "1");
        uni.navigateTo({
          url: "/pages/health/index"
        });
      };
      const __returned__ = { save };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", null, [
      vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode("v-if", true),
      vue$1.createElementVNode("view", { class: "w-screen h-screen overflow-hidden" }, [
        vue$1.createElementVNode("view", { class: "flex flex-col items-center justify-center min-h-screen" }, [
          vue$1.createElementVNode("h1", { class: "text-2xl font-semibold mb-4" }, "Confirm User Information"),
          vue$1.createElementVNode("view", { class: "flex justify-between w-3/4" }, [
            vue$1.createElementVNode("view", { class: "w-1/2 pr-4" }, [
              vue$1.createElementVNode("h2", { class: "text-center mb-4" }, "( Mandatory )"),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Name"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Name"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-user absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Gender"),
                vue$1.createElementVNode("select", { class: "w-full p-2 bg-blue-800 border border-gray-500 rounded" }, [
                  vue$1.createElementVNode("option", null, "Select Gender")
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "DOB"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "date",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-calendar-alt absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Phone Number"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "XXXXXXXXXX"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-phone absolute right-3 top-3 text-gray-400" })
                ])
              ])
            ]),
            vue$1.createElementVNode("view", { class: "w-1/2 pl-4" }, [
              vue$1.createElementVNode("h2", { class: "text-center mb-4" }, "( Optional )"),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Mail"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "email",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Mail"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-envelope absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Aadhar Card"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Aadhar Card"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-id-card absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Unique ID"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Unique ID"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-id-badge absolute right-3 top-3 text-gray-400" })
                ])
              ]),
              vue$1.createElementVNode("view", { class: "mb-4" }, [
                vue$1.createElementVNode("label", { class: "block mb-2" }, "Abha"),
                vue$1.createElementVNode("view", { class: "relative" }, [
                  vue$1.createElementVNode("input", {
                    type: "text",
                    class: "w-full p-5 bg-blue-800 border border-gray-500 rounded",
                    placeholder: "Abha"
                  }),
                  vue$1.createElementVNode("i", { class: "fas fa-id-badge absolute right-3 top-3 text-gray-400" })
                ])
              ])
            ])
          ]),
          vue$1.createElementVNode("view", { class: "flex justify-between w-3/4 mt-6" }, [
            vue$1.createElementVNode("button", { class: "bg-blue-600 text-white py-2 px-4 rounded" }, "Abha Health Portal"),
            vue$1.createElementVNode("view", { class: "flex space-x-4" }, [
              vue$1.createElementVNode("button", { class: "bg-red-600 text-white py-2 px-4 rounded" }, "Cancel"),
              vue$1.createElementVNode("button", {
                class: "bg-green-600 text-white py-2 px-4 rounded",
                onClick: $setup.save
              }, "Save")
            ])
          ])
        ])
      ])
    ]);
  }
  const PagesLoginInfo = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__scopeId", "data-v-bf9cf9b7"], ["__file", "D:/ty/medical-device/src/pages/login/info.vue"]]);
  __definePage("pages/home/index", PagesHomeIndex);
  __definePage("pages/login/pin", PagesLoginPin);
  __definePage("pages/health/index", PagesHealthIndex);
  __definePage("pages/registeration/index", PagesRegisterationIndex);
  __definePage("pages/health/detection", PagesHealthDetection);
  __definePage("pages/login/index", PagesLoginIndex);
  __definePage("pages/login/info", PagesLoginInfo);
  var isVue2 = false;
  function set(target, key2, val) {
    if (Array.isArray(target)) {
      target.length = Math.max(target.length, key2);
      target.splice(key2, 1, val);
      return val;
    }
    target[key2] = val;
    return val;
  }
  function del(target, key2) {
    if (Array.isArray(target)) {
      target.splice(key2, 1);
      return;
    }
    delete target[key2];
  }
  /*!
  * pinia v2.2.3
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */
  let activePinia;
  const setActivePinia = (pinia) => activePinia = pinia;
  const piniaSymbol = Symbol("pinia");
  function isPlainObject$2(o2) {
    return o2 && typeof o2 === "object" && Object.prototype.toString.call(o2) === "[object Object]" && typeof o2.toJSON !== "function";
  }
  var MutationType;
  (function(MutationType2) {
    MutationType2["direct"] = "direct";
    MutationType2["patchObject"] = "patch object";
    MutationType2["patchFunction"] = "patch function";
  })(MutationType || (MutationType = {}));
  const IS_CLIENT = typeof window !== "undefined";
  const _global = /* @__PURE__ */ (() => typeof window === "object" && window.window === window ? window : typeof self === "object" && self.self === self ? self : typeof global === "object" && global.global === global ? global : typeof globalThis === "object" ? globalThis : { HTMLElement: null })();
  function bom(blob, { autoBom = false } = {}) {
    if (autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
      return new Blob([String.fromCharCode(65279), blob], { type: blob.type });
    }
    return blob;
  }
  function download(url, name2, opts) {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", url);
    xhr.responseType = "blob";
    xhr.onload = function() {
      saveAs(xhr.response, name2, opts);
    };
    xhr.onerror = function() {
      console.error("could not download file");
    };
    xhr.send();
  }
  function corsEnabled(url) {
    const xhr = new XMLHttpRequest();
    xhr.open("HEAD", url, false);
    try {
      xhr.send();
    } catch (e2) {
    }
    return xhr.status >= 200 && xhr.status <= 299;
  }
  function click(node) {
    try {
      node.dispatchEvent(new MouseEvent("click"));
    } catch (e2) {
      const evt = document.createEvent("MouseEvents");
      evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
      node.dispatchEvent(evt);
    }
  }
  const _navigator = typeof navigator === "object" ? navigator : { userAgent: "" };
  const isMacOSWebView = /* @__PURE__ */ (() => /Macintosh/.test(_navigator.userAgent) && /AppleWebKit/.test(_navigator.userAgent) && !/Safari/.test(_navigator.userAgent))();
  const saveAs = !IS_CLIENT ? () => {
  } : (
    // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program
    typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype && !isMacOSWebView ? downloadSaveAs : (
      // Use msSaveOrOpenBlob as a second approach
      "msSaveOrOpenBlob" in _navigator ? msSaveAs : (
        // Fallback to using FileReader and a popup
        fileSaverSaveAs
      )
    )
  );
  function downloadSaveAs(blob, name2 = "download", opts) {
    const a2 = document.createElement("a");
    a2.download = name2;
    a2.rel = "noopener";
    if (typeof blob === "string") {
      a2.href = blob;
      if (a2.origin !== location.origin) {
        if (corsEnabled(a2.href)) {
          download(blob, name2, opts);
        } else {
          a2.target = "_blank";
          click(a2);
        }
      } else {
        click(a2);
      }
    } else {
      a2.href = URL.createObjectURL(blob);
      setTimeout(function() {
        URL.revokeObjectURL(a2.href);
      }, 4e4);
      setTimeout(function() {
        click(a2);
      }, 0);
    }
  }
  function msSaveAs(blob, name2 = "download", opts) {
    if (typeof blob === "string") {
      if (corsEnabled(blob)) {
        download(blob, name2, opts);
      } else {
        const a2 = document.createElement("a");
        a2.href = blob;
        a2.target = "_blank";
        setTimeout(function() {
          click(a2);
        });
      }
    } else {
      navigator.msSaveOrOpenBlob(bom(blob, opts), name2);
    }
  }
  function fileSaverSaveAs(blob, name2, opts, popup) {
    popup = popup || open("", "_blank");
    if (popup) {
      popup.document.title = popup.document.body.innerText = "downloading...";
    }
    if (typeof blob === "string")
      return download(blob, name2, opts);
    const force = blob.type === "application/octet-stream";
    const isSafari = /constructor/i.test(String(_global.HTMLElement)) || "safari" in _global;
    const isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
    if ((isChromeIOS || force && isSafari || isMacOSWebView) && typeof FileReader !== "undefined") {
      const reader = new FileReader();
      reader.onloadend = function() {
        let url = reader.result;
        if (typeof url !== "string") {
          popup = null;
          throw new Error("Wrong reader.result type");
        }
        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, "data:attachment/file;");
        if (popup) {
          popup.location.href = url;
        } else {
          location.assign(url);
        }
        popup = null;
      };
      reader.readAsDataURL(blob);
    } else {
      const url = URL.createObjectURL(blob);
      if (popup)
        popup.location.assign(url);
      else
        location.href = url;
      popup = null;
      setTimeout(function() {
        URL.revokeObjectURL(url);
      }, 4e4);
    }
  }
  function toastMessage(message2, type2) {
    const piniaMessage = "🍍 " + message2;
    if (typeof __VUE_DEVTOOLS_TOAST__ === "function") {
      __VUE_DEVTOOLS_TOAST__(piniaMessage, type2);
    } else if (type2 === "error") {
      console.error(piniaMessage);
    } else if (type2 === "warn") {
      console.warn(piniaMessage);
    } else {
      console.log(piniaMessage);
    }
  }
  function isPinia(o2) {
    return "_a" in o2 && "install" in o2;
  }
  function checkClipboardAccess() {
    if (!("clipboard" in navigator)) {
      toastMessage(`Your browser doesn't support the Clipboard API`, "error");
      return true;
    }
  }
  function checkNotFocusedError(error2) {
    if (error2 instanceof Error && error2.message.toLowerCase().includes("document is not focused")) {
      toastMessage('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.', "warn");
      return true;
    }
    return false;
  }
  function actionGlobalCopyState(pinia) {
    return __async(this, null, function* () {
      if (checkClipboardAccess())
        return;
      try {
        yield navigator.clipboard.writeText(JSON.stringify(pinia.state.value));
        toastMessage("Global state copied to clipboard.");
      } catch (error2) {
        if (checkNotFocusedError(error2))
          return;
        toastMessage(`Failed to serialize the state. Check the console for more details.`, "error");
        console.error(error2);
      }
    });
  }
  function actionGlobalPasteState(pinia) {
    return __async(this, null, function* () {
      if (checkClipboardAccess())
        return;
      try {
        loadStoresState(pinia, JSON.parse(yield navigator.clipboard.readText()));
        toastMessage("Global state pasted from clipboard.");
      } catch (error2) {
        if (checkNotFocusedError(error2))
          return;
        toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, "error");
        console.error(error2);
      }
    });
  }
  function actionGlobalSaveState(pinia) {
    return __async(this, null, function* () {
      try {
        saveAs(new Blob([JSON.stringify(pinia.state.value)], {
          type: "text/plain;charset=utf-8"
        }), "pinia-state.json");
      } catch (error2) {
        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, "error");
        console.error(error2);
      }
    });
  }
  let fileInput;
  function getFileOpener() {
    if (!fileInput) {
      fileInput = document.createElement("input");
      fileInput.type = "file";
      fileInput.accept = ".json";
    }
    function openFile() {
      return new Promise((resolve, reject) => {
        fileInput.onchange = () => __async(this, null, function* () {
          const files = fileInput.files;
          if (!files)
            return resolve(null);
          const file = files.item(0);
          if (!file)
            return resolve(null);
          return resolve({ text: yield file.text(), file });
        });
        fileInput.oncancel = () => resolve(null);
        fileInput.onerror = reject;
        fileInput.click();
      });
    }
    return openFile;
  }
  function actionGlobalOpenStateFile(pinia) {
    return __async(this, null, function* () {
      try {
        const open2 = getFileOpener();
        const result = yield open2();
        if (!result)
          return;
        const { text, file } = result;
        loadStoresState(pinia, JSON.parse(text));
        toastMessage(`Global state imported from "${file.name}".`);
      } catch (error2) {
        toastMessage(`Failed to import the state from JSON. Check the console for more details.`, "error");
        console.error(error2);
      }
    });
  }
  function loadStoresState(pinia, state) {
    for (const key2 in state) {
      const storeState = pinia.state.value[key2];
      if (storeState) {
        Object.assign(storeState, state[key2]);
      } else {
        pinia.state.value[key2] = state[key2];
      }
    }
  }
  function formatDisplay(display) {
    return {
      _custom: {
        display
      }
    };
  }
  const PINIA_ROOT_LABEL = "🍍 Pinia (root)";
  const PINIA_ROOT_ID = "_root";
  function formatStoreForInspectorTree(store2) {
    return isPinia(store2) ? {
      id: PINIA_ROOT_ID,
      label: PINIA_ROOT_LABEL
    } : {
      id: store2.$id,
      label: store2.$id
    };
  }
  function formatStoreForInspectorState(store2) {
    if (isPinia(store2)) {
      const storeNames = Array.from(store2._s.keys());
      const storeMap = store2._s;
      const state2 = {
        state: storeNames.map((storeId) => ({
          editable: true,
          key: storeId,
          value: store2.state.value[storeId]
        })),
        getters: storeNames.filter((id2) => storeMap.get(id2)._getters).map((id2) => {
          const store22 = storeMap.get(id2);
          return {
            editable: false,
            key: id2,
            value: store22._getters.reduce((getters, key2) => {
              getters[key2] = store22[key2];
              return getters;
            }, {})
          };
        })
      };
      return state2;
    }
    const state = {
      state: Object.keys(store2.$state).map((key2) => ({
        editable: true,
        key: key2,
        value: store2.$state[key2]
      }))
    };
    if (store2._getters && store2._getters.length) {
      state.getters = store2._getters.map((getterName) => ({
        editable: false,
        key: getterName,
        value: store2[getterName]
      }));
    }
    if (store2._customProperties.size) {
      state.customProperties = Array.from(store2._customProperties).map((key2) => ({
        editable: true,
        key: key2,
        value: store2[key2]
      }));
    }
    return state;
  }
  function formatEventData(events) {
    if (!events)
      return {};
    if (Array.isArray(events)) {
      return events.reduce((data, event) => {
        data.keys.push(event.key);
        data.operations.push(event.type);
        data.oldValue[event.key] = event.oldValue;
        data.newValue[event.key] = event.newValue;
        return data;
      }, {
        oldValue: {},
        keys: [],
        operations: [],
        newValue: {}
      });
    } else {
      return {
        operation: formatDisplay(events.type),
        key: formatDisplay(events.key),
        oldValue: events.oldValue,
        newValue: events.newValue
      };
    }
  }
  function formatMutationType(type2) {
    switch (type2) {
      case MutationType.direct:
        return "mutation";
      case MutationType.patchFunction:
        return "$patch";
      case MutationType.patchObject:
        return "$patch";
      default:
        return "unknown";
    }
  }
  let isTimelineActive = true;
  const componentStateTypes = [];
  const MUTATIONS_LAYER_ID = "pinia:mutations";
  const INSPECTOR_ID = "pinia";
  const { assign: assign$1 } = Object;
  const getStoreType = (id2) => "🍍 " + id2;
  function registerPiniaDevtools(app, pinia) {
    setupDevtoolsPlugin({
      id: "dev.esm.pinia",
      label: "Pinia 🍍",
      logo: "https://pinia.vuejs.org/logo.svg",
      packageName: "pinia",
      homepage: "https://pinia.vuejs.org",
      componentStateTypes,
      app
    }, (api) => {
      if (typeof api.now !== "function") {
        toastMessage("You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
      }
      api.addTimelineLayer({
        id: MUTATIONS_LAYER_ID,
        label: `Pinia 🍍`,
        color: 15064968
      });
      api.addInspector({
        id: INSPECTOR_ID,
        label: "Pinia 🍍",
        icon: "storage",
        treeFilterPlaceholder: "Search stores",
        actions: [
          {
            icon: "content_copy",
            action: () => {
              actionGlobalCopyState(pinia);
            },
            tooltip: "Serialize and copy the state"
          },
          {
            icon: "content_paste",
            action: () => __async(this, null, function* () {
              yield actionGlobalPasteState(pinia);
              api.sendInspectorTree(INSPECTOR_ID);
              api.sendInspectorState(INSPECTOR_ID);
            }),
            tooltip: "Replace the state with the content of your clipboard"
          },
          {
            icon: "save",
            action: () => {
              actionGlobalSaveState(pinia);
            },
            tooltip: "Save the state as a JSON file"
          },
          {
            icon: "folder_open",
            action: () => __async(this, null, function* () {
              yield actionGlobalOpenStateFile(pinia);
              api.sendInspectorTree(INSPECTOR_ID);
              api.sendInspectorState(INSPECTOR_ID);
            }),
            tooltip: "Import the state from a JSON file"
          }
        ],
        nodeActions: [
          {
            icon: "restore",
            tooltip: 'Reset the state (with "$reset")',
            action: (nodeId) => {
              const store2 = pinia._s.get(nodeId);
              if (!store2) {
                toastMessage(`Cannot reset "${nodeId}" store because it wasn't found.`, "warn");
              } else if (typeof store2.$reset !== "function") {
                toastMessage(`Cannot reset "${nodeId}" store because it doesn't have a "$reset" method implemented.`, "warn");
              } else {
                store2.$reset();
                toastMessage(`Store "${nodeId}" reset.`);
              }
            }
          }
        ]
      });
      api.on.inspectComponent((payload, ctx) => {
        const proxy = payload.componentInstance && payload.componentInstance.proxy;
        if (proxy && proxy._pStores) {
          const piniaStores = payload.componentInstance.proxy._pStores;
          Object.values(piniaStores).forEach((store2) => {
            payload.instanceData.state.push({
              type: getStoreType(store2.$id),
              key: "state",
              editable: true,
              value: store2._isOptionsAPI ? {
                _custom: {
                  value: vue$1.toRaw(store2.$state),
                  actions: [
                    {
                      icon: "restore",
                      tooltip: "Reset the state of this store",
                      action: () => store2.$reset()
                    }
                  ]
                }
              } : (
                // NOTE: workaround to unwrap transferred refs
                Object.keys(store2.$state).reduce((state, key2) => {
                  state[key2] = store2.$state[key2];
                  return state;
                }, {})
              )
            });
            if (store2._getters && store2._getters.length) {
              payload.instanceData.state.push({
                type: getStoreType(store2.$id),
                key: "getters",
                editable: false,
                value: store2._getters.reduce((getters, key2) => {
                  try {
                    getters[key2] = store2[key2];
                  } catch (error2) {
                    getters[key2] = error2;
                  }
                  return getters;
                }, {})
              });
            }
          });
        }
      });
      api.on.getInspectorTree((payload) => {
        if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
          let stores = [pinia];
          stores = stores.concat(Array.from(pinia._s.values()));
          payload.rootNodes = (payload.filter ? stores.filter((store2) => "$id" in store2 ? store2.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree);
        }
      });
      globalThis.$pinia = pinia;
      api.on.getInspectorState((payload) => {
        if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
          const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
          if (!inspectedStore) {
            return;
          }
          if (inspectedStore) {
            if (payload.nodeId !== PINIA_ROOT_ID)
              globalThis.$store = vue$1.toRaw(inspectedStore);
            payload.state = formatStoreForInspectorState(inspectedStore);
          }
        }
      });
      api.on.editInspectorState((payload, ctx) => {
        if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
          const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
          if (!inspectedStore) {
            return toastMessage(`store "${payload.nodeId}" not found`, "error");
          }
          const { path } = payload;
          if (!isPinia(inspectedStore)) {
            if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) {
              path.unshift("$state");
            }
          } else {
            path.unshift("state");
          }
          isTimelineActive = false;
          payload.set(inspectedStore, path, payload.state.value);
          isTimelineActive = true;
        }
      });
      api.on.editComponentState((payload) => {
        if (payload.type.startsWith("🍍")) {
          const storeId = payload.type.replace(/^🍍\s*/, "");
          const store2 = pinia._s.get(storeId);
          if (!store2) {
            return toastMessage(`store "${storeId}" not found`, "error");
          }
          const { path } = payload;
          if (path[0] !== "state") {
            return toastMessage(`Invalid path for store "${storeId}":
${path}
Only state can be modified.`);
          }
          path[0] = "$state";
          isTimelineActive = false;
          payload.set(store2, path, payload.state.value);
          isTimelineActive = true;
        }
      });
    });
  }
  function addStoreToDevtools(app, store2) {
    if (!componentStateTypes.includes(getStoreType(store2.$id))) {
      componentStateTypes.push(getStoreType(store2.$id));
    }
    setupDevtoolsPlugin({
      id: "dev.esm.pinia",
      label: "Pinia 🍍",
      logo: "https://pinia.vuejs.org/logo.svg",
      packageName: "pinia",
      homepage: "https://pinia.vuejs.org",
      componentStateTypes,
      app,
      settings: {
        logStoreChanges: {
          label: "Notify about new/deleted stores",
          type: "boolean",
          defaultValue: true
        }
        // useEmojis: {
        //   label: 'Use emojis in messages ⚡️',
        //   type: 'boolean',
        //   defaultValue: true,
        // },
      }
    }, (api) => {
      const now2 = typeof api.now === "function" ? api.now.bind(api) : Date.now;
      store2.$onAction(({ after, onError, name: name2, args }) => {
        const groupId = runningActionId++;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            title: "🛫 " + name2,
            subtitle: "start",
            data: {
              store: formatDisplay(store2.$id),
              action: formatDisplay(name2),
              args
            },
            groupId
          }
        });
        after((result) => {
          activeAction = void 0;
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID,
            event: {
              time: now2(),
              title: "🛬 " + name2,
              subtitle: "end",
              data: {
                store: formatDisplay(store2.$id),
                action: formatDisplay(name2),
                args,
                result
              },
              groupId
            }
          });
        });
        onError((error2) => {
          activeAction = void 0;
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID,
            event: {
              time: now2(),
              logType: "error",
              title: "💥 " + name2,
              subtitle: "end",
              data: {
                store: formatDisplay(store2.$id),
                action: formatDisplay(name2),
                args,
                error: error2
              },
              groupId
            }
          });
        });
      }, true);
      store2._customProperties.forEach((name2) => {
        vue$1.watch(() => vue$1.unref(store2[name2]), (newValue, oldValue) => {
          api.notifyComponentUpdate();
          api.sendInspectorState(INSPECTOR_ID);
          if (isTimelineActive) {
            api.addTimelineEvent({
              layerId: MUTATIONS_LAYER_ID,
              event: {
                time: now2(),
                title: "Change",
                subtitle: name2,
                data: {
                  newValue,
                  oldValue
                },
                groupId: activeAction
              }
            });
          }
        }, { deep: true });
      });
      store2.$subscribe(({ events, type: type2 }, state) => {
        api.notifyComponentUpdate();
        api.sendInspectorState(INSPECTOR_ID);
        if (!isTimelineActive)
          return;
        const eventData = {
          time: now2(),
          title: formatMutationType(type2),
          data: assign$1({ store: formatDisplay(store2.$id) }, formatEventData(events)),
          groupId: activeAction
        };
        if (type2 === MutationType.patchFunction) {
          eventData.subtitle = "⤵️";
        } else if (type2 === MutationType.patchObject) {
          eventData.subtitle = "🧩";
        } else if (events && !Array.isArray(events)) {
          eventData.subtitle = events.type;
        }
        if (events) {
          eventData.data["rawEvent(s)"] = {
            _custom: {
              display: "DebuggerEvent",
              type: "object",
              tooltip: "raw DebuggerEvent[]",
              value: events
            }
          };
        }
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: eventData
        });
      }, { detached: true, flush: "sync" });
      const hotUpdate = store2._hotUpdate;
      store2._hotUpdate = vue$1.markRaw((newStore) => {
        hotUpdate(newStore);
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            title: "🔥 " + store2.$id,
            subtitle: "HMR update",
            data: {
              store: formatDisplay(store2.$id),
              info: formatDisplay(`HMR update`)
            }
          }
        });
        api.notifyComponentUpdate();
        api.sendInspectorTree(INSPECTOR_ID);
        api.sendInspectorState(INSPECTOR_ID);
      });
      const { $dispose } = store2;
      store2.$dispose = () => {
        $dispose();
        api.notifyComponentUpdate();
        api.sendInspectorTree(INSPECTOR_ID);
        api.sendInspectorState(INSPECTOR_ID);
        api.getSettings().logStoreChanges && toastMessage(`Disposed "${store2.$id}" store 🗑`);
      };
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID);
      api.sendInspectorState(INSPECTOR_ID);
      api.getSettings().logStoreChanges && toastMessage(`"${store2.$id}" store installed 🆕`);
    });
  }
  let runningActionId = 0;
  let activeAction;
  function patchActionForGrouping(store2, actionNames, wrapWithProxy) {
    const actions = actionNames.reduce((storeActions, actionName) => {
      storeActions[actionName] = vue$1.toRaw(store2)[actionName];
      return storeActions;
    }, {});
    for (const actionName in actions) {
      store2[actionName] = function() {
        const _actionId = runningActionId;
        const trackedStore = wrapWithProxy ? new Proxy(store2, {
          get(...args) {
            activeAction = _actionId;
            return Reflect.get(...args);
          },
          set(...args) {
            activeAction = _actionId;
            return Reflect.set(...args);
          }
        }) : store2;
        activeAction = _actionId;
        const retValue = actions[actionName].apply(trackedStore, arguments);
        activeAction = void 0;
        return retValue;
      };
    }
  }
  function devtoolsPlugin({ app, store: store2, options: options2 }) {
    if (store2.$id.startsWith("__hot:")) {
      return;
    }
    store2._isOptionsAPI = !!options2.state;
    if (!store2._p._testing) {
      patchActionForGrouping(store2, Object.keys(options2.actions), store2._isOptionsAPI);
      const originalHotUpdate = store2._hotUpdate;
      vue$1.toRaw(store2)._hotUpdate = function(newStore) {
        originalHotUpdate.apply(this, arguments);
        patchActionForGrouping(store2, Object.keys(newStore._hmrPayload.actions), !!store2._isOptionsAPI);
      };
    }
    addStoreToDevtools(
      app,
      // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?
      store2
    );
  }
  function createPinia() {
    const scope = vue$1.effectScope(true);
    const state = scope.run(() => vue$1.ref({}));
    let _p = [];
    let toBeInstalled = [];
    const pinia = vue$1.markRaw({
      install(app) {
        setActivePinia(pinia);
        {
          pinia._a = app;
          app.provide(piniaSymbol, pinia);
          app.config.globalProperties.$pinia = pinia;
          if (IS_CLIENT) {
            registerPiniaDevtools(app, pinia);
          }
          toBeInstalled.forEach((plugin) => _p.push(plugin));
          toBeInstalled = [];
        }
      },
      use(plugin) {
        if (!this._a && !isVue2) {
          toBeInstalled.push(plugin);
        } else {
          _p.push(plugin);
        }
        return this;
      },
      _p,
      // it's actually undefined here
      // @ts-expect-error
      _a: null,
      _e: scope,
      _s: /* @__PURE__ */ new Map(),
      state
    });
    if (typeof Proxy !== "undefined") {
      pinia.use(devtoolsPlugin);
    }
    return pinia;
  }
  function patchObject(newState, oldState) {
    for (const key2 in oldState) {
      const subPatch = oldState[key2];
      if (!(key2 in newState)) {
        continue;
      }
      const targetValue = newState[key2];
      if (isPlainObject$2(targetValue) && isPlainObject$2(subPatch) && !vue$1.isRef(subPatch) && !vue$1.isReactive(subPatch)) {
        newState[key2] = patchObject(targetValue, subPatch);
      } else {
        {
          newState[key2] = subPatch;
        }
      }
    }
    return newState;
  }
  const noop$1 = () => {
  };
  function addSubscription(subscriptions, callback, detached, onCleanup = noop$1) {
    subscriptions.push(callback);
    const removeSubscription = () => {
      const idx = subscriptions.indexOf(callback);
      if (idx > -1) {
        subscriptions.splice(idx, 1);
        onCleanup();
      }
    };
    if (!detached && vue$1.getCurrentScope()) {
      vue$1.onScopeDispose(removeSubscription);
    }
    return removeSubscription;
  }
  function triggerSubscriptions(subscriptions, ...args) {
    subscriptions.slice().forEach((callback) => {
      callback(...args);
    });
  }
  const fallbackRunWithContext = (fn) => fn();
  const ACTION_MARKER = Symbol();
  const ACTION_NAME = Symbol();
  function mergeReactiveObjects(target, patchToApply) {
    if (target instanceof Map && patchToApply instanceof Map) {
      patchToApply.forEach((value, key2) => target.set(key2, value));
    } else if (target instanceof Set && patchToApply instanceof Set) {
      patchToApply.forEach(target.add, target);
    }
    for (const key2 in patchToApply) {
      if (!patchToApply.hasOwnProperty(key2))
        continue;
      const subPatch = patchToApply[key2];
      const targetValue = target[key2];
      if (isPlainObject$2(targetValue) && isPlainObject$2(subPatch) && target.hasOwnProperty(key2) && !vue$1.isRef(subPatch) && !vue$1.isReactive(subPatch)) {
        target[key2] = mergeReactiveObjects(targetValue, subPatch);
      } else {
        target[key2] = subPatch;
      }
    }
    return target;
  }
  const skipHydrateSymbol = Symbol("pinia:skipHydration");
  function shouldHydrate(obj) {
    return !isPlainObject$2(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
  }
  const { assign: assign$2 } = Object;
  function isComputed(o2) {
    return !!(vue$1.isRef(o2) && o2.effect);
  }
  function createOptionsStore(id2, options2, pinia, hot) {
    const { state, actions, getters } = options2;
    const initialState = pinia.state.value[id2];
    let store2;
    function setup() {
      if (!initialState && !hot) {
        {
          pinia.state.value[id2] = state ? state() : {};
        }
      }
      const localState = hot ? (
        // use ref() to unwrap refs inside state TODO: check if this is still necessary
        vue$1.toRefs(vue$1.ref(state ? state() : {}).value)
      ) : vue$1.toRefs(pinia.state.value[id2]);
      return assign$2(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name2) => {
        if (name2 in localState) {
          console.warn(`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with "${name2}" in store "${id2}".`);
        }
        computedGetters[name2] = vue$1.markRaw(vue$1.computed(() => {
          setActivePinia(pinia);
          const store22 = pinia._s.get(id2);
          return getters[name2].call(store22, store22);
        }));
        return computedGetters;
      }, {}));
    }
    store2 = createSetupStore(id2, setup, options2, pinia, hot, true);
    return store2;
  }
  function createSetupStore($id, setup, options2 = {}, pinia, hot, isOptionsStore) {
    let scope;
    const optionsForPlugin = assign$2({ actions: {} }, options2);
    if (!pinia._e.active) {
      throw new Error("Pinia destroyed");
    }
    const $subscribeOptions = { deep: true };
    {
      $subscribeOptions.onTrigger = (event) => {
        if (isListening) {
          debuggerEvents = event;
        } else if (isListening == false && !store2._hotUpdating) {
          if (Array.isArray(debuggerEvents)) {
            debuggerEvents.push(event);
          } else {
            console.error("🍍 debuggerEvents should be an array. This is most likely an internal Pinia bug.");
          }
        }
      };
    }
    let isListening;
    let isSyncListening;
    let subscriptions = [];
    let actionSubscriptions = [];
    let debuggerEvents;
    const initialState = pinia.state.value[$id];
    if (!isOptionsStore && !initialState && !hot) {
      {
        pinia.state.value[$id] = {};
      }
    }
    const hotState = vue$1.ref({});
    let activeListener;
    function $patch(partialStateOrMutator) {
      let subscriptionMutation;
      isListening = isSyncListening = false;
      {
        debuggerEvents = [];
      }
      if (typeof partialStateOrMutator === "function") {
        partialStateOrMutator(pinia.state.value[$id]);
        subscriptionMutation = {
          type: MutationType.patchFunction,
          storeId: $id,
          events: debuggerEvents
        };
      } else {
        mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);
        subscriptionMutation = {
          type: MutationType.patchObject,
          payload: partialStateOrMutator,
          storeId: $id,
          events: debuggerEvents
        };
      }
      const myListenerId = activeListener = Symbol();
      vue$1.nextTick().then(() => {
        if (activeListener === myListenerId) {
          isListening = true;
        }
      });
      isSyncListening = true;
      triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);
    }
    const $reset = isOptionsStore ? function $reset2() {
      const { state } = options2;
      const newState = state ? state() : {};
      this.$patch(($state) => {
        assign$2($state, newState);
      });
    } : (
      /* istanbul ignore next */
      () => {
        throw new Error(`🍍: Store "${$id}" is built using the setup syntax and does not implement $reset().`);
      }
    );
    function $dispose() {
      scope.stop();
      subscriptions = [];
      actionSubscriptions = [];
      pinia._s.delete($id);
    }
    const action = (fn, name2 = "") => {
      if (ACTION_MARKER in fn) {
        fn[ACTION_NAME] = name2;
        return fn;
      }
      const wrappedAction = function() {
        setActivePinia(pinia);
        const args = Array.from(arguments);
        const afterCallbackList = [];
        const onErrorCallbackList = [];
        function after(callback) {
          afterCallbackList.push(callback);
        }
        function onError(callback) {
          onErrorCallbackList.push(callback);
        }
        triggerSubscriptions(actionSubscriptions, {
          args,
          name: wrappedAction[ACTION_NAME],
          store: store2,
          after,
          onError
        });
        let ret;
        try {
          ret = fn.apply(this && this.$id === $id ? this : store2, args);
        } catch (error2) {
          triggerSubscriptions(onErrorCallbackList, error2);
          throw error2;
        }
        if (ret instanceof Promise) {
          return ret.then((value) => {
            triggerSubscriptions(afterCallbackList, value);
            return value;
          }).catch((error2) => {
            triggerSubscriptions(onErrorCallbackList, error2);
            return Promise.reject(error2);
          });
        }
        triggerSubscriptions(afterCallbackList, ret);
        return ret;
      };
      wrappedAction[ACTION_MARKER] = true;
      wrappedAction[ACTION_NAME] = name2;
      return wrappedAction;
    };
    const _hmrPayload = /* @__PURE__ */ vue$1.markRaw({
      actions: {},
      getters: {},
      state: [],
      hotState
    });
    const partialStore = {
      _p: pinia,
      // _s: scope,
      $id,
      $onAction: addSubscription.bind(null, actionSubscriptions),
      $patch,
      $reset,
      $subscribe(callback, options22 = {}) {
        const removeSubscription = addSubscription(subscriptions, callback, options22.detached, () => stopWatcher());
        const stopWatcher = scope.run(() => vue$1.watch(() => pinia.state.value[$id], (state) => {
          if (options22.flush === "sync" ? isSyncListening : isListening) {
            callback({
              storeId: $id,
              type: MutationType.direct,
              events: debuggerEvents
            }, state);
          }
        }, assign$2({}, $subscribeOptions, options22)));
        return removeSubscription;
      },
      $dispose
    };
    const store2 = vue$1.reactive(assign$2(
      {
        _hmrPayload,
        _customProperties: vue$1.markRaw(/* @__PURE__ */ new Set())
        // devtools custom properties
      },
      partialStore
      // must be added later
      // setupStore
    ));
    pinia._s.set($id, store2);
    const runWithContext = pinia._a && pinia._a.runWithContext || fallbackRunWithContext;
    const setupStore2 = runWithContext(() => pinia._e.run(() => (scope = vue$1.effectScope()).run(() => setup({ action }))));
    for (const key2 in setupStore2) {
      const prop = setupStore2[key2];
      if (vue$1.isRef(prop) && !isComputed(prop) || vue$1.isReactive(prop)) {
        if (hot) {
          set(hotState.value, key2, vue$1.toRef(setupStore2, key2));
        } else if (!isOptionsStore) {
          if (initialState && shouldHydrate(prop)) {
            if (vue$1.isRef(prop)) {
              prop.value = initialState[key2];
            } else {
              mergeReactiveObjects(prop, initialState[key2]);
            }
          }
          {
            pinia.state.value[$id][key2] = prop;
          }
        }
        {
          _hmrPayload.state.push(key2);
        }
      } else if (typeof prop === "function") {
        const actionValue = hot ? prop : action(prop, key2);
        {
          setupStore2[key2] = actionValue;
        }
        {
          _hmrPayload.actions[key2] = prop;
        }
        optionsForPlugin.actions[key2] = prop;
      } else {
        if (isComputed(prop)) {
          _hmrPayload.getters[key2] = isOptionsStore ? (
            // @ts-expect-error
            options2.getters[key2]
          ) : prop;
          if (IS_CLIENT) {
            const getters = setupStore2._getters || // @ts-expect-error: same
            (setupStore2._getters = vue$1.markRaw([]));
            getters.push(key2);
          }
        }
      }
    }
    {
      assign$2(store2, setupStore2);
      assign$2(vue$1.toRaw(store2), setupStore2);
    }
    Object.defineProperty(store2, "$state", {
      get: () => hot ? hotState.value : pinia.state.value[$id],
      set: (state) => {
        if (hot) {
          throw new Error("cannot set hotState");
        }
        $patch(($state) => {
          assign$2($state, state);
        });
      }
    });
    {
      store2._hotUpdate = vue$1.markRaw((newStore) => {
        store2._hotUpdating = true;
        newStore._hmrPayload.state.forEach((stateKey) => {
          if (stateKey in store2.$state) {
            const newStateTarget = newStore.$state[stateKey];
            const oldStateSource = store2.$state[stateKey];
            if (typeof newStateTarget === "object" && isPlainObject$2(newStateTarget) && isPlainObject$2(oldStateSource)) {
              patchObject(newStateTarget, oldStateSource);
            } else {
              newStore.$state[stateKey] = oldStateSource;
            }
          }
          set(store2, stateKey, vue$1.toRef(newStore.$state, stateKey));
        });
        Object.keys(store2.$state).forEach((stateKey) => {
          if (!(stateKey in newStore.$state)) {
            del(store2, stateKey);
          }
        });
        isListening = false;
        isSyncListening = false;
        pinia.state.value[$id] = vue$1.toRef(newStore._hmrPayload, "hotState");
        isSyncListening = true;
        vue$1.nextTick().then(() => {
          isListening = true;
        });
        for (const actionName in newStore._hmrPayload.actions) {
          const actionFn = newStore[actionName];
          set(store2, actionName, action(actionFn, actionName));
        }
        for (const getterName in newStore._hmrPayload.getters) {
          const getter = newStore._hmrPayload.getters[getterName];
          const getterValue = isOptionsStore ? (
            // special handling of options api
            vue$1.computed(() => {
              setActivePinia(pinia);
              return getter.call(store2, store2);
            })
          ) : getter;
          set(store2, getterName, getterValue);
        }
        Object.keys(store2._hmrPayload.getters).forEach((key2) => {
          if (!(key2 in newStore._hmrPayload.getters)) {
            del(store2, key2);
          }
        });
        Object.keys(store2._hmrPayload.actions).forEach((key2) => {
          if (!(key2 in newStore._hmrPayload.actions)) {
            del(store2, key2);
          }
        });
        store2._hmrPayload = newStore._hmrPayload;
        store2._getters = newStore._getters;
        store2._hotUpdating = false;
      });
    }
    if (IS_CLIENT) {
      const nonEnumerable = {
        writable: true,
        configurable: true,
        // avoid warning on devtools trying to display this property
        enumerable: false
      };
      ["_p", "_hmrPayload", "_getters", "_customProperties"].forEach((p2) => {
        Object.defineProperty(store2, p2, assign$2({ value: store2[p2] }, nonEnumerable));
      });
    }
    pinia._p.forEach((extender) => {
      if (IS_CLIENT) {
        const extensions = scope.run(() => extender({
          store: store2,
          app: pinia._a,
          pinia,
          options: optionsForPlugin
        }));
        Object.keys(extensions || {}).forEach((key2) => store2._customProperties.add(key2));
        assign$2(store2, extensions);
      } else {
        assign$2(store2, scope.run(() => extender({
          store: store2,
          app: pinia._a,
          pinia,
          options: optionsForPlugin
        })));
      }
    });
    if (store2.$state && typeof store2.$state === "object" && typeof store2.$state.constructor === "function" && !store2.$state.constructor.toString().includes("[native code]")) {
      console.warn(`[🍍]: The "state" must be a plain object. It cannot be
	state: () => new MyClass()
Found in store "${store2.$id}".`);
    }
    if (initialState && isOptionsStore && options2.hydrate) {
      options2.hydrate(store2.$state, initialState);
    }
    isListening = true;
    isSyncListening = true;
    return store2;
  }
  // @__NO_SIDE_EFFECTS__
  function defineStore(idOrOptions, setup, setupOptions) {
    let id2;
    let options2;
    const isSetupStore = typeof setup === "function";
    {
      id2 = idOrOptions;
      options2 = isSetupStore ? setupOptions : setup;
    }
    function useStore(pinia, hot) {
      const hasContext = vue$1.hasInjectionContext();
      pinia = // in test mode, ignore the argument provided as we can always retrieve a
      // pinia instance with getActivePinia()
      pinia || (hasContext ? vue$1.inject(piniaSymbol, null) : null);
      if (pinia)
        setActivePinia(pinia);
      if (!activePinia) {
        throw new Error(`[🍍]: "getActivePinia()" was called but there was no active Pinia. Are you trying to use a store before calling "app.use(pinia)"?
See https://pinia.vuejs.org/core-concepts/outside-component-usage.html for help.
This will fail in production.`);
      }
      pinia = activePinia;
      if (!pinia._s.has(id2)) {
        if (isSetupStore) {
          createSetupStore(id2, setup, options2, pinia);
        } else {
          createOptionsStore(id2, options2, pinia);
        }
        {
          useStore._pinia = pinia;
        }
      }
      const store2 = pinia._s.get(id2);
      if (hot) {
        const hotId = "__hot:" + id2;
        const newStore = isSetupStore ? createSetupStore(hotId, setup, options2, pinia, true) : createOptionsStore(hotId, assign$2({}, options2), pinia, true);
        hot._hotUpdate(newStore);
        delete pinia.state.value[hotId];
        pinia._s.delete(hotId);
      }
      if (IS_CLIENT) {
        const currentInstance = vue$1.getCurrentInstance();
        if (currentInstance && currentInstance.proxy && // avoid adding stores that are just built for hot module replacement
        !hot) {
          const vm = currentInstance.proxy;
          const cache2 = "_pStores" in vm ? vm._pStores : vm._pStores = {};
          cache2[id2] = store2;
        }
      }
      return store2;
    }
    useStore.$id = id2;
    return useStore;
  }
  class FrameworkReadableState {
    constructor(state, key2, dehydrate, exportState) {
      this.s = state;
      this.k = key2;
      this.$dhy = dehydrate;
      this.$exp = exportState;
    }
    get v() {
      return this.$dhy(this.s);
    }
    get e() {
      return this.$exp(this.s);
    }
  }
  class FrameworkState extends FrameworkReadableState {
    constructor(state, key2, dehydrate, exportState, update) {
      super(state, key2, dehydrate, exportState);
      this.$upd = update;
    }
    set v(newValue) {
      this.$upd(this.s, newValue);
    }
    get v() {
      return super.v;
    }
  }
  const undefStr$4 = "undefined";
  const ObjectCls$1 = Object;
  const undefinedValue$1 = void 0;
  const nullValue$1 = null;
  const trueValue$1 = true;
  const falseValue$1 = false;
  const JSONStringify$1 = (value, replacer, space) => JSON.stringify(value, replacer, space);
  const setTimeoutFn$1 = (fn, delay = 0) => setTimeout(fn, delay);
  const objectKeys$1 = (obj) => ObjectCls$1.keys(obj);
  const forEach$1 = (ary, fn) => ary.forEach(fn);
  const pushItem$3 = (ary, ...item) => ary.push(...item);
  const mapItem$3 = (ary, callbackfn) => ary.map(callbackfn);
  const typeOf = (arg) => typeof arg;
  const includes = (ary, target) => ary.includes(target);
  typeof window === undefStr$4 && (typeof process !== undefStr$4 ? typeof process.cwd === "function" : typeof Deno !== undefStr$4);
  const MEMORY$1 = "memory";
  const STORAGE_RESTORE$1 = "restore";
  const noop = () => {
  };
  const $self = (arg) => arg;
  const isFn = (arg) => typeOf(arg) === "function";
  const isNumber$1 = (arg) => typeOf(arg) === "number" && !Number.isNaN(arg);
  const isString$1 = (arg) => typeOf(arg) === "string";
  const globalToString = (arg) => ObjectCls$1.prototype.toString.call(arg);
  const isPlainObject$1 = (arg) => globalToString(arg) === "[object Object]";
  const instanceOf = (arg, cls) => arg instanceof cls;
  const getTime = (date) => date ? date.getTime() : Date.now();
  const getContext = (methodInstance) => methodInstance.context;
  const getConfig = (methodInstance) => methodInstance.config;
  const getContextOptions = (alovaInstance2) => alovaInstance2.options;
  const getOptions = (methodInstance) => getContextOptions(getContext(methodInstance));
  const key = (methodInstance) => {
    const { params, headers } = getConfig(methodInstance);
    return JSONStringify$1([methodInstance.type, methodInstance.url, params, methodInstance.data, headers]);
  };
  const getMethodInternalKey = (methodInstance) => methodInstance.key;
  const getHandlerMethod = (methodHandler, assert, args = []) => {
    const methodInstance = isFn(methodHandler) ? methodHandler(...args) : methodHandler;
    assert(!!methodInstance.key, "hook handler must be a method instance or a function that returns method instance");
    return methodInstance;
  };
  const isSpecialRequestBody = (data) => {
    const dataTypeString = globalToString(data);
    return /^\[object (Blob|FormData|ReadableStream|URLSearchParams)\]$/i.test(dataTypeString) || instanceOf(data, ArrayBuffer);
  };
  const objAssign = (target, ...sources) => ObjectCls$1.assign(target, ...sources);
  const omit = (obj, ...keys2) => {
    const result = {};
    for (const key2 in obj) {
      if (!keys2.includes(key2)) {
        result[key2] = obj[key2];
      }
    }
    return result;
  };
  const getLocalCacheConfigParam = (methodInstance) => {
    const { cacheFor } = getConfig(methodInstance);
    const getCacheExpireTs = (cacheExpire) => isNumber$1(cacheExpire) ? getTime() + cacheExpire : getTime(cacheExpire || undefinedValue$1);
    let cacheMode = MEMORY$1;
    let expire = () => 0;
    let store2 = falseValue$1;
    let tag = undefinedValue$1;
    const controlled = isFn(cacheFor);
    if (!controlled) {
      let expireColumn = cacheFor;
      if (isPlainObject$1(cacheFor)) {
        const { mode = MEMORY$1, expire: expire2, tag: configTag } = cacheFor || {};
        cacheMode = mode;
        store2 = mode === STORAGE_RESTORE$1;
        tag = configTag ? configTag.toString() : undefinedValue$1;
        expireColumn = expire2;
      }
      expire = (mode) => getCacheExpireTs(isFn(expireColumn) ? expireColumn({ method: methodInstance, mode }) : expireColumn);
    }
    return {
      f: cacheFor,
      c: controlled,
      e: expire,
      m: cacheMode,
      s: store2,
      t: tag
    };
  };
  const newInstance$1 = (Cls, ...args) => new Cls(...args);
  const sloughConfig = (config, args = []) => isFn(config) ? config(...args) : config;
  const sloughFunction = (arg, defaultFn) => isFn(arg) ? arg : ![falseValue$1, nullValue$1].includes(arg) ? defaultFn : noop;
  const createSyncOnceRunner = (delay = 0) => {
    let timer = undefinedValue$1;
    return (fn) => {
      if (timer) {
        clearTimeout(timer);
      }
      timer = setTimeoutFn$1(fn, delay);
    };
  };
  function statesHookHelper(statesHook2, referingObject = { trackedKeys: {}, bindError: falseValue$1 }) {
    const ref = (initialValue) => statesHook2.ref ? statesHook2.ref(initialValue) : { current: initialValue };
    referingObject = ref(referingObject).current;
    const exportState = (state) => (statesHook2.export || $self)(state, referingObject);
    const memorize = (fn) => {
      if (!isFn(statesHook2.memorize)) {
        return fn;
      }
      const memorizedFn = statesHook2.memorize(fn);
      memorizedFn.memorized = true;
      return memorizedFn;
    };
    const { dehydrate } = statesHook2;
    const update = (newValue, state, key2) => newValue !== dehydrate(state, key2, referingObject) && referingObject.trackedKeys[key2] && statesHook2.update(newValue, state, key2, referingObject);
    const mapDeps = (deps) => mapItem$3(deps, (item) => instanceOf(item, FrameworkReadableState) ? item.e : item);
    const createdStateList = [];
    const depKeys = {};
    return {
      create: (initialValue, key2) => {
        pushItem$3(createdStateList, key2);
        return newInstance$1(FrameworkState, statesHook2.create(initialValue, key2, referingObject), key2, (state) => dehydrate(state, key2, referingObject), exportState, (state, newValue) => update(newValue, state, key2));
      },
      computed: (getter, depList, key2) => {
        forEach$1(depList, (dep) => {
          if (dep.k) {
            depKeys[dep.k] = true;
          }
        });
        return newInstance$1(FrameworkReadableState, statesHook2.computed(getter, mapDeps(depList), key2, referingObject), key2, (state) => dehydrate(state, key2, referingObject), exportState);
      },
      effectRequest: (effectRequestParams) => statesHook2.effectRequest(effectRequestParams, referingObject),
      ref,
      watch: (source, callback) => statesHook2.watch(mapDeps(source), callback, referingObject),
      onMounted: (callback) => statesHook2.onMounted(callback, referingObject),
      onUnmounted: (callback) => statesHook2.onUnmounted(callback, referingObject),
      /**
       * refering object that sharing some value with this object.
       */
      __referingObj: referingObject,
      /**
       * expose provider for specified use hook.
       * @param object object that contains state proxy, framework state, operating function and event binder.
       * @returns provider component.
       */
      exposeProvider: (object) => {
        const provider = {};
        const originalStatesMap = {};
        for (const key2 in object) {
          const value = object[key2];
          const isValueFunction = isFn(value);
          if (isValueFunction) {
            provider[key2] = key2.startsWith("on") ? (...args) => {
              value(...args);
              return completedProvider;
            } : value.memorized ? value : memorize(value);
          } else {
            const isFrameworkState = instanceOf(value, FrameworkReadableState);
            if (isFrameworkState) {
              originalStatesMap[key2] = value.s;
            }
            ObjectCls$1.defineProperty(provider, key2, {
              get: () => {
                referingObject.trackedKeys[key2] = trueValue$1;
                return isFrameworkState ? value.e : value;
              },
              // set need to set an function,
              // otherwise it will throw `TypeError: Cannot set property __referingObj of #<Object> which has only a getter` when setting value
              set: noop,
              enumerable: trueValue$1,
              configurable: trueValue$1
            });
          }
        }
        const { update: nestedHookUpdate, __proxyState: nestedProxyState } = provider;
        referingObject.trackedKeys = __spreadValues({}, depKeys);
        referingObject.bindError = falseValue$1;
        const extraProvider = {
          // expose referingObject automatically.
          __referingObj: referingObject,
          // the new updating function that can update the new states and nested hook states.
          update: memorize((newStates) => {
            objectKeys$1(newStates).forEach((key2) => {
              if (includes(createdStateList, key2)) {
                update(newStates[key2], originalStatesMap[key2], key2);
              } else if (key2 in provider && isFn(nestedHookUpdate)) {
                nestedHookUpdate({
                  [key2]: newStates[key2]
                });
              }
            });
          }),
          __proxyState: memorize((key2) => {
            if (includes(createdStateList, key2) && instanceOf(object[key2], FrameworkReadableState)) {
              referingObject.trackedKeys[key2] = trueValue$1;
              return object[key2];
            }
            return nestedProxyState(key2);
          })
        };
        const completedProvider = objAssign(provider, extraProvider);
        return completedProvider;
      },
      /**
       * transform state proxies to object.
       * @param states proxy array of framework states
       * @param filterKey filter key of state proxy
       * @returns an object that contains the states of target form
       */
      objectify: (states, filterKey) => states.reduce((result, item) => {
        result[item.k] = filterKey ? item[filterKey] : item;
        return result;
      }, {}),
      transformState2Proxy: (state, key2) => newInstance$1(FrameworkState, state, key2, (state2) => dehydrate(state2, key2, referingObject), exportState, (state2, newValue) => update(newValue, state2, key2))
    };
  }
  const cacheKeyPrefix = "$a.";
  const buildNamespacedCacheKey = (namespace, key2) => cacheKeyPrefix + namespace + key2;
  const undefStr$3 = "undefined";
  const PromiseCls = Promise;
  const promiseResolve = (value) => PromiseCls.resolve(value);
  const promiseReject = (value) => PromiseCls.reject(value);
  const ObjectCls = Object;
  const RegExpCls = RegExp;
  const undefinedValue = void 0;
  const nullValue = null;
  const trueValue = true;
  const falseValue = false;
  const promiseThen = (promise, onFulfilled, onrejected) => promise.then(onFulfilled, onrejected);
  const promiseCatch = (promise, onrejected) => promise.catch(onrejected);
  const promiseFinally = (promise, onfinally) => promise.finally(onfinally);
  const JSONStringify = (value, replacer, space) => JSON.stringify(value, replacer, space);
  const JSONParse = (value) => JSON.parse(value);
  const setTimeoutFn = (fn, delay = 0) => setTimeout(fn, delay);
  const clearTimeoutTimer = (timer) => clearTimeout(timer);
  const objectKeys = (obj) => ObjectCls.keys(obj);
  const forEach = (ary, fn) => ary.forEach(fn);
  const pushItem$2 = (ary, ...item) => ary.push(...item);
  const mapItem$2 = (ary, callbackfn) => ary.map(callbackfn);
  const filterItem$2 = (ary, predicate) => ary.filter(predicate);
  const len = (data) => data.length;
  const isArray$1 = (arg) => Array.isArray(arg);
  const deleteAttr = (arg, attr) => delete arg[attr];
  const defaultIsSSR = typeof window === undefStr$3 && (typeof process !== undefStr$3 ? typeof process.cwd === "function" : typeof Deno !== undefStr$3);
  const MEMORY = "memory";
  const STORAGE_RESTORE = "restore";
  const undefStr$2 = "undefined";
  typeof window === undefStr$2 && (typeof process !== undefStr$2 ? typeof process.cwd === "function" : typeof Deno !== undefStr$2);
  const newInstance = (Cls, ...args) => new Cls(...args);
  class AlovaError extends Error {
    constructor(prefix, message2, errorCode) {
      super(message2 + (errorCode ? `

For detailed: https://alova.js.org/error#${errorCode}` : ""));
      this.name = `[alova${prefix ? `/${prefix}` : ""}]`;
    }
  }
  const createAssert = (prefix = "") => (expression, message2, errorCode) => {
    if (!expression) {
      throw newInstance(AlovaError, prefix, message2, errorCode);
    }
  };
  let globalConfigMap = {
    autoHitCache: "global",
    ssr: defaultIsSSR
  };
  const titleStyle = "color: black; font-size: 12px; font-weight: bolder";
  var defaultCacheLogger = (response, methodInstance, cacheMode, tag) => {
    const cole = console;
    const log = (...args) => console.log(...args);
    const { url } = methodInstance;
    const isRestoreMode = cacheMode === STORAGE_RESTORE;
    const hdStyle = "\x1B[42m%s\x1B[49m";
    const labelStyle = "\x1B[32m%s\x1B[39m";
    const startSep = ` [HitCache]${url} `;
    const endSepFn = () => Array(len(startSep) + 1).join("^");
    if (globalConfigMap.ssr) {
      log(hdStyle, startSep);
      log(labelStyle, " Cache ", response);
      log(labelStyle, " Mode  ", cacheMode);
      isRestoreMode && log(labelStyle, " Tag   ", tag);
      log(labelStyle, endSepFn());
    } else {
      cole.groupCollapsed ? cole.groupCollapsed("%cHitCache", "padding: 2px 6px; background: #c4fcd3; color: #53b56d;", url) : log(hdStyle, startSep);
      log("%c[Cache]", titleStyle, response);
      log("%c[Mode]", titleStyle, cacheMode);
      isRestoreMode && log("%c[Tag]", titleStyle, tag);
      log("%c[Method]", titleStyle, methodInstance);
      cole.groupEnd ? cole.groupEnd() : log(labelStyle, endSepFn());
    }
  };
  const hitSourceStringCacheKey = (key2) => `hss.${key2}`;
  const hitSourceRegexpPrefix = "hsr.";
  const hitSourceRegexpCacheKey = (regexpStr) => hitSourceRegexpPrefix + regexpStr;
  const unifiedHitSourceRegexpCacheKey = "$$hsrs";
  const regexpSourceFlagSeparator = "__$<>$__";
  const addItem = (obj, item) => {
    obj[item] = 0;
  };
  const setWithCacheAdapter = (namespace, key2, data, expireTimestamp, cacheAdapter, hitSource, tag) => __async(this, null, function* () {
    if (expireTimestamp > getTime() && data) {
      const methodCacheKey = buildNamespacedCacheKey(namespace, key2);
      yield cacheAdapter.set(methodCacheKey, filterItem$2([data, expireTimestamp === Infinity ? undefinedValue : expireTimestamp, tag], Boolean));
      if (hitSource) {
        const hitSourceKeys = {};
        const hitSourceRegexpSources = [];
        forEach(hitSource, (sourceItem) => {
          const isRegexp = instanceOf(sourceItem, RegExpCls);
          const targetHitSourceKey = isRegexp ? sourceItem.source + (sourceItem.flags ? regexpSourceFlagSeparator + sourceItem.flags : "") : sourceItem;
          if (targetHitSourceKey) {
            if (isRegexp && !hitSourceKeys[targetHitSourceKey]) {
              pushItem$2(hitSourceRegexpSources, targetHitSourceKey);
            }
            addItem(hitSourceKeys, isRegexp ? hitSourceRegexpCacheKey(targetHitSourceKey) : hitSourceStringCacheKey(targetHitSourceKey));
          }
        });
        const promises = mapItem$2(objectKeys(hitSourceKeys), (hitSourceKey) => __async(this, null, function* () {
          const targetMethodKeys = (yield cacheAdapter.get(hitSourceKey)) || {};
          addItem(targetMethodKeys, methodCacheKey);
          yield cacheAdapter.set(hitSourceKey, targetMethodKeys);
        }));
        const saveRegexp = () => __async(this, null, function* () {
          if (len(hitSourceRegexpSources)) {
            const regexpList = (yield cacheAdapter.get(unifiedHitSourceRegexpCacheKey)) || [];
            pushItem$2(regexpList, ...hitSourceRegexpSources);
            yield cacheAdapter.set(unifiedHitSourceRegexpCacheKey, regexpList);
          }
        });
        yield PromiseCls.all([...promises, saveRegexp()]);
      }
    }
  });
  const removeWithCacheAdapter = (namespace, key2, cacheAdapter) => __async(this, null, function* () {
    const methodStoreKey = buildNamespacedCacheKey(namespace, key2);
    yield cacheAdapter.remove(methodStoreKey);
  });
  const getRawWithCacheAdapter = (namespace, key2, cacheAdapter, tag) => __async(this, null, function* () {
    const storagedData = yield cacheAdapter.get(buildNamespacedCacheKey(namespace, key2));
    if (storagedData) {
      const [_2, expireTimestamp, storedTag] = storagedData;
      if (storedTag === tag && (!expireTimestamp || expireTimestamp > getTime())) {
        return storagedData;
      }
      yield removeWithCacheAdapter(namespace, key2, cacheAdapter);
    }
  });
  const getWithCacheAdapter = (namespace, key2, cacheAdapter, tag) => __async(this, null, function* () {
    const rawData = yield getRawWithCacheAdapter(namespace, key2, cacheAdapter, tag);
    return rawData ? rawData[0] : undefinedValue;
  });
  const hitTargetCacheWithCacheAdapter = (sourceKey, sourceName, cacheAdapter) => __async(this, null, function* () {
    const sourceNameStr = `${sourceName}`;
    const sourceTargetKeyMap = {};
    const hitSourceKey = hitSourceStringCacheKey(sourceKey);
    sourceTargetKeyMap[hitSourceKey] = yield cacheAdapter.get(hitSourceKey);
    let unifiedHitSourceRegexpChannel;
    if (sourceName) {
      const hitSourceName = hitSourceStringCacheKey(sourceNameStr);
      sourceTargetKeyMap[hitSourceName] = yield cacheAdapter.get(hitSourceName);
      unifiedHitSourceRegexpChannel = yield cacheAdapter.get(unifiedHitSourceRegexpCacheKey);
      const matchedRegexpStrings = [];
      if (unifiedHitSourceRegexpChannel && len(unifiedHitSourceRegexpChannel)) {
        forEach(unifiedHitSourceRegexpChannel, (regexpStr) => {
          const [source, flag2] = regexpStr.split(regexpSourceFlagSeparator);
          if (newInstance$1(RegExpCls, source, flag2).test(sourceNameStr)) {
            pushItem$2(matchedRegexpStrings, regexpStr);
          }
        });
        yield PromiseCls.all(mapItem$2(matchedRegexpStrings, (regexpString) => __async(this, null, function* () {
          const hitSourceRegexpString = hitSourceRegexpCacheKey(regexpString);
          sourceTargetKeyMap[hitSourceRegexpString] = yield cacheAdapter.get(hitSourceRegexpString);
        })));
      }
    }
    const removeWithTargetKey = (targetKey) => __async(this, null, function* () {
      try {
        yield cacheAdapter.remove(targetKey);
        for (const sourceKey2 in sourceTargetKeyMap) {
          const targetKeys = sourceTargetKeyMap[sourceKey2];
          if (targetKeys) {
            deleteAttr(targetKeys, targetKey);
          }
        }
      } catch (error2) {
      }
    });
    const accessedKeys = {};
    yield PromiseCls.all(mapItem$2(objectKeys(sourceTargetKeyMap), (sourceKey2) => __async(this, null, function* () {
      const targetKeys = sourceTargetKeyMap[sourceKey2];
      if (targetKeys) {
        const removingPromises = [];
        for (const key2 in targetKeys) {
          if (!accessedKeys[key2]) {
            addItem(accessedKeys, key2);
            pushItem$2(removingPromises, removeWithTargetKey(key2));
          }
        }
        yield PromiseCls.all(removingPromises);
      }
    })));
    const unifiedHitSourceRegexpChannelLen = len(unifiedHitSourceRegexpChannel || []);
    yield PromiseCls.all(mapItem$2(objectKeys(sourceTargetKeyMap), (sourceKey2) => __async(this, null, function* () {
      const targetKeys = sourceTargetKeyMap[sourceKey2];
      if (targetKeys) {
        if (len(objectKeys(targetKeys))) {
          yield cacheAdapter.set(sourceKey2, targetKeys);
        } else {
          yield cacheAdapter.remove(sourceKey2);
          if (sourceKey2.includes(hitSourceRegexpPrefix) && unifiedHitSourceRegexpChannel) {
            unifiedHitSourceRegexpChannel = filterItem$2(unifiedHitSourceRegexpChannel, (rawRegexpStr) => hitSourceRegexpCacheKey(rawRegexpStr) !== sourceKey2);
          }
        }
      }
    })));
    if (unifiedHitSourceRegexpChannelLen !== len(unifiedHitSourceRegexpChannel || [])) {
      yield cacheAdapter.set(unifiedHitSourceRegexpCacheKey, unifiedHitSourceRegexpChannel);
    }
  });
  var cloneMethod = (methodInstance) => {
    const { data, config } = methodInstance;
    const newConfig = __spreadValues({}, config);
    const { headers = {}, params = {} } = newConfig;
    const ctx = getContext(methodInstance);
    newConfig.headers = __spreadValues({}, headers);
    newConfig.params = __spreadValues({}, params);
    const newMethod = newInstance$1(Method, methodInstance.type, ctx, methodInstance.url, newConfig, data);
    return objAssign(newMethod, __spreadProps(__spreadValues({}, methodInstance), {
      config: newConfig
    }));
  };
  const queryCache = (_0, ..._1) => __async(this, [_0, ..._1], function* (matcher, { policy = "all" } = {}) {
    if (matcher && matcher.key) {
      const { id: id2, l1Cache, l2Cache } = getContext(matcher);
      const methodKey = getMethodInternalKey(matcher);
      const { f: cacheFor, c: controlled, s: store2, e: expireMilliseconds, t: tag } = getLocalCacheConfigParam(matcher);
      if (controlled) {
        return cacheFor();
      }
      let cachedData = policy !== "l2" ? yield getWithCacheAdapter(id2, methodKey, l1Cache) : undefinedValue;
      if (policy === "l2") {
        cachedData = yield getWithCacheAdapter(id2, methodKey, l2Cache, tag);
      } else if (policy === "all" && !cachedData) {
        if (store2 && expireMilliseconds(STORAGE_RESTORE) > getTime()) {
          cachedData = yield getWithCacheAdapter(id2, methodKey, l2Cache, tag);
        }
      }
      return cachedData;
    }
  });
  const hitCacheBySource = (sourceMethod) => __async(this, null, function* () {
    const { autoHitCache } = globalConfigMap;
    const { l1Cache, l2Cache } = getContext(sourceMethod);
    const sourceKey = getMethodInternalKey(sourceMethod);
    const { name: sourceName } = getConfig(sourceMethod);
    const cacheAdaptersInvolved = {
      global: [...usingL1CacheAdapters, ...usingL2CacheAdapters],
      self: [l1Cache, l2Cache],
      close: []
    }[autoHitCache];
    if (cacheAdaptersInvolved && len(cacheAdaptersInvolved)) {
      yield PromiseCls.all(mapItem$2(cacheAdaptersInvolved, (involvedCacheAdapter) => hitTargetCacheWithCacheAdapter(sourceKey, sourceName, involvedCacheAdapter)));
    }
  });
  const adapterReturnMap = {};
  const buildCompletedURL = (baseURL, url, params) => {
    baseURL = baseURL.endsWith("/") ? baseURL.slice(0, -1) : baseURL;
    if (url !== "") {
      url = url.match(/^(\/|https?:\/\/)/) ? url : `/${url}`;
    }
    const completeURL = baseURL + url;
    const paramsStr = mapItem$2(filterItem$2(objectKeys(params), (key2) => params[key2] !== undefinedValue), (key2) => `${key2}=${params[key2]}`).join("&");
    return paramsStr ? +completeURL.includes("?") ? `${completeURL}&${paramsStr}` : `${completeURL}?${paramsStr}` : completeURL;
  };
  function sendRequest(methodInstance, forceRequest) {
    let fromCache = trueValue;
    let requestAdapterCtrlsPromiseResolveFn;
    const requestAdapterCtrlsPromise = newInstance$1(PromiseCls, (resolve) => {
      requestAdapterCtrlsPromiseResolveFn = resolve;
    });
    const response = () => __async(this, null, function* () {
      const { beforeRequest = noop, responded, requestAdapter: requestAdapter2, cacheLogger } = getOptions(methodInstance);
      const methodKey = getMethodInternalKey(methodInstance);
      const { s: toStorage, t: tag, m: cacheMode, e: expireMilliseconds } = getLocalCacheConfigParam(methodInstance);
      const { id: id2, l1Cache, l2Cache, snapshots } = getContext(methodInstance);
      const { cacheFor } = getConfig(methodInstance);
      const { hitSource: methodHitSource } = methodInstance;
      let cachedResponse = yield isFn(cacheFor) ? cacheFor() : (
        // 如果是强制请求的，则跳过从缓存中获取的步骤
        // 否则判断是否使用缓存数据
        forceRequest ? undefinedValue : getWithCacheAdapter(id2, methodKey, l1Cache)
      );
      if (cacheMode === STORAGE_RESTORE && !cachedResponse) {
        const rawL2CacheData = yield getRawWithCacheAdapter(id2, methodKey, l2Cache, tag);
        if (rawL2CacheData) {
          const [l2Response, l2ExpireMilliseconds] = rawL2CacheData;
          yield setWithCacheAdapter(id2, methodKey, l2Response, l2ExpireMilliseconds, l1Cache, methodHitSource);
          cachedResponse = l2Response;
        }
      }
      const clonedMethod = cloneMethod(methodInstance);
      yield beforeRequest(clonedMethod);
      const { baseURL, url: newUrl, type: type2, data } = clonedMethod;
      const { params = {}, headers = {}, transform = $self, shareRequest } = getConfig(clonedMethod);
      const namespacedAdapterReturnMap = adapterReturnMap[id2] = adapterReturnMap[id2] || {};
      let requestAdapterCtrls = namespacedAdapterReturnMap[methodKey];
      let responseSuccessHandler = $self;
      let responseErrorHandler = undefinedValue;
      let responseCompleteHandler = noop;
      if (isFn(responded)) {
        responseSuccessHandler = responded;
      } else if (isPlainObject$1(responded)) {
        const { onSuccess: successHandler, onError: errorHandler, onComplete: completeHandler } = responded;
        responseSuccessHandler = isFn(successHandler) ? successHandler : responseSuccessHandler;
        responseErrorHandler = isFn(errorHandler) ? errorHandler : responseErrorHandler;
        responseCompleteHandler = isFn(completeHandler) ? completeHandler : responseCompleteHandler;
      }
      if (cachedResponse !== undefinedValue) {
        requestAdapterCtrlsPromiseResolveFn();
        sloughFunction(cacheLogger, defaultCacheLogger)(cachedResponse, clonedMethod, cacheMode, tag);
        responseCompleteHandler(clonedMethod);
        return cachedResponse;
      }
      fromCache = falseValue;
      if (!shareRequest || !requestAdapterCtrls) {
        const ctrls = requestAdapter2({
          url: buildCompletedURL(baseURL, newUrl, params),
          type: type2,
          data,
          headers
        }, clonedMethod);
        requestAdapterCtrls = namespacedAdapterReturnMap[methodKey] = ctrls;
      }
      requestAdapterCtrlsPromiseResolveFn(requestAdapterCtrls);
      const handleResponseTask = (_0, _1, ..._2) => __async(this, [_0, _1, ..._2], function* (handlerReturns, responseHeaders, callInSuccess = trueValue) {
        const responseData = yield handlerReturns;
        const transformedData = yield transform(responseData, responseHeaders || {});
        snapshots.save(methodInstance);
        try {
          yield hitCacheBySource(clonedMethod);
        } catch (error2) {
        }
        const requestBody = clonedMethod.data;
        const toCache = !requestBody || !isSpecialRequestBody(requestBody);
        if (toCache && callInSuccess) {
          try {
            yield PromiseCls.all([
              setWithCacheAdapter(id2, methodKey, transformedData, expireMilliseconds(MEMORY), l1Cache, methodHitSource),
              toStorage && setWithCacheAdapter(id2, methodKey, transformedData, expireMilliseconds(STORAGE_RESTORE), l2Cache, methodHitSource, tag)
            ]);
          } catch (error2) {
          }
        }
        return transformedData;
      });
      return promiseFinally(promiseThen(PromiseCls.all([requestAdapterCtrls.response(), requestAdapterCtrls.headers()]), ([rawResponse, rawHeaders]) => {
        deleteAttr(namespacedAdapterReturnMap, methodKey);
        return handleResponseTask(responseSuccessHandler(rawResponse, clonedMethod), rawHeaders);
      }, (error2) => {
        deleteAttr(namespacedAdapterReturnMap, methodKey);
        return isFn(responseErrorHandler) ? (
          // 响应错误时，如果未抛出错误也将会处理响应成功的流程，但不缓存数据
          handleResponseTask(responseErrorHandler(error2, clonedMethod), undefinedValue, falseValue)
        ) : promiseReject(error2);
      }), () => {
        responseCompleteHandler(clonedMethod);
      });
    });
    return {
      // 请求中断函数
      abort: () => {
        promiseThen(requestAdapterCtrlsPromise, (requestAdapterCtrls) => requestAdapterCtrls && requestAdapterCtrls.abort());
      },
      onDownload: (handler) => {
        promiseThen(requestAdapterCtrlsPromise, (requestAdapterCtrls) => requestAdapterCtrls && requestAdapterCtrls.onDownload && requestAdapterCtrls.onDownload(handler));
      },
      onUpload: (handler) => {
        promiseThen(requestAdapterCtrlsPromise, (requestAdapterCtrls) => requestAdapterCtrls && requestAdapterCtrls.onUpload && requestAdapterCtrls.onUpload(handler));
      },
      response,
      fromCache: () => fromCache
    };
  }
  const offEventCallback = (offHandler, handlers) => () => {
    const index = handlers.indexOf(offHandler);
    index >= 0 && handlers.splice(index, 1);
  };
  class Method {
    constructor(type2, context, url, config, data) {
      this.dhs = [];
      this.uhs = [];
      this.fromCache = undefinedValue;
      const abortRequest = () => {
        abortRequest.a();
      };
      abortRequest.a = noop;
      const instance = this;
      const contextOptions = getContextOptions(context);
      instance.abort = abortRequest;
      instance.baseURL = contextOptions.baseURL || "";
      instance.url = url;
      instance.type = type2;
      instance.context = context;
      const contextConcatConfig = {};
      const mergedLocalCacheKey = "cacheFor";
      const globalLocalCache = isPlainObject$1(contextOptions[mergedLocalCacheKey]) ? contextOptions[mergedLocalCacheKey][type2] : undefinedValue;
      const hitSource = config && config.hitSource;
      forEach(["timeout", "shareRequest"], (mergedKey) => {
        if (contextOptions[mergedKey] !== undefinedValue) {
          contextConcatConfig[mergedKey] = contextOptions[mergedKey];
        }
      });
      if (globalLocalCache !== undefinedValue) {
        contextConcatConfig[mergedLocalCacheKey] = globalLocalCache;
      }
      if (hitSource) {
        instance.hitSource = mapItem$2(isArray$1(hitSource) ? hitSource : [hitSource], (sourceItem) => instanceOf(sourceItem, Method) ? getMethodInternalKey(sourceItem) : sourceItem);
        deleteAttr(config, "hitSource");
      }
      instance.config = __spreadValues(__spreadProps(__spreadValues({}, contextConcatConfig), {
        headers: {},
        params: {}
      }), config || {});
      instance.data = data;
      instance.meta = config ? config.meta : instance.meta;
      instance.key = instance.generateKey();
    }
    /**
     * 绑定下载进度回调函数
     * @param progressHandler 下载进度回调函数
     * @version 2.17.0
     * @return 解绑函数
     */
    onDownload(downloadHandler) {
      pushItem$2(this.dhs, downloadHandler);
      return offEventCallback(downloadHandler, this.dhs);
    }
    /**
     * 绑定上传进度回调函数
     * @param progressHandler 上传进度回调函数
     * @version 2.17.0
     * @return 解绑函数
     */
    onUpload(uploadHandler) {
      pushItem$2(this.uhs, uploadHandler);
      return offEventCallback(uploadHandler, this.uhs);
    }
    /**
     * 通过method实例发送请求，返回promise对象
     */
    send(forceRequest = falseValue) {
      const instance = this;
      const { response, onDownload, onUpload, abort, fromCache } = sendRequest(instance, forceRequest);
      len(instance.dhs) > 0 && onDownload((loaded, total) => forEach(instance.dhs, (handler) => handler({ loaded, total })));
      len(instance.uhs) > 0 && onUpload((loaded, total) => forEach(instance.uhs, (handler) => handler({ loaded, total })));
      instance.abort.a = abort;
      instance.fromCache = undefinedValue;
      instance.promise = promiseThen(response(), (r2) => {
        instance.fromCache = fromCache();
        return r2;
      });
      return instance.promise;
    }
    /**
     * 设置方法名称，如果已有名称将被覆盖
     * @param name 方法名称
     */
    setName(name2) {
      getConfig(this).name = name2;
    }
    generateKey() {
      return key(this);
    }
    /**
     * 绑定resolve和/或reject Promise的callback
     * @param onfulfilled resolve Promise时要执行的回调
     * @param onrejected 当Promise被reject时要执行的回调
     * @returns 返回一个Promise，用于执行任何回调
     */
    then(onfulfilled, onrejected) {
      return promiseThen(this.send(), onfulfilled, onrejected);
    }
    /**
     * 绑定一个仅用于reject Promise的回调
     * @param onrejected 当Promise被reject时要执行的回调
     * @returns 返回一个完成回调的Promise
     */
    catch(onrejected) {
      return promiseCatch(this.send(), onrejected);
    }
    /**
     * 绑定一个回调，该回调在Promise结算（resolve或reject）时调用
     * @param onfinally Promise结算（resolve或reject）时执行的回调。
     * @return 返回一个完成回调的Promise。
     */
    finally(onfinally) {
      return promiseFinally(this.send(), onfinally);
    }
  }
  const myAssert = createAssert();
  const undefStr$1 = "undefined";
  const pushItem$1 = (ary, ...item) => ary.push(...item);
  const mapItem$1 = (ary, callbackfn) => ary.map(callbackfn);
  const filterItem$1 = (ary, predicate) => ary.filter(predicate);
  typeof window === undefStr$1 && (typeof process !== undefStr$1 ? typeof process.cwd === "function" : typeof Deno !== undefStr$1);
  const createEventManager$1 = () => {
    const eventMap = {};
    return {
      eventMap,
      on(type2, handler) {
        const eventTypeItem = eventMap[type2] = eventMap[type2] || [];
        pushItem$1(eventTypeItem, handler);
        return () => {
          eventMap[type2] = filterItem$1(eventTypeItem, (item) => item !== handler);
        };
      },
      off(type2, handler) {
        const handlers = eventMap[type2];
        if (!handlers) {
          return;
        }
        if (handler) {
          const index = handlers.indexOf(handler);
          index > -1 && handlers.splice(index, 1);
        } else {
          delete eventMap[type2];
        }
      },
      emit(type2, event) {
        const handlers = eventMap[type2] || [];
        return mapItem$1(handlers, (handler) => handler(event));
      }
    };
  };
  const EVENT_SUCCESS_KEY = "success";
  const memoryAdapter = () => {
    let l1Cache = {};
    const l1CacheEmitter = createEventManager$1();
    const adapter = {
      set(key2, value) {
        l1Cache[key2] = value;
        l1CacheEmitter.emit(EVENT_SUCCESS_KEY, { type: "set", key: key2, value, container: l1Cache });
      },
      get: (key2) => {
        const value = l1Cache[key2];
        l1CacheEmitter.emit(EVENT_SUCCESS_KEY, { type: "get", key: key2, value, container: l1Cache });
        return value;
      },
      remove(key2) {
        deleteAttr(l1Cache, key2);
        l1CacheEmitter.emit(EVENT_SUCCESS_KEY, { type: "remove", key: key2, container: l1Cache });
      },
      clear: () => {
        l1Cache = {};
        l1CacheEmitter.emit(EVENT_SUCCESS_KEY, { type: "clear", key: "", container: l1Cache });
      },
      emitter: l1CacheEmitter
    };
    return adapter;
  };
  const storage$1 = () => {
    myAssert(typeof localStorage !== "undefined", "l2Cache is not defined.");
    return localStorage;
  };
  const localStorageAdapter = () => {
    const l2CacheEmitter = createEventManager$1();
    const adapter = {
      set: (key2, value) => {
        storage$1().setItem(key2, JSONStringify(value));
        l2CacheEmitter.emit(EVENT_SUCCESS_KEY, { type: "set", key: key2, value, container: storage$1() });
      },
      get: (key2) => {
        const data = storage$1().getItem(key2);
        const value = data ? JSONParse(data) : data;
        l2CacheEmitter.emit(EVENT_SUCCESS_KEY, { type: "get", key: key2, value, container: storage$1() });
        return value;
      },
      remove: (key2) => {
        storage$1().removeItem(key2);
        l2CacheEmitter.emit(EVENT_SUCCESS_KEY, { type: "remove", key: key2, container: storage$1() });
      },
      clear: () => {
        storage$1().clear();
        l2CacheEmitter.emit(EVENT_SUCCESS_KEY, { type: "clear", key: "", container: storage$1() });
      },
      emitter: l2CacheEmitter
    };
    return adapter;
  };
  const SetCls = Set;
  class MethodSnapshotContainer {
    constructor(capacity) {
      this.records = {};
      this.occupy = 0;
      myAssert(capacity >= 0, "expected snapshots limit to be >= 0");
      this.capacity = capacity;
    }
    /**
     * 保存method实例快照
     * @param methodInstance method实例
     */
    save(methodInstance) {
      const { name: name2 } = getConfig(methodInstance);
      const { records, occupy, capacity } = this;
      if (name2 && occupy < capacity) {
        const targetSnapshots = records[name2] = records[name2] || newInstance$1(SetCls);
        targetSnapshots.add(methodInstance);
        this.occupy += 1;
      }
    }
    /**
     * 获取Method实例快照，它将根据matcher来筛选出对应的Method实例
     * @param matcher 匹配的快照名称，可以是字符串或正则表达式、或带过滤函数的对象
     * @returns 匹配到的Method实例快照数组
     */
    match(matcher, matchAll = true) {
      let nameString;
      let nameReg;
      let matchHandler;
      let nameMatcher = matcher;
      if (isPlainObject$1(matcher)) {
        nameMatcher = matcher.name;
        matchHandler = matcher.filter;
      }
      if (instanceOf(nameMatcher, RegExpCls)) {
        nameReg = nameMatcher;
      } else if (isString$1(nameMatcher)) {
        nameString = nameMatcher;
      }
      const { records } = this;
      let matches = newInstance$1(SetCls);
      if (nameString) {
        matches = records[nameString] || matches;
      } else if (nameReg) {
        forEach(filterItem$2(objectKeys(records), (methodName) => nameReg.test(methodName)), (methodName) => {
          records[methodName].forEach((method) => matches.add(method));
        });
      }
      const fromMatchesArray = isFn(matchHandler) ? filterItem$2([...matches], matchHandler) : [...matches];
      return matchAll ? fromMatchesArray : fromMatchesArray[0];
    }
  }
  const typeGet = "GET";
  const typeHead = "HEAD";
  const typePost = "POST";
  const typePut = "PUT";
  const typePatch = "PATCH";
  const typeDelete = "DELETE";
  const typeOptions = "OPTIONS";
  const defaultAlovaOptions = {
    /**
     * GET请求默认缓存5分钟（300000毫秒），其他请求默认不缓存
     */
    cacheFor: {
      [typeGet]: 3e5
    },
    /**
     * 共享请求默认为true
     */
    shareRequest: trueValue,
    /**
     * method快照数量，默认为1000
     */
    snapshots: 1e3
  };
  let idCount = 0;
  class Alova {
    constructor(options2) {
      var _a, _b;
      const instance = this;
      instance.id = (options2.id || (idCount += 1)).toString();
      instance.l1Cache = options2.l1Cache || memoryAdapter();
      instance.l2Cache = options2.l2Cache || localStorageAdapter();
      instance.options = __spreadValues(__spreadValues({}, defaultAlovaOptions), options2);
      instance.snapshots = newInstance$1(MethodSnapshotContainer, (_b = (_a = options2.snapshots) !== null && _a !== void 0 ? _a : defaultAlovaOptions.snapshots) !== null && _b !== void 0 ? _b : 0);
    }
    Get(url, config) {
      return newInstance$1(Method, typeGet, this, url, config);
    }
    Post(url, data, config) {
      return newInstance$1(Method, typePost, this, url, config, data);
    }
    Delete(url, data, config) {
      return newInstance$1(Method, typeDelete, this, url, config, data);
    }
    Put(url, data, config) {
      return newInstance$1(Method, typePut, this, url, config, data);
    }
    Head(url, config) {
      return newInstance$1(Method, typeHead, this, url, config);
    }
    Patch(url, data, config) {
      return newInstance$1(Method, typePatch, this, url, config, data);
    }
    Options(url, config) {
      return newInstance$1(Method, typeOptions, this, url, config);
    }
  }
  let boundStatesHook = undefinedValue;
  const usingL1CacheAdapters = [];
  const usingL2CacheAdapters = [];
  const createAlova = (options2) => {
    const alovaInstance2 = newInstance$1(Alova, options2);
    const newStatesHook = alovaInstance2.options.statesHook;
    if (boundStatesHook) {
      myAssert(boundStatesHook === newStatesHook, "expected to use the same `statesHook`");
    }
    boundStatesHook = newStatesHook;
    const { l1Cache, l2Cache } = alovaInstance2;
    !usingL1CacheAdapters.includes(l1Cache) && pushItem$2(usingL1CacheAdapters, l1Cache);
    !usingL2CacheAdapters.includes(l2Cache) && pushItem$2(usingL2CacheAdapters, l2Cache);
    return alovaInstance2;
  };
  const promiseStatesHook = () => {
    myAssert(!!boundStatesHook, `\`statesHook\` is not set in alova instance`);
    return boundStatesHook;
  };
  var vue = {
    name: "Vue",
    create: (data) => vue$1.ref(data),
    dehydrate: (state) => state.value,
    update: (newVal, state) => {
      state.value = newVal;
    },
    effectRequest({ handler, removeStates, immediate, watchingStates }) {
      if (vue$1.getCurrentInstance()) {
        vue$1.onUnmounted(removeStates);
        vue$1.onMounted(() => immediate && handler());
      } else {
        setTimeoutFn(() => {
          immediate && handler();
        });
      }
      const syncRunner = createSyncOnceRunner();
      forEach(watchingStates || [], (state, i2) => {
        vue$1.watch(state, () => {
          syncRunner(() => {
            handler(i2);
          });
        }, { deep: trueValue });
      });
    },
    computed: (getter) => vue$1.computed(getter),
    watch: (states, callback) => {
      vue$1.watch(states, callback, {
        deep: trueValue
      });
    },
    onMounted: (callback) => {
      if (vue$1.getCurrentInstance()) {
        vue$1.onMounted(callback);
      } else {
        setTimeoutFn(callback, 10);
      }
    },
    onUnmounted: (callback) => {
      vue$1.getCurrentInstance() && vue$1.onUnmounted(callback);
    }
  };
  var l2CacheAdapter = {
    get(key2) {
      return uni.getStorageSync(key2);
    },
    set(key2, value) {
      uni.setStorageSync(key2, value);
    },
    remove(key2) {
      uni.removeStorageSync(key2);
    },
    clear() {
      uni.clearStorageSync();
    }
  };
  const requestAdapter = (elements, method) => {
    const { url, data, type: type2, headers: header } = elements;
    let taskInstance;
    let onDownload = noop;
    let onUpload = noop;
    const responsePromise = new Promise((resolve, reject) => {
      const { config: adapterConfig } = method;
      const { requestType, timeout } = adapterConfig;
      if (requestType === "upload") {
        const formData = {};
        const fileData = {};
        if (isPlainObject$1(data)) {
          Object.keys(data).forEach((key2) => {
            if (["name", "files", "file", "filePath"].includes(key2)) {
              fileData[key2] = data[key2];
            } else {
              formData[key2] = data[key2];
            }
          });
        }
        const uploadTask = taskInstance = uni.uploadFile(__spreadProps(__spreadValues(__spreadValues({}, adapterConfig), fileData), {
          name: fileData.name,
          url,
          header,
          formData,
          timeout,
          success: (res) => resolve(res),
          fail: (reason) => reject(new Error(reason.errMsg)),
          complete: noop
        }));
        onUpload = (handler) => {
          uploadTask.onProgressUpdate(({ totalBytesSent, totalBytesExpectedToSend }) => {
            handler(totalBytesSent, totalBytesExpectedToSend);
          });
        };
      } else if (requestType === "download") {
        const downloadTask = taskInstance = uni.downloadFile(__spreadProps(__spreadValues({}, adapterConfig), {
          url,
          header,
          timeout,
          success: (res) => resolve(res),
          fail: (reason) => reject(new Error(reason.errMsg)),
          complete: noop
        }));
        onDownload = (handler) => {
          downloadTask.onProgressUpdate(({ totalBytesWritten, totalBytesExpectedToWrite }) => {
            handler(totalBytesWritten, totalBytesExpectedToWrite);
          });
        };
      } else {
        taskInstance = uni.request(__spreadProps(__spreadValues({}, adapterConfig), {
          url,
          data,
          header,
          method: type2,
          timeout,
          success: (res) => resolve(res),
          fail: (reason) => reject(new Error(reason.errMsg))
        }));
      }
    });
    return {
      response: () => responsePromise,
      headers: () => responsePromise.then((res) => res.header || {}),
      abort: () => {
        taskInstance.abort();
      },
      onDownload,
      onUpload
    };
  };
  var statesHook = __spreadProps(__spreadValues({}, vue), {
    effectRequest(effectRequestParams, referingObject) {
      const { handler } = effectRequestParams;
      effectRequestParams.handler = (...args) => {
        len(args) > 0 ? handler(...args) : setTimeout(() => handler(...args), 100);
      };
      return vue.effectRequest(effectRequestParams, referingObject);
    }
  });
  function AdapterUniapp({ mockRequest } = {}) {
    return {
      statesHook,
      requestAdapter: mockRequest || requestAdapter,
      l2Cache: l2CacheAdapter
    };
  }
  function Toast(title, options2) {
    uni.showToast(__spreadValues({
      title,
      duration: 1500,
      icon: "none",
      mask: true
    }, options2));
  }
  var ResultEnum = /* @__PURE__ */ ((ResultEnum2) => {
    ResultEnum2[ResultEnum2["SUCCESS"] = 1e4] = "SUCCESS";
    ResultEnum2[ResultEnum2["FAIL"] = 10001] = "FAIL";
    ResultEnum2[ResultEnum2["ERROR"] = 1] = "ERROR";
    ResultEnum2[ResultEnum2["TIMEOUT"] = 401] = "TIMEOUT";
    ResultEnum2["TYPE"] = "success";
    return ResultEnum2;
  })(ResultEnum || {});
  var ContentTypeEnum = /* @__PURE__ */ ((ContentTypeEnum2) => {
    ContentTypeEnum2["JSON"] = "application/json;charset=UTF-8";
    ContentTypeEnum2["FORM_URLENCODED"] = "application/x-www-form-urlencoded;charset=UTF-8";
    ContentTypeEnum2["FORM_DATA"] = "multipart/form-data;charset=UTF-8";
    return ContentTypeEnum2;
  })(ContentTypeEnum || {});
  function handleHttpStatus(status, msg) {
    let errMessage = null;
    switch (status) {
      case 400:
        errMessage = `${msg}`;
        break;
      case 401:
        errMessage = "用户没有权限（令牌、用户名、密码错误）!";
        break;
      case 403:
        errMessage = "用户得到授权，但是访问是被禁止的!";
        break;
      case 404:
        errMessage = "网络请求错误,未找到该资源!";
        break;
      case 405:
        errMessage = "网络请求错误,请求方法未允许!";
        break;
      case 408:
        errMessage = "网络请求超时!";
        break;
      case 500:
        errMessage = "服务器错误,请联系管理员!";
        break;
      case 501:
        errMessage = "网络未实现!";
        break;
      case 502:
        errMessage = "服务不可用，服务器暂时过载或维护!";
        break;
      case 503:
        errMessage = "服务不可用，服务器暂时过载或维护!";
        break;
      case 504:
        errMessage = "网络超时!";
        break;
      case 505:
        errMessage = "http版本不支持该请求!";
        break;
    }
    if (errMessage) {
      Toast(errMessage);
    }
  }
  function handleLogicError(errCode, errMsg) {
    switch (errCode) {
      case ResultEnum.ERROR:
        break;
      case ResultEnum.FAIL:
        break;
    }
    if (errMsg) {
      Toast(errMsg);
    }
  }
  const name = "Medical-examination-machine";
  const type = "module";
  const version = "2.0.1";
  const scripts = {
    "dev:app": "uni -p app",
    "dev:custom": "uni -p",
    "dev:h5": "pnpm git:hooks && uni",
    "dev:h5:ssr": "uni --ssr",
    "dev:mp-alipay": "uni -p mp-alipay",
    "dev:mp-baidu": "uni -p mp-baidu",
    "dev:mp-kuaishou": "uni -p mp-kuaishou",
    "dev:mp-lark": "uni -p mp-lark",
    "dev:mp-qq": "uni -p mp-qq",
    "dev:mp-toutiao": "uni -p mp-toutiao",
    "dev:mp-weixin": "pnpm git:hooks && uni -p mp-weixin",
    "dev:quickapp-webview": "uni -p quickapp-webview",
    "dev:quickapp-webview-huawei": "uni -p quickapp-webview-huawei",
    "dev:quickapp-webview-union": "uni -p quickapp-webview-union",
    "build:app": "uni build -p app",
    "build:custom": "uni build -p",
    "build:h5": "uni build --minify",
    "build:h5:ssr": "uni build --ssr",
    "build:mp-alipay": "uni build -p mp-alipay",
    "build:mp-baidu": "uni build -p mp-baidu",
    "build:mp-kuaishou": "uni build -p mp-kuaishou",
    "build:mp-lark": "uni build -p mp-lark",
    "build:mp-qq": "uni build -p mp-qq",
    "build:mp-toutiao": "uni build -p mp-toutiao",
    "build:mp-weixin": "uni build -p mp-weixin --minify",
    "build:quickapp-webview": "uni build -p quickapp-webview",
    "build:quickapp-webview-huawei": "uni build -p quickapp-webview-huawei",
    "build:quickapp-webview-union": "uni build -p quickapp-webview-union",
    "lint:fix": "eslint . --fix",
    "git:hooks": "npx simple-git-hooks",
    postinstall: "weapp-tw patch",
    "version:first": "commit-and-tag-version --first-release",
    "version:alpha": "commit-and-tag-version --prerelease alpha",
    "version:beta": "commit-and-tag-version --prerelease beta",
    "version:rc": "commit-and-tag-version --prerelease rc",
    "version:patch": "commit-and-tag-version --release-as patch",
    "version:minor": "commit-and-tag-version --release-as minor",
    "version:major": "commit-and-tag-version --release-as major"
  };
  const dependencies = {
    "@alova/adapter-uniapp": "^2.0.4",
    "@alova/mock": "^2.0.4",
    "@dcloudio/uni-app": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-app-plus": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-components": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-h5": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-i18n": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-mp-alipay": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-mp-baidu": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-mp-kuaishou": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-mp-lark": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-mp-qq": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-mp-toutiao": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-mp-weixin": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-quickapp-webview": "3.0.0-alpha-4020520240808001",
    "@multiavatar/multiavatar": "^1.0.7",
    alova: "^3.0.9",
    "crypto-js": "^4.2.0",
    "lodash-es": "^4.17.21",
    pinia: "^2.2.2",
    vue: "^3.4.38",
    "vue-i18n": "^9.14.1"
  };
  const devDependencies = {
    "@antfu/eslint-config": "^2.26.0",
    "@dcloudio/types": "^3.4.12",
    "@dcloudio/uni-automator": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-cli-shared": "3.0.0-alpha-4020520240808001",
    "@dcloudio/uni-stacktracey": "3.0.0-alpha-4020520240808001",
    "@dcloudio/vite-plugin-uni": "3.0.0-alpha-4020520240808001",
    "@egoist/tailwindcss-icons": "^1.8.1",
    "@iconify/json": "^2.2.238",
    "@types/crypto-js": "^4.2.2",
    "@types/lodash-es": "^4.17.12",
    "@types/node": "^20.16.1",
    "@vitejs/plugin-vue": "^5.1.2",
    "@vue/runtime-core": "^3.4.38",
    autoprefixer: "^10.4.20",
    "commit-and-tag-version": "^12.4.1",
    eslint: "^9.9.0",
    "eslint-plugin-format": "^0.1.2",
    globals: "^15.9.0",
    "lint-staged": "^15.2.9",
    picocolors: "^1.0.1",
    postcss: "^8.4.41",
    "rollup-plugin-visualizer": "^5.12.0",
    sass: "^1.77.8",
    "simple-git-hooks": "^2.11.1",
    tailwindcss: "^3.4.10",
    tsx: "^4.17.0",
    typescript: "^5.5.4",
    "uni-mini-router": "^0.1.6",
    "uni-read-pages-vite": "^0.0.6",
    "unplugin-auto-import": "^0.18.2",
    vite: "^5.4.1",
    "vite-plugin-restart": "^0.4.1",
    "weapp-tailwindcss": "^3.5.0"
  };
  const id = "h_mo-Vue3-Vite-TS-basic-framework";
  const displayName = "Vue3-Vite-TS 基础框架";
  const description = "基于Vue3 SFC ，封装了Tailwindcss、Mock、路由拦截、请求拦截及缓存加密等...适用于新项目，规范代码目录，开箱即用";
  const keywords = [
    "vue3",
    "ts",
    "请求/路由拦截",
    "unocss",
    "mock"
  ];
  const dcloudext = {
    category: [
      "uni-app前端模板",
      "uni-app前端项目模板"
    ]
  };
  const pkg = {
    name,
    type,
    version,
    scripts,
    dependencies,
    devDependencies,
    "simple-git-hooks": {
      "pre-commit": "npx lint-staged",
      "commit-msg": "npx tsx ./scripts/verify-commit.ts"
    },
    "lint-staged": {
      "*": "eslint . --fix"
    },
    id,
    displayName,
    description,
    keywords,
    dcloudext
  };
  const __vite_import_meta_env__ = { "BASE_URL": "/", "DEV": true, "MODE": "development", "PROD": false, "SSR": false, "VITE_CJS_IGNORE_WARNING": "true", "VITE_ROOT_DIR": "D:\\ty\\medical-device", "VITE_USER_NODE_ENV": "development" };
  function getPkgVersion() {
    return `${`__${pkg.version}`}__`.toUpperCase();
  }
  const devMode = "development";
  function getEnvMode() {
    return getEnvValue("VITE_ENV");
  }
  function getEnvValue(key2) {
    const envValue = __vite_import_meta_env__[key2];
    return envValue === "true" ? true : envValue === "false" ? false : envValue;
  }
  function isDevMode() {
    return getEnvMode() === devMode;
  }
  function getBaseUrl() {
    return getEnvValue("VITE_BASE_URL");
  }
  const DEFAULT_CACHE_TIME = 60 * 60 * 24 * 7;
  const PREFIX = getEnvValue("VITE_APP_CACHE_PREFIX") || getEnvValue("VITE_APP_TITLE") || "UNI_APP_VUE3_TS";
  const DEFAULT_PREFIX_KEY = `${PREFIX}${getPkgVersion()}`;
  const cacheCipher = {
    key: "aQ0{gD1@c_0@oH5:",
    iv: "aF0#gC_$hE1$eA1!"
  };
  const enableStorageEncryption = !isDevMode();
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function getAugmentedNamespace(n2) {
    if (n2.__esModule) return n2;
    var f2 = n2.default;
    if (typeof f2 == "function") {
      var a2 = function a3() {
        if (this instanceof a3) {
          return Reflect.construct(f2, arguments, this.constructor);
        }
        return f2.apply(this, arguments);
      };
      a2.prototype = f2.prototype;
    } else a2 = {};
    Object.defineProperty(a2, "__esModule", { value: true });
    Object.keys(n2).forEach(function(k2) {
      var d2 = Object.getOwnPropertyDescriptor(n2, k2);
      Object.defineProperty(a2, k2, d2.get ? d2 : {
        enumerable: true,
        get: function() {
          return n2[k2];
        }
      });
    });
    return a2;
  }
  var aes = { exports: {} };
  var lookup = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    62,
    0,
    62,
    0,
    63,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    0,
    0,
    0,
    0,
    63,
    0,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51
  ];
  function base64Decode(source, target) {
    var sourceLength = source.length;
    var paddingLength = source[sourceLength - 2] === "=" ? 2 : source[sourceLength - 1] === "=" ? 1 : 0;
    var tmp;
    var byteIndex = 0;
    var baseLength = sourceLength - paddingLength & 4294967292;
    for (var i2 = 0; i2 < baseLength; i2 += 4) {
      tmp = lookup[source.charCodeAt(i2)] << 18 | lookup[source.charCodeAt(i2 + 1)] << 12 | lookup[source.charCodeAt(i2 + 2)] << 6 | lookup[source.charCodeAt(i2 + 3)];
      target[byteIndex++] = tmp >> 16 & 255;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 1) {
      tmp = lookup[source.charCodeAt(i2)] << 10 | lookup[source.charCodeAt(i2 + 1)] << 4 | lookup[source.charCodeAt(i2 + 2)] >> 2;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 2) {
      tmp = lookup[source.charCodeAt(i2)] << 2 | lookup[source.charCodeAt(i2 + 1)] >> 4;
      target[byteIndex++] = tmp & 255;
    }
  }
  const $inject_window_crypto = {
    getRandomValues(arr) {
      if (!(arr instanceof Int8Array || arr instanceof Uint8Array || arr instanceof Int16Array || arr instanceof Uint16Array || arr instanceof Int32Array || arr instanceof Uint32Array || arr instanceof Uint8ClampedArray)) {
        throw new Error("Expected an integer array");
      }
      if (arr.byteLength > 65536) {
        throw new Error("Can only request a maximum of 65536 bytes");
      }
      var crypto = requireNativePlugin("DCloud-Crypto");
      base64Decode(crypto.getRandomValues(arr.byteLength), new Uint8Array(
        arr.buffer,
        arr.byteOffset,
        arr.byteLength
      ));
      return arr;
    }
  };
  function commonjsRequire(path) {
    throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }
  var core = { exports: {} };
  const __viteBrowserExternal = new Proxy({}, {
    get(_2, key2) {
      throw new Error(`Module "" has been externalized for browser compatibility. Cannot access ".${key2}" in client code.  See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
    }
  });
  const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, default: __viteBrowserExternal }, Symbol.toStringTag, { value: "Module" }));
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
  var hasRequiredCore;
  function requireCore() {
    if (hasRequiredCore) return core.exports;
    hasRequiredCore = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory();
        }
      })(commonjsGlobal, function() {
        var CryptoJS = CryptoJS || function(Math2, undefined$1) {
          var crypto;
          if (typeof window !== "undefined" && $inject_window_crypto) {
            crypto = $inject_window_crypto;
          }
          if (typeof self !== "undefined" && self.crypto) {
            crypto = self.crypto;
          }
          if (typeof globalThis !== "undefined" && globalThis.crypto) {
            crypto = globalThis.crypto;
          }
          if (!crypto && typeof window !== "undefined" && window.msCrypto) {
            crypto = window.msCrypto;
          }
          if (!crypto && typeof commonjsGlobal !== "undefined" && commonjsGlobal.crypto) {
            crypto = commonjsGlobal.crypto;
          }
          if (!crypto && typeof commonjsRequire === "function") {
            try {
              crypto = require$$0;
            } catch (err) {
            }
          }
          var cryptoSecureRandomInt = function() {
            if (crypto) {
              if (typeof crypto.getRandomValues === "function") {
                try {
                  return crypto.getRandomValues(new Uint32Array(1))[0];
                } catch (err) {
                }
              }
              if (typeof crypto.randomBytes === "function") {
                try {
                  return crypto.randomBytes(4).readInt32LE();
                } catch (err) {
                }
              }
            }
            throw new Error("Native crypto module could not be used to get secure random number.");
          };
          var create = Object.create || /* @__PURE__ */ function() {
            function F2() {
            }
            return function(obj) {
              var subtype;
              F2.prototype = obj;
              subtype = new F2();
              F2.prototype = null;
              return subtype;
            };
          }();
          var C2 = {};
          var C_lib = C2.lib = {};
          var Base = C_lib.Base = /* @__PURE__ */ function() {
            return {
              /**
               * Creates a new object that inherits from this object.
               *
               * @param {Object} overrides Properties to copy into the new object.
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         field: 'value',
               *
               *         method: function () {
               *         }
               *     });
               */
              extend: function(overrides) {
                var subtype = create(this);
                if (overrides) {
                  subtype.mixIn(overrides);
                }
                if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                  subtype.init = function() {
                    subtype.$super.init.apply(this, arguments);
                  };
                }
                subtype.init.prototype = subtype;
                subtype.$super = this;
                return subtype;
              },
              /**
               * Extends this object and runs the init method.
               * Arguments to create() will be passed to init().
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var instance = MyType.create();
               */
              create: function() {
                var instance = this.extend();
                instance.init.apply(instance, arguments);
                return instance;
              },
              /**
               * Initializes a newly created object.
               * Override this method to add some logic when your objects are created.
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         init: function () {
               *             // ...
               *         }
               *     });
               */
              init: function() {
              },
              /**
               * Copies properties into this object.
               *
               * @param {Object} properties The properties to mix in.
               *
               * @example
               *
               *     MyType.mixIn({
               *         field: 'value'
               *     });
               */
              mixIn: function(properties) {
                for (var propertyName in properties) {
                  if (properties.hasOwnProperty(propertyName)) {
                    this[propertyName] = properties[propertyName];
                  }
                }
                if (properties.hasOwnProperty("toString")) {
                  this.toString = properties.toString;
                }
              },
              /**
               * Creates a copy of this object.
               *
               * @return {Object} The clone.
               *
               * @example
               *
               *     var clone = instance.clone();
               */
              clone: function() {
                return this.init.prototype.extend(this);
              }
            };
          }();
          var WordArray = C_lib.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of 32-bit words.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.create();
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
             */
            init: function(words, sigBytes) {
              words = this.words = words || [];
              if (sigBytes != undefined$1) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words.length * 4;
              }
            },
            /**
             * Converts this word array to a string.
             *
             * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
             *
             * @return {string} The stringified word array.
             *
             * @example
             *
             *     var string = wordArray + '';
             *     var string = wordArray.toString();
             *     var string = wordArray.toString(CryptoJS.enc.Utf8);
             */
            toString: function(encoder) {
              return (encoder || Hex).stringify(this);
            },
            /**
             * Concatenates a word array to this word array.
             *
             * @param {WordArray} wordArray The word array to append.
             *
             * @return {WordArray} This word array.
             *
             * @example
             *
             *     wordArray1.concat(wordArray2);
             */
            concat: function(wordArray) {
              var thisWords = this.words;
              var thatWords = wordArray.words;
              var thisSigBytes = this.sigBytes;
              var thatSigBytes = wordArray.sigBytes;
              this.clamp();
              if (thisSigBytes % 4) {
                for (var i2 = 0; i2 < thatSigBytes; i2++) {
                  var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                  thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
                }
              } else {
                for (var j2 = 0; j2 < thatSigBytes; j2 += 4) {
                  thisWords[thisSigBytes + j2 >>> 2] = thatWords[j2 >>> 2];
                }
              }
              this.sigBytes += thatSigBytes;
              return this;
            },
            /**
             * Removes insignificant bits.
             *
             * @example
             *
             *     wordArray.clamp();
             */
            clamp: function() {
              var words = this.words;
              var sigBytes = this.sigBytes;
              words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
              words.length = Math2.ceil(sigBytes / 4);
            },
            /**
             * Creates a copy of this word array.
             *
             * @return {WordArray} The clone.
             *
             * @example
             *
             *     var clone = wordArray.clone();
             */
            clone: function() {
              var clone = Base.clone.call(this);
              clone.words = this.words.slice(0);
              return clone;
            },
            /**
             * Creates a word array filled with random bytes.
             *
             * @param {number} nBytes The number of random bytes to generate.
             *
             * @return {WordArray} The random word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.random(16);
             */
            random: function(nBytes) {
              var words = [];
              for (var i2 = 0; i2 < nBytes; i2 += 4) {
                words.push(cryptoSecureRandomInt());
              }
              return new WordArray.init(words, nBytes);
            }
          });
          var C_enc = C2.enc = {};
          var Hex = C_enc.Hex = {
            /**
             * Converts a word array to a hex string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The hex string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var hexChars = [];
              for (var i2 = 0; i2 < sigBytes; i2++) {
                var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                hexChars.push((bite >>> 4).toString(16));
                hexChars.push((bite & 15).toString(16));
              }
              return hexChars.join("");
            },
            /**
             * Converts a hex string to a word array.
             *
             * @param {string} hexStr The hex string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
             */
            parse: function(hexStr) {
              var hexStrLength = hexStr.length;
              var words = [];
              for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
                words[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
              }
              return new WordArray.init(words, hexStrLength / 2);
            }
          };
          var Latin1 = C_enc.Latin1 = {
            /**
             * Converts a word array to a Latin1 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Latin1 string.
             *
             * @static
             *
             * @example
             *
             *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var latin1Chars = [];
              for (var i2 = 0; i2 < sigBytes; i2++) {
                var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                latin1Chars.push(String.fromCharCode(bite));
              }
              return latin1Chars.join("");
            },
            /**
             * Converts a Latin1 string to a word array.
             *
             * @param {string} latin1Str The Latin1 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
             */
            parse: function(latin1Str) {
              var latin1StrLength = latin1Str.length;
              var words = [];
              for (var i2 = 0; i2 < latin1StrLength; i2++) {
                words[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
              }
              return new WordArray.init(words, latin1StrLength);
            }
          };
          var Utf8 = C_enc.Utf8 = {
            /**
             * Converts a word array to a UTF-8 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-8 string.
             *
             * @static
             *
             * @example
             *
             *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
             */
            stringify: function(wordArray) {
              try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
              } catch (e2) {
                throw new Error("Malformed UTF-8 data");
              }
            },
            /**
             * Converts a UTF-8 string to a word array.
             *
             * @param {string} utf8Str The UTF-8 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
             */
            parse: function(utf8Str) {
              return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
          };
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
             * Resets this block algorithm's data buffer to its initial state.
             *
             * @example
             *
             *     bufferedBlockAlgorithm.reset();
             */
            reset: function() {
              this._data = new WordArray.init();
              this._nDataBytes = 0;
            },
            /**
             * Adds new data to this block algorithm's buffer.
             *
             * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
             *
             * @example
             *
             *     bufferedBlockAlgorithm._append('data');
             *     bufferedBlockAlgorithm._append(wordArray);
             */
            _append: function(data) {
              if (typeof data == "string") {
                data = Utf8.parse(data);
              }
              this._data.concat(data);
              this._nDataBytes += data.sigBytes;
            },
            /**
             * Processes available data blocks.
             *
             * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
             *
             * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
             *
             * @return {WordArray} The processed data.
             *
             * @example
             *
             *     var processedData = bufferedBlockAlgorithm._process();
             *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
             */
            _process: function(doFlush) {
              var processedWords;
              var data = this._data;
              var dataWords = data.words;
              var dataSigBytes = data.sigBytes;
              var blockSize = this.blockSize;
              var blockSizeBytes = blockSize * 4;
              var nBlocksReady = dataSigBytes / blockSizeBytes;
              if (doFlush) {
                nBlocksReady = Math2.ceil(nBlocksReady);
              } else {
                nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
              }
              var nWordsReady = nBlocksReady * blockSize;
              var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
              if (nWordsReady) {
                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                  this._doProcessBlock(dataWords, offset);
                }
                processedWords = dataWords.splice(0, nWordsReady);
                data.sigBytes -= nBytesReady;
              }
              return new WordArray.init(processedWords, nBytesReady);
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = bufferedBlockAlgorithm.clone();
             */
            clone: function() {
              var clone = Base.clone.call(this);
              clone._data = this._data.clone();
              return clone;
            },
            _minBufferSize: 0
          });
          C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             */
            cfg: Base.extend(),
            /**
             * Initializes a newly created hasher.
             *
             * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
             *
             * @example
             *
             *     var hasher = CryptoJS.algo.SHA256.create();
             */
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
              this.reset();
            },
            /**
             * Resets this hasher to its initial state.
             *
             * @example
             *
             *     hasher.reset();
             */
            reset: function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            },
            /**
             * Updates this hasher with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {Hasher} This hasher.
             *
             * @example
             *
             *     hasher.update('message');
             *     hasher.update(wordArray);
             */
            update: function(messageUpdate) {
              this._append(messageUpdate);
              this._process();
              return this;
            },
            /**
             * Finalizes the hash computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The hash.
             *
             * @example
             *
             *     var hash = hasher.finalize();
             *     var hash = hasher.finalize('message');
             *     var hash = hasher.finalize(wordArray);
             */
            finalize: function(messageUpdate) {
              if (messageUpdate) {
                this._append(messageUpdate);
              }
              var hash = this._doFinalize();
              return hash;
            },
            blockSize: 512 / 32,
            /**
             * Creates a shortcut function to a hasher's object interface.
             *
             * @param {Hasher} hasher The hasher to create a helper for.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
             */
            _createHelper: function(hasher) {
              return function(message2, cfg) {
                return new hasher.init(cfg).finalize(message2);
              };
            },
            /**
             * Creates a shortcut function to the HMAC's object interface.
             *
             * @param {Hasher} hasher The hasher to use in this HMAC helper.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
             */
            _createHmacHelper: function(hasher) {
              return function(message2, key2) {
                return new C_algo.HMAC.init(hasher, key2).finalize(message2);
              };
            }
          });
          var C_algo = C2.algo = {};
          return C2;
        }(Math);
        return CryptoJS;
      });
    })(core);
    return core.exports;
  }
  var encBase64 = { exports: {} };
  var hasRequiredEncBase64;
  function requireEncBase64() {
    if (hasRequiredEncBase64) return encBase64.exports;
    hasRequiredEncBase64 = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS) {
        (function() {
          var C2 = CryptoJS;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C2.enc;
          C_enc.Base64 = {
            /**
             * Converts a word array to a Base64 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Base64 string.
             *
             * @static
             *
             * @example
             *
             *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var map = this._map;
              wordArray.clamp();
              var base64Chars = [];
              for (var i2 = 0; i2 < sigBytes; i2 += 3) {
                var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
                var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
                var triplet = byte1 << 16 | byte2 << 8 | byte3;
                for (var j2 = 0; j2 < 4 && i2 + j2 * 0.75 < sigBytes; j2++) {
                  base64Chars.push(map.charAt(triplet >>> 6 * (3 - j2) & 63));
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                while (base64Chars.length % 4) {
                  base64Chars.push(paddingChar);
                }
              }
              return base64Chars.join("");
            },
            /**
             * Converts a Base64 string to a word array.
             *
             * @param {string} base64Str The Base64 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
             */
            parse: function(base64Str) {
              var base64StrLength = base64Str.length;
              var map = this._map;
              var reverseMap = this._reverseMap;
              if (!reverseMap) {
                reverseMap = this._reverseMap = [];
                for (var j2 = 0; j2 < map.length; j2++) {
                  reverseMap[map.charCodeAt(j2)] = j2;
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                var paddingIndex = base64Str.indexOf(paddingChar);
                if (paddingIndex !== -1) {
                  base64StrLength = paddingIndex;
                }
              }
              return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
          };
          function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;
            for (var i2 = 0; i2 < base64StrLength; i2++) {
              if (i2 % 4) {
                var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
                var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
                var bitsCombined = bits1 | bits2;
                words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                nBytes++;
              }
            }
            return WordArray.create(words, nBytes);
          }
        })();
        return CryptoJS.enc.Base64;
      });
    })(encBase64);
    return encBase64.exports;
  }
  var md5 = { exports: {} };
  var hasRequiredMd5;
  function requireMd5() {
    if (hasRequiredMd5) return md5.exports;
    hasRequiredMd5 = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS) {
        (function(Math2) {
          var C2 = CryptoJS;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C2.algo;
          var T2 = [];
          (function() {
            for (var i2 = 0; i2 < 64; i2++) {
              T2[i2] = Math2.abs(Math2.sin(i2 + 1)) * 4294967296 | 0;
            }
          })();
          var MD5 = C_algo.MD5 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init([
                1732584193,
                4023233417,
                2562383102,
                271733878
              ]);
            },
            _doProcessBlock: function(M2, offset) {
              for (var i2 = 0; i2 < 16; i2++) {
                var offset_i = offset + i2;
                var M_offset_i = M2[offset_i];
                M2[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
              }
              var H2 = this._hash.words;
              var M_offset_0 = M2[offset + 0];
              var M_offset_1 = M2[offset + 1];
              var M_offset_2 = M2[offset + 2];
              var M_offset_3 = M2[offset + 3];
              var M_offset_4 = M2[offset + 4];
              var M_offset_5 = M2[offset + 5];
              var M_offset_6 = M2[offset + 6];
              var M_offset_7 = M2[offset + 7];
              var M_offset_8 = M2[offset + 8];
              var M_offset_9 = M2[offset + 9];
              var M_offset_10 = M2[offset + 10];
              var M_offset_11 = M2[offset + 11];
              var M_offset_12 = M2[offset + 12];
              var M_offset_13 = M2[offset + 13];
              var M_offset_14 = M2[offset + 14];
              var M_offset_15 = M2[offset + 15];
              var a2 = H2[0];
              var b2 = H2[1];
              var c2 = H2[2];
              var d2 = H2[3];
              a2 = FF(a2, b2, c2, d2, M_offset_0, 7, T2[0]);
              d2 = FF(d2, a2, b2, c2, M_offset_1, 12, T2[1]);
              c2 = FF(c2, d2, a2, b2, M_offset_2, 17, T2[2]);
              b2 = FF(b2, c2, d2, a2, M_offset_3, 22, T2[3]);
              a2 = FF(a2, b2, c2, d2, M_offset_4, 7, T2[4]);
              d2 = FF(d2, a2, b2, c2, M_offset_5, 12, T2[5]);
              c2 = FF(c2, d2, a2, b2, M_offset_6, 17, T2[6]);
              b2 = FF(b2, c2, d2, a2, M_offset_7, 22, T2[7]);
              a2 = FF(a2, b2, c2, d2, M_offset_8, 7, T2[8]);
              d2 = FF(d2, a2, b2, c2, M_offset_9, 12, T2[9]);
              c2 = FF(c2, d2, a2, b2, M_offset_10, 17, T2[10]);
              b2 = FF(b2, c2, d2, a2, M_offset_11, 22, T2[11]);
              a2 = FF(a2, b2, c2, d2, M_offset_12, 7, T2[12]);
              d2 = FF(d2, a2, b2, c2, M_offset_13, 12, T2[13]);
              c2 = FF(c2, d2, a2, b2, M_offset_14, 17, T2[14]);
              b2 = FF(b2, c2, d2, a2, M_offset_15, 22, T2[15]);
              a2 = GG(a2, b2, c2, d2, M_offset_1, 5, T2[16]);
              d2 = GG(d2, a2, b2, c2, M_offset_6, 9, T2[17]);
              c2 = GG(c2, d2, a2, b2, M_offset_11, 14, T2[18]);
              b2 = GG(b2, c2, d2, a2, M_offset_0, 20, T2[19]);
              a2 = GG(a2, b2, c2, d2, M_offset_5, 5, T2[20]);
              d2 = GG(d2, a2, b2, c2, M_offset_10, 9, T2[21]);
              c2 = GG(c2, d2, a2, b2, M_offset_15, 14, T2[22]);
              b2 = GG(b2, c2, d2, a2, M_offset_4, 20, T2[23]);
              a2 = GG(a2, b2, c2, d2, M_offset_9, 5, T2[24]);
              d2 = GG(d2, a2, b2, c2, M_offset_14, 9, T2[25]);
              c2 = GG(c2, d2, a2, b2, M_offset_3, 14, T2[26]);
              b2 = GG(b2, c2, d2, a2, M_offset_8, 20, T2[27]);
              a2 = GG(a2, b2, c2, d2, M_offset_13, 5, T2[28]);
              d2 = GG(d2, a2, b2, c2, M_offset_2, 9, T2[29]);
              c2 = GG(c2, d2, a2, b2, M_offset_7, 14, T2[30]);
              b2 = GG(b2, c2, d2, a2, M_offset_12, 20, T2[31]);
              a2 = HH(a2, b2, c2, d2, M_offset_5, 4, T2[32]);
              d2 = HH(d2, a2, b2, c2, M_offset_8, 11, T2[33]);
              c2 = HH(c2, d2, a2, b2, M_offset_11, 16, T2[34]);
              b2 = HH(b2, c2, d2, a2, M_offset_14, 23, T2[35]);
              a2 = HH(a2, b2, c2, d2, M_offset_1, 4, T2[36]);
              d2 = HH(d2, a2, b2, c2, M_offset_4, 11, T2[37]);
              c2 = HH(c2, d2, a2, b2, M_offset_7, 16, T2[38]);
              b2 = HH(b2, c2, d2, a2, M_offset_10, 23, T2[39]);
              a2 = HH(a2, b2, c2, d2, M_offset_13, 4, T2[40]);
              d2 = HH(d2, a2, b2, c2, M_offset_0, 11, T2[41]);
              c2 = HH(c2, d2, a2, b2, M_offset_3, 16, T2[42]);
              b2 = HH(b2, c2, d2, a2, M_offset_6, 23, T2[43]);
              a2 = HH(a2, b2, c2, d2, M_offset_9, 4, T2[44]);
              d2 = HH(d2, a2, b2, c2, M_offset_12, 11, T2[45]);
              c2 = HH(c2, d2, a2, b2, M_offset_15, 16, T2[46]);
              b2 = HH(b2, c2, d2, a2, M_offset_2, 23, T2[47]);
              a2 = II(a2, b2, c2, d2, M_offset_0, 6, T2[48]);
              d2 = II(d2, a2, b2, c2, M_offset_7, 10, T2[49]);
              c2 = II(c2, d2, a2, b2, M_offset_14, 15, T2[50]);
              b2 = II(b2, c2, d2, a2, M_offset_5, 21, T2[51]);
              a2 = II(a2, b2, c2, d2, M_offset_12, 6, T2[52]);
              d2 = II(d2, a2, b2, c2, M_offset_3, 10, T2[53]);
              c2 = II(c2, d2, a2, b2, M_offset_10, 15, T2[54]);
              b2 = II(b2, c2, d2, a2, M_offset_1, 21, T2[55]);
              a2 = II(a2, b2, c2, d2, M_offset_8, 6, T2[56]);
              d2 = II(d2, a2, b2, c2, M_offset_15, 10, T2[57]);
              c2 = II(c2, d2, a2, b2, M_offset_6, 15, T2[58]);
              b2 = II(b2, c2, d2, a2, M_offset_13, 21, T2[59]);
              a2 = II(a2, b2, c2, d2, M_offset_4, 6, T2[60]);
              d2 = II(d2, a2, b2, c2, M_offset_11, 10, T2[61]);
              c2 = II(c2, d2, a2, b2, M_offset_2, 15, T2[62]);
              b2 = II(b2, c2, d2, a2, M_offset_9, 21, T2[63]);
              H2[0] = H2[0] + a2 | 0;
              H2[1] = H2[1] + b2 | 0;
              H2[2] = H2[2] + c2 | 0;
              H2[3] = H2[3] + d2 | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
              var nBitsTotalL = nBitsTotal;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
              data.sigBytes = (dataWords.length + 1) * 4;
              this._process();
              var hash = this._hash;
              var H2 = hash.words;
              for (var i2 = 0; i2 < 4; i2++) {
                var H_i = H2[i2];
                H2[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
              }
              return hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          function FF(a2, b2, c2, d2, x, s2, t2) {
            var n2 = a2 + (b2 & c2 | ~b2 & d2) + x + t2;
            return (n2 << s2 | n2 >>> 32 - s2) + b2;
          }
          function GG(a2, b2, c2, d2, x, s2, t2) {
            var n2 = a2 + (b2 & d2 | c2 & ~d2) + x + t2;
            return (n2 << s2 | n2 >>> 32 - s2) + b2;
          }
          function HH(a2, b2, c2, d2, x, s2, t2) {
            var n2 = a2 + (b2 ^ c2 ^ d2) + x + t2;
            return (n2 << s2 | n2 >>> 32 - s2) + b2;
          }
          function II(a2, b2, c2, d2, x, s2, t2) {
            var n2 = a2 + (c2 ^ (b2 | ~d2)) + x + t2;
            return (n2 << s2 | n2 >>> 32 - s2) + b2;
          }
          C2.MD5 = Hasher._createHelper(MD5);
          C2.HmacMD5 = Hasher._createHmacHelper(MD5);
        })(Math);
        return CryptoJS.MD5;
      });
    })(md5);
    return md5.exports;
  }
  var evpkdf = { exports: {} };
  var sha1 = { exports: {} };
  var hasRequiredSha1;
  function requireSha1() {
    if (hasRequiredSha1) return sha1.exports;
    hasRequiredSha1 = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS) {
        (function() {
          var C2 = CryptoJS;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C2.algo;
          var W2 = [];
          var SHA1 = C_algo.SHA1 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init([
                1732584193,
                4023233417,
                2562383102,
                271733878,
                3285377520
              ]);
            },
            _doProcessBlock: function(M2, offset) {
              var H2 = this._hash.words;
              var a2 = H2[0];
              var b2 = H2[1];
              var c2 = H2[2];
              var d2 = H2[3];
              var e2 = H2[4];
              for (var i2 = 0; i2 < 80; i2++) {
                if (i2 < 16) {
                  W2[i2] = M2[offset + i2] | 0;
                } else {
                  var n2 = W2[i2 - 3] ^ W2[i2 - 8] ^ W2[i2 - 14] ^ W2[i2 - 16];
                  W2[i2] = n2 << 1 | n2 >>> 31;
                }
                var t2 = (a2 << 5 | a2 >>> 27) + e2 + W2[i2];
                if (i2 < 20) {
                  t2 += (b2 & c2 | ~b2 & d2) + 1518500249;
                } else if (i2 < 40) {
                  t2 += (b2 ^ c2 ^ d2) + 1859775393;
                } else if (i2 < 60) {
                  t2 += (b2 & c2 | b2 & d2 | c2 & d2) - 1894007588;
                } else {
                  t2 += (b2 ^ c2 ^ d2) - 899497514;
                }
                e2 = d2;
                d2 = c2;
                c2 = b2 << 30 | b2 >>> 2;
                b2 = a2;
                a2 = t2;
              }
              H2[0] = H2[0] + a2 | 0;
              H2[1] = H2[1] + b2 | 0;
              H2[2] = H2[2] + c2 | 0;
              H2[3] = H2[3] + d2 | 0;
              H2[4] = H2[4] + e2 | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              return this._hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          C2.SHA1 = Hasher._createHelper(SHA1);
          C2.HmacSHA1 = Hasher._createHmacHelper(SHA1);
        })();
        return CryptoJS.SHA1;
      });
    })(sha1);
    return sha1.exports;
  }
  var hmac = { exports: {} };
  var hasRequiredHmac;
  function requireHmac() {
    if (hasRequiredHmac) return hmac.exports;
    hasRequiredHmac = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS) {
        (function() {
          var C2 = CryptoJS;
          var C_lib = C2.lib;
          var Base = C_lib.Base;
          var C_enc = C2.enc;
          var Utf8 = C_enc.Utf8;
          var C_algo = C2.algo;
          C_algo.HMAC = Base.extend({
            /**
             * Initializes a newly created HMAC.
             *
             * @param {Hasher} hasher The hash algorithm to use.
             * @param {WordArray|string} key The secret key.
             *
             * @example
             *
             *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
             */
            init: function(hasher, key2) {
              hasher = this._hasher = new hasher.init();
              if (typeof key2 == "string") {
                key2 = Utf8.parse(key2);
              }
              var hasherBlockSize = hasher.blockSize;
              var hasherBlockSizeBytes = hasherBlockSize * 4;
              if (key2.sigBytes > hasherBlockSizeBytes) {
                key2 = hasher.finalize(key2);
              }
              key2.clamp();
              var oKey = this._oKey = key2.clone();
              var iKey = this._iKey = key2.clone();
              var oKeyWords = oKey.words;
              var iKeyWords = iKey.words;
              for (var i2 = 0; i2 < hasherBlockSize; i2++) {
                oKeyWords[i2] ^= 1549556828;
                iKeyWords[i2] ^= 909522486;
              }
              oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
              this.reset();
            },
            /**
             * Resets this HMAC to its initial state.
             *
             * @example
             *
             *     hmacHasher.reset();
             */
            reset: function() {
              var hasher = this._hasher;
              hasher.reset();
              hasher.update(this._iKey);
            },
            /**
             * Updates this HMAC with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {HMAC} This HMAC instance.
             *
             * @example
             *
             *     hmacHasher.update('message');
             *     hmacHasher.update(wordArray);
             */
            update: function(messageUpdate) {
              this._hasher.update(messageUpdate);
              return this;
            },
            /**
             * Finalizes the HMAC computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The HMAC.
             *
             * @example
             *
             *     var hmac = hmacHasher.finalize();
             *     var hmac = hmacHasher.finalize('message');
             *     var hmac = hmacHasher.finalize(wordArray);
             */
            finalize: function(messageUpdate) {
              var hasher = this._hasher;
              var innerHash = hasher.finalize(messageUpdate);
              hasher.reset();
              var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
              return hmac2;
            }
          });
        })();
      });
    })(hmac);
    return hmac.exports;
  }
  var hasRequiredEvpkdf;
  function requireEvpkdf() {
    if (hasRequiredEvpkdf) return evpkdf.exports;
    hasRequiredEvpkdf = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireSha1(), requireHmac());
        }
      })(commonjsGlobal, function(CryptoJS) {
        (function() {
          var C2 = CryptoJS;
          var C_lib = C2.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var C_algo = C2.algo;
          var MD5 = C_algo.MD5;
          var EvpKDF = C_algo.EvpKDF = Base.extend({
            /**
             * Configuration options.
             *
             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
             * @property {Hasher} hasher The hash algorithm to use. Default: MD5
             * @property {number} iterations The number of iterations to perform. Default: 1
             */
            cfg: Base.extend({
              keySize: 128 / 32,
              hasher: MD5,
              iterations: 1
            }),
            /**
             * Initializes a newly created key derivation function.
             *
             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
             *
             * @example
             *
             *     var kdf = CryptoJS.algo.EvpKDF.create();
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
             */
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
            },
            /**
             * Derives a key from a password.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             *
             * @return {WordArray} The derived key.
             *
             * @example
             *
             *     var key = kdf.compute(password, salt);
             */
            compute: function(password, salt) {
              var block;
              var cfg = this.cfg;
              var hasher = cfg.hasher.create();
              var derivedKey = WordArray.create();
              var derivedKeyWords = derivedKey.words;
              var keySize = cfg.keySize;
              var iterations = cfg.iterations;
              while (derivedKeyWords.length < keySize) {
                if (block) {
                  hasher.update(block);
                }
                block = hasher.update(password).finalize(salt);
                hasher.reset();
                for (var i2 = 1; i2 < iterations; i2++) {
                  block = hasher.finalize(block);
                  hasher.reset();
                }
                derivedKey.concat(block);
              }
              derivedKey.sigBytes = keySize * 4;
              return derivedKey;
            }
          });
          C2.EvpKDF = function(password, salt, cfg) {
            return EvpKDF.create(cfg).compute(password, salt);
          };
        })();
        return CryptoJS.EvpKDF;
      });
    })(evpkdf);
    return evpkdf.exports;
  }
  var cipherCore = { exports: {} };
  var hasRequiredCipherCore;
  function requireCipherCore() {
    if (hasRequiredCipherCore) return cipherCore.exports;
    hasRequiredCipherCore = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireEvpkdf());
        }
      })(commonjsGlobal, function(CryptoJS) {
        CryptoJS.lib.Cipher || function(undefined$1) {
          var C2 = CryptoJS;
          var C_lib = C2.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
          var C_enc = C2.enc;
          C_enc.Utf8;
          var Base64 = C_enc.Base64;
          var C_algo = C2.algo;
          var EvpKDF = C_algo.EvpKDF;
          var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             *
             * @property {WordArray} iv The IV to use for this operation.
             */
            cfg: Base.extend(),
            /**
             * Creates this cipher in encryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
             */
            createEncryptor: function(key2, cfg) {
              return this.create(this._ENC_XFORM_MODE, key2, cfg);
            },
            /**
             * Creates this cipher in decryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
             */
            createDecryptor: function(key2, cfg) {
              return this.create(this._DEC_XFORM_MODE, key2, cfg);
            },
            /**
             * Initializes a newly created cipher.
             *
             * @param {number} xformMode Either the encryption or decryption transormation mode constant.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
             */
            init: function(xformMode, key2, cfg) {
              this.cfg = this.cfg.extend(cfg);
              this._xformMode = xformMode;
              this._key = key2;
              this.reset();
            },
            /**
             * Resets this cipher to its initial state.
             *
             * @example
             *
             *     cipher.reset();
             */
            reset: function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            },
            /**
             * Adds data to be encrypted or decrypted.
             *
             * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
             *
             * @return {WordArray} The data after processing.
             *
             * @example
             *
             *     var encrypted = cipher.process('data');
             *     var encrypted = cipher.process(wordArray);
             */
            process: function(dataUpdate) {
              this._append(dataUpdate);
              return this._process();
            },
            /**
             * Finalizes the encryption or decryption process.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
             *
             * @return {WordArray} The data after final processing.
             *
             * @example
             *
             *     var encrypted = cipher.finalize();
             *     var encrypted = cipher.finalize('data');
             *     var encrypted = cipher.finalize(wordArray);
             */
            finalize: function(dataUpdate) {
              if (dataUpdate) {
                this._append(dataUpdate);
              }
              var finalProcessedData = this._doFinalize();
              return finalProcessedData;
            },
            keySize: 128 / 32,
            ivSize: 128 / 32,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,
            /**
             * Creates shortcut functions to a cipher's object interface.
             *
             * @param {Cipher} cipher The cipher to create a helper for.
             *
             * @return {Object} An object with encrypt and decrypt shortcut functions.
             *
             * @static
             *
             * @example
             *
             *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
             */
            _createHelper: /* @__PURE__ */ function() {
              function selectCipherStrategy(key2) {
                if (typeof key2 == "string") {
                  return PasswordBasedCipher;
                } else {
                  return SerializableCipher;
                }
              }
              return function(cipher) {
                return {
                  encrypt: function(message2, key2, cfg) {
                    return selectCipherStrategy(key2).encrypt(cipher, message2, key2, cfg);
                  },
                  decrypt: function(ciphertext, key2, cfg) {
                    return selectCipherStrategy(key2).decrypt(cipher, ciphertext, key2, cfg);
                  }
                };
              };
            }()
          });
          C_lib.StreamCipher = Cipher.extend({
            _doFinalize: function() {
              var finalProcessedBlocks = this._process(true);
              return finalProcessedBlocks;
            },
            blockSize: 1
          });
          var C_mode = C2.mode = {};
          var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
            /**
             * Creates this mode for encryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
             */
            createEncryptor: function(cipher, iv) {
              return this.Encryptor.create(cipher, iv);
            },
            /**
             * Creates this mode for decryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
             */
            createDecryptor: function(cipher, iv) {
              return this.Decryptor.create(cipher, iv);
            },
            /**
             * Initializes a newly created mode.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
             */
            init: function(cipher, iv) {
              this._cipher = cipher;
              this._iv = iv;
            }
          });
          var CBC = C_mode.CBC = function() {
            var CBC2 = BlockCipherMode.extend();
            CBC2.Encryptor = CBC2.extend({
              /**
               * Processes the data block at offset.
               *
               * @param {Array} words The data words to operate on.
               * @param {number} offset The offset where the block starts.
               *
               * @example
               *
               *     mode.processBlock(data.words, offset);
               */
              processBlock: function(words, offset) {
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                xorBlock.call(this, words, offset, blockSize);
                cipher.encryptBlock(words, offset);
                this._prevBlock = words.slice(offset, offset + blockSize);
              }
            });
            CBC2.Decryptor = CBC2.extend({
              /**
               * Processes the data block at offset.
               *
               * @param {Array} words The data words to operate on.
               * @param {number} offset The offset where the block starts.
               *
               * @example
               *
               *     mode.processBlock(data.words, offset);
               */
              processBlock: function(words, offset) {
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var thisBlock = words.slice(offset, offset + blockSize);
                cipher.decryptBlock(words, offset);
                xorBlock.call(this, words, offset, blockSize);
                this._prevBlock = thisBlock;
              }
            });
            function xorBlock(words, offset, blockSize) {
              var block;
              var iv = this._iv;
              if (iv) {
                block = iv;
                this._iv = undefined$1;
              } else {
                block = this._prevBlock;
              }
              for (var i2 = 0; i2 < blockSize; i2++) {
                words[offset + i2] ^= block[i2];
              }
            }
            return CBC2;
          }();
          var C_pad = C2.pad = {};
          var Pkcs7 = C_pad.Pkcs7 = {
            /**
             * Pads data using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to pad.
             * @param {number} blockSize The multiple that the data should be padded to.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
             */
            pad: function(data, blockSize) {
              var blockSizeBytes = blockSize * 4;
              var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
              var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
              var paddingWords = [];
              for (var i2 = 0; i2 < nPaddingBytes; i2 += 4) {
                paddingWords.push(paddingWord);
              }
              var padding = WordArray.create(paddingWords, nPaddingBytes);
              data.concat(padding);
            },
            /**
             * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to unpad.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.unpad(wordArray);
             */
            unpad: function(data) {
              var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
              data.sigBytes -= nPaddingBytes;
            }
          };
          C_lib.BlockCipher = Cipher.extend({
            /**
             * Configuration options.
             *
             * @property {Mode} mode The block mode to use. Default: CBC
             * @property {Padding} padding The padding strategy to use. Default: Pkcs7
             */
            cfg: Cipher.cfg.extend({
              mode: CBC,
              padding: Pkcs7
            }),
            reset: function() {
              var modeCreator;
              Cipher.reset.call(this);
              var cfg = this.cfg;
              var iv = cfg.iv;
              var mode = cfg.mode;
              if (this._xformMode == this._ENC_XFORM_MODE) {
                modeCreator = mode.createEncryptor;
              } else {
                modeCreator = mode.createDecryptor;
                this._minBufferSize = 1;
              }
              if (this._mode && this._mode.__creator == modeCreator) {
                this._mode.init(this, iv && iv.words);
              } else {
                this._mode = modeCreator.call(mode, this, iv && iv.words);
                this._mode.__creator = modeCreator;
              }
            },
            _doProcessBlock: function(words, offset) {
              this._mode.processBlock(words, offset);
            },
            _doFinalize: function() {
              var finalProcessedBlocks;
              var padding = this.cfg.padding;
              if (this._xformMode == this._ENC_XFORM_MODE) {
                padding.pad(this._data, this.blockSize);
                finalProcessedBlocks = this._process(true);
              } else {
                finalProcessedBlocks = this._process(true);
                padding.unpad(finalProcessedBlocks);
              }
              return finalProcessedBlocks;
            },
            blockSize: 128 / 32
          });
          var CipherParams = C_lib.CipherParams = Base.extend({
            /**
             * Initializes a newly created cipher params object.
             *
             * @param {Object} cipherParams An object with any of the possible cipher parameters.
             *
             * @example
             *
             *     var cipherParams = CryptoJS.lib.CipherParams.create({
             *         ciphertext: ciphertextWordArray,
             *         key: keyWordArray,
             *         iv: ivWordArray,
             *         salt: saltWordArray,
             *         algorithm: CryptoJS.algo.AES,
             *         mode: CryptoJS.mode.CBC,
             *         padding: CryptoJS.pad.PKCS7,
             *         blockSize: 4,
             *         formatter: CryptoJS.format.OpenSSL
             *     });
             */
            init: function(cipherParams) {
              this.mixIn(cipherParams);
            },
            /**
             * Converts this cipher params object to a string.
             *
             * @param {Format} formatter (Optional) The formatting strategy to use.
             *
             * @return {string} The stringified cipher params.
             *
             * @throws Error If neither the formatter nor the default formatter is set.
             *
             * @example
             *
             *     var string = cipherParams + '';
             *     var string = cipherParams.toString();
             *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
             */
            toString: function(formatter) {
              return (formatter || this.formatter).stringify(this);
            }
          });
          var C_format = C2.format = {};
          var OpenSSLFormatter = C_format.OpenSSL = {
            /**
             * Converts a cipher params object to an OpenSSL-compatible string.
             *
             * @param {CipherParams} cipherParams The cipher params object.
             *
             * @return {string} The OpenSSL-compatible string.
             *
             * @static
             *
             * @example
             *
             *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
             */
            stringify: function(cipherParams) {
              var wordArray;
              var ciphertext = cipherParams.ciphertext;
              var salt = cipherParams.salt;
              if (salt) {
                wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
              } else {
                wordArray = ciphertext;
              }
              return wordArray.toString(Base64);
            },
            /**
             * Converts an OpenSSL-compatible string to a cipher params object.
             *
             * @param {string} openSSLStr The OpenSSL-compatible string.
             *
             * @return {CipherParams} The cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
             */
            parse: function(openSSLStr) {
              var salt;
              var ciphertext = Base64.parse(openSSLStr);
              var ciphertextWords = ciphertext.words;
              if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
                salt = WordArray.create(ciphertextWords.slice(2, 4));
                ciphertextWords.splice(0, 4);
                ciphertext.sigBytes -= 16;
              }
              return CipherParams.create({ ciphertext, salt });
            }
          };
          var SerializableCipher = C_lib.SerializableCipher = Base.extend({
            /**
             * Configuration options.
             *
             * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
             */
            cfg: Base.extend({
              format: OpenSSLFormatter
            }),
            /**
             * Encrypts a message.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            encrypt: function(cipher, message2, key2, cfg) {
              cfg = this.cfg.extend(cfg);
              var encryptor = cipher.createEncryptor(key2, cfg);
              var ciphertext = encryptor.finalize(message2);
              var cipherCfg = encryptor.cfg;
              return CipherParams.create({
                ciphertext,
                key: key2,
                iv: cipherCfg.iv,
                algorithm: cipher,
                mode: cipherCfg.mode,
                padding: cipherCfg.padding,
                blockSize: cipher.blockSize,
                formatter: cfg.format
              });
            },
            /**
             * Decrypts serialized ciphertext.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            decrypt: function(cipher, ciphertext, key2, cfg) {
              cfg = this.cfg.extend(cfg);
              ciphertext = this._parse(ciphertext, cfg.format);
              var plaintext = cipher.createDecryptor(key2, cfg).finalize(ciphertext.ciphertext);
              return plaintext;
            },
            /**
             * Converts serialized ciphertext to CipherParams,
             * else assumed CipherParams already and returns ciphertext unchanged.
             *
             * @param {CipherParams|string} ciphertext The ciphertext.
             * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
             *
             * @return {CipherParams} The unserialized ciphertext.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
             */
            _parse: function(ciphertext, format2) {
              if (typeof ciphertext == "string") {
                return format2.parse(ciphertext, this);
              } else {
                return ciphertext;
              }
            }
          });
          var C_kdf = C2.kdf = {};
          var OpenSSLKdf = C_kdf.OpenSSL = {
            /**
             * Derives a key and IV from a password.
             *
             * @param {string} password The password to derive from.
             * @param {number} keySize The size in words of the key to generate.
             * @param {number} ivSize The size in words of the IV to generate.
             * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
             *
             * @return {CipherParams} A cipher params object with the key, IV, and salt.
             *
             * @static
             *
             * @example
             *
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
             */
            execute: function(password, keySize, ivSize, salt, hasher) {
              if (!salt) {
                salt = WordArray.random(64 / 8);
              }
              if (!hasher) {
                var key2 = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
              } else {
                var key2 = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
              }
              var iv = WordArray.create(key2.words.slice(keySize), ivSize * 4);
              key2.sigBytes = keySize * 4;
              return CipherParams.create({ key: key2, iv, salt });
            }
          };
          var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
            /**
             * Configuration options.
             *
             * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
             */
            cfg: SerializableCipher.cfg.extend({
              kdf: OpenSSLKdf
            }),
            /**
             * Encrypts a message using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
             */
            encrypt: function(cipher, message2, password, cfg) {
              cfg = this.cfg.extend(cfg);
              var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
              cfg.iv = derivedParams.iv;
              var ciphertext = SerializableCipher.encrypt.call(this, cipher, message2, derivedParams.key, cfg);
              ciphertext.mixIn(derivedParams);
              return ciphertext;
            },
            /**
             * Decrypts serialized ciphertext using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
             */
            decrypt: function(cipher, ciphertext, password, cfg) {
              cfg = this.cfg.extend(cfg);
              ciphertext = this._parse(ciphertext, cfg.format);
              var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
              cfg.iv = derivedParams.iv;
              var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
              return plaintext;
            }
          });
        }();
      });
    })(cipherCore);
    return cipherCore.exports;
  }
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C2 = CryptoJS;
        var C_lib = C2.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C2.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d2 = [];
          for (var i2 = 0; i2 < 256; i2++) {
            if (i2 < 128) {
              d2[i2] = i2 << 1;
            } else {
              d2[i2] = i2 << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i2 = 0; i2 < 256; i2++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d2[x];
            var x4 = d2[x2];
            var x8 = d2[x4];
            var t2 = d2[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t2 << 24 | t2 >>> 8;
            SUB_MIX_1[x] = t2 << 16 | t2 >>> 16;
            SUB_MIX_2[x] = t2 << 8 | t2 >>> 24;
            SUB_MIX_3[x] = t2;
            var t2 = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t2 << 24 | t2 >>> 8;
            INV_SUB_MIX_1[sx] = t2 << 16 | t2 >>> 16;
            INV_SUB_MIX_2[sx] = t2 << 8 | t2 >>> 24;
            INV_SUB_MIX_3[sx] = t2;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d2[d2[d2[x8 ^ x2]]];
              xi ^= d2[d2[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t2;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key2 = this._keyPriorReset = this._key;
            var keyWords = key2.words;
            var keySize = key2.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t2 = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t2 = t2 << 8 | t2 >>> 24;
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                  t2 ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t2;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t2 = keySchedule[ksRow];
              } else {
                var t2 = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t2;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t2 >>> 24]] ^ INV_SUB_MIX_1[SBOX[t2 >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t2 >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t2 & 255]];
              }
            }
          },
          encryptBlock: function(M2, offset) {
            this._doCryptBlock(M2, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M2, offset) {
            var t2 = M2[offset + 1];
            M2[offset + 1] = M2[offset + 3];
            M2[offset + 3] = t2;
            this._doCryptBlock(M2, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t2 = M2[offset + 1];
            M2[offset + 1] = M2[offset + 3];
            M2[offset + 3] = t2;
          },
          _doCryptBlock: function(M2, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M2[offset] ^ keySchedule[0];
            var s1 = M2[offset + 1] ^ keySchedule[1];
            var s2 = M2[offset + 2] ^ keySchedule[2];
            var s3 = M2[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M2[offset] = t0;
            M2[offset + 1] = t1;
            M2[offset + 2] = t2;
            M2[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C2.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  })(aes);
  var aesExports = aes.exports;
  var encUtf8 = { exports: {} };
  (function(module2, exports2) {
    (function(root2, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      return CryptoJS.enc.Utf8;
    });
  })(encUtf8);
  var encUtf8Exports = encUtf8.exports;
  const UTF8 = /* @__PURE__ */ getDefaultExportFromCjs(encUtf8Exports);
  var padPkcs7 = { exports: {} };
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      return CryptoJS.pad.Pkcs7;
    });
  })(padPkcs7);
  var padPkcs7Exports = padPkcs7.exports;
  const pkcs7 = /* @__PURE__ */ getDefaultExportFromCjs(padPkcs7Exports);
  var modeEcb = { exports: {} };
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS) {
      CryptoJS.mode.ECB = function() {
        var ECB2 = CryptoJS.lib.BlockCipherMode.extend();
        ECB2.Encryptor = ECB2.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB2.Decryptor = ECB2.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB2;
      }();
      return CryptoJS.mode.ECB;
    });
  })(modeEcb);
  var modeEcbExports = modeEcb.exports;
  const ECB = /* @__PURE__ */ getDefaultExportFromCjs(modeEcbExports);
  requireMd5();
  requireEncBase64();
  class AesEncryption {
    constructor(opt = {}) {
      __publicField(this, "key");
      __publicField(this, "iv");
      const { key: key2, iv } = opt;
      if (key2) {
        this.key = encUtf8Exports.parse(key2);
      }
      if (iv) {
        this.iv = encUtf8Exports.parse(iv);
      }
    }
    get getOptions() {
      return {
        mode: ECB,
        padding: pkcs7,
        iv: this.iv
      };
    }
    encryptByAES(cipherText) {
      return aesExports.encrypt(cipherText, this.key, this.getOptions).toString();
    }
    decryptByAES(cipherText) {
      return aesExports.decrypt(cipherText, this.key, this.getOptions).toString(UTF8);
    }
  }
  function isDef(val) {
    return typeof val !== "undefined";
  }
  function isUnDef(val) {
    return !isDef(val);
  }
  function isNull(val) {
    return val === null;
  }
  function isNullOrUnDef(val) {
    return isUnDef(val) || isNull(val);
  }
  function createStorage({
    prefixKey = "",
    key: key2 = cacheCipher.key,
    iv = cacheCipher.iv,
    timeout = null,
    hasEncrypt = true
  } = {}) {
    if (hasEncrypt && [key2.length, iv.length].some((item) => item !== 16)) {
      throw new Error("When hasEncrypt is true, the key or iv must be 16 bits!");
    }
    const encryption = new AesEncryption({ key: key2, iv });
    class Storage {
      constructor() {
        __publicField(this, "prefixKey");
        __publicField(this, "encryption");
        __publicField(this, "hasEncrypt");
        this.prefixKey = prefixKey;
        this.encryption = encryption;
        this.hasEncrypt = hasEncrypt;
      }
      getKey(key22) {
        return `${this.prefixKey}${key22}`.toUpperCase();
      }
      /**
       * Set cache
       * @param {string} key
       * @param {*} value
       * @param {*} expire Expiration time in seconds
       * @memberof Cache
       */
      set(key22, value, expire = timeout) {
        try {
          const stringData = JSON.stringify({
            value,
            time: Date.now(),
            expire: !isNullOrUnDef(expire) ? (/* @__PURE__ */ new Date()).getTime() + expire * 1e3 : null
          });
          const stringifyValue = this.hasEncrypt ? this.encryption.encryptByAES(stringData) : stringData;
          uni.setStorageSync(this.getKey(key22), stringifyValue);
        } catch (err) {
          throw new Error(`setStorageSync error: ${err}`);
        }
      }
      /**
       * Read cache
       * @param {string} key
       * @param {*} def
       * @memberof Cache
       */
      get(key22, def = null) {
        const val = uni.getStorageSync(this.getKey(key22));
        if (!val)
          return def;
        try {
          const decVal = this.hasEncrypt ? this.encryption.decryptByAES(val) : val;
          const data = JSON.parse(decVal);
          const { value, expire } = data;
          if (isNullOrUnDef(expire) || expire < (/* @__PURE__ */ new Date()).getTime()) {
            this.remove(key22);
            return def;
          }
          return value;
        } catch (e2) {
          return def;
        }
      }
      /**
       * Delete cache based on key
       * @param {string} key
       * @memberof Cache
       */
      remove(key22) {
        uni.removeStorageSync(this.getKey(key22));
      }
      /**
       * Delete all caches of this instance
       */
      clear() {
        uni.clearStorageSync();
      }
    }
    return new Storage();
  }
  const options = {
    prefixKey: DEFAULT_PREFIX_KEY,
    key: cacheCipher.key,
    iv: cacheCipher.iv,
    hasEncrypt: enableStorageEncryption,
    timeout: DEFAULT_CACHE_TIME
  };
  const storage = createStorage(options);
  function setCache(key2, value, expire) {
    storage.set(key2, value, expire);
  }
  function getCache(key2) {
    return storage.get(key2);
  }
  function removeCache(key2) {
    return storage.remove(key2);
  }
  const TOKEN_KEY = "TOKEN__";
  const authenticationScheme = "Bearer";
  function getToken() {
    return getCache(TOKEN_KEY) || null;
  }
  function getAuthorization() {
    const token = getToken();
    return token ? `${authenticationScheme} ${token}` : null;
  }
  function setToken(token) {
    return setCache(TOKEN_KEY, token);
  }
  function isLogin() {
    return !!getToken();
  }
  const BASE_URL = getBaseUrl();
  const ContentType = {
    "Content-Type": ContentTypeEnum.JSON,
    "Accept": "application/json, text/plain, */*"
  };
  const alovaInstance = createAlova(__spreadProps(__spreadValues({
    baseURL: BASE_URL,
    localCache: null
  }, AdapterUniapp({})), {
    timeout: 5e3,
    beforeRequest: (method) => __async(this, null, function* () {
      var _a;
      method.config.headers = assign$3(method.config.headers, ContentType);
      const { config } = method;
      const ignoreAuth = !((_a = config.meta) == null ? void 0 : _a.ignoreAuth);
      const authorization = ignoreAuth ? getAuthorization() : null;
      if (ignoreAuth && !authorization) {
        throw new Error("[请求错误]：未登录");
      }
      method.config.headers.authorization = getAuthorization();
    }),
    responded: {
      /**
       * 请求成功的拦截器
       * 第二个参数为当前请求的method实例，你可以用它同步请求前后的配置信息
       * @param response
       * @param method
       */
      onSuccess: (response, method) => __async(this, null, function* () {
        const { config } = method;
        const { requestType } = config;
        const { statusCode, data: rawData, errMsg } = response;
        if (statusCode === 200) {
          if (requestType) {
            return response;
          }
          const { code, message: message2, data } = rawData;
          if (code === ResultEnum.SUCCESS) {
            return data;
          }
          handleLogicError(code, message2);
          throw new Error(`请求错误[${code}]：${message2}`);
        }
        handleHttpStatus(statusCode, message || "");
        throw new Error(`HTTP请求错误[${statusCode}]：${errMsg}`);
      }),
      /**
       * 请求失败的拦截器，请求错误时将会进入该拦截器。
       */
      onError: (err) => __async(this, null, function* () {
        throw new Error(`请求失败：${err}`);
      }),
      /**
       * 请求完成的拦截器, 无论请求成功或失败都会进入该拦截器
       */
      onComplete: () => __async(this, null, function* () {
      })
    }
  }));
  const request = alovaInstance;
  function getUserInfoApi() {
    return request.Get(
      "/users"
      /* GET_USER_INFO */
    );
  }
  const LOGIN = "/login";
  function login(params) {
    return request.Post(LOGIN, params, {
      meta: {
        ignoreAuth: true
      }
    });
  }
  const requestHookAssert = createAssert("useRequest");
  const watcherHookAssert = createAssert("useWatcher");
  const fetcherHookAssert = createAssert("useFetcher");
  const coreHookAssert = (hookType) => ({
    [
      1
      /* EnumHookType.USE_REQUEST */
    ]: requestHookAssert,
    [
      2
      /* EnumHookType.USE_WATCHER */
    ]: watcherHookAssert,
    [
      3
      /* EnumHookType.USE_FETCHER */
    ]: fetcherHookAssert
  })[hookType];
  const assertMethod = (assert, methodInstance) => assert(instanceOf(methodInstance, Method), "expected a method instance.");
  const debounce = (fn, delay) => {
    let timer = nullValue;
    return function debounceFn(...args) {
      const bindFn = fn.bind(this, ...args);
      const delayMill = isNumber$1(delay) ? delay : delay(...args);
      timer && clearTimeoutTimer(timer);
      if (delayMill > 0) {
        timer = setTimeoutFn(bindFn, delayMill);
      } else {
        bindFn();
      }
    };
  };
  const mapObject = (obj, callback) => {
    const ret = {};
    for (const key2 in obj) {
      ret[key2] = callback(obj[key2], key2, obj);
    }
    return ret;
  };
  const undefStr = "undefined";
  const pushItem = (ary, ...item) => ary.push(...item);
  const mapItem = (ary, callbackfn) => ary.map(callbackfn);
  const filterItem = (ary, predicate) => ary.filter(predicate);
  typeof window === undefStr && (typeof process !== undefStr ? typeof process.cwd === "function" : typeof Deno !== undefStr);
  const createEventManager = () => {
    const eventMap = {};
    return {
      eventMap,
      on(type2, handler) {
        const eventTypeItem = eventMap[type2] = eventMap[type2] || [];
        pushItem(eventTypeItem, handler);
        return () => {
          eventMap[type2] = filterItem(eventTypeItem, (item) => item !== handler);
        };
      },
      off(type2, handler) {
        const handlers = eventMap[type2];
        if (!handlers) {
          return;
        }
        if (handler) {
          const index = handlers.indexOf(handler);
          index > -1 && handlers.splice(index, 1);
        } else {
          delete eventMap[type2];
        }
      },
      emit(type2, event) {
        const handlers = eventMap[type2] || [];
        return mapItem(handlers, (handler) => handler(event));
      }
    };
  };
  const KEY_SUCCESS = "success";
  const KEY_ERROR = "error";
  const KEY_COMPLETE = "complete";
  var createHook = (ht2, c2, eventManager, ro) => ({
    /** 最后一次请求的method实例 */
    m: undefinedValue,
    /** saveStatesFns */
    sf: [],
    /** removeStatesFns */
    rf: [],
    /** frontStates */
    fs: {},
    /** eventManager */
    em: eventManager,
    /** hookType, useRequest=1, useWatcher=2, useFetcher=3 */
    ht: ht2,
    /** hook config */
    c: c2,
    /** referingObject */
    ro,
    /** managedStates */
    ms: {}
  });
  class AlovaEventBase {
    constructor(method, args) {
      this.method = method;
      this.args = args;
    }
    clone() {
      return __spreadValues({}, this);
    }
    static spawn(method, args) {
      return new AlovaEventBase(method, args);
    }
  }
  class AlovaSuccessEvent extends AlovaEventBase {
    constructor(base, data, fromCache) {
      super(base.method, base.args);
      this.data = data;
      this.fromCache = fromCache;
    }
  }
  class AlovaErrorEvent extends AlovaEventBase {
    constructor(base, error2) {
      super(base.method, base.args);
      this.error = error2;
    }
  }
  class AlovaCompleteEvent extends AlovaEventBase {
    constructor(base, status, data, fromCache, error2) {
      super(base.method, base.args);
      this.status = status;
      this.data = data;
      this.fromCache = status === "error" ? false : fromCache;
      this.error = error2;
    }
  }
  const defaultMiddleware = (_2, next) => next();
  const stateCache = {};
  const getStateCache = (namespace, key2) => {
    const cachedState = stateCache[namespace] || {};
    return cachedState[key2] || {};
  };
  const setStateCache = (namespace, key2, data, hookInstance) => {
    const cachedState = stateCache[namespace] = stateCache[namespace] || {};
    cachedState[key2] = {
      s: data,
      h: hookInstance
    };
  };
  const removeStateCache = (namespace, key2) => {
    const cachedState = stateCache[namespace];
    if (cachedState) {
      deleteAttr(cachedState, key2);
    }
  };
  function useHookToSendRequest(hookInstance, methodHandler, sendCallingArgs = []) {
    const currentHookAssert = coreHookAssert(hookInstance.ht);
    let methodInstance = getHandlerMethod(methodHandler, currentHookAssert, sendCallingArgs);
    const { fs: frontStates, ht: hookType, c: useHookConfig, ms: managedStates } = hookInstance;
    const { loading: loadingState, data: dataState, error: errorState } = frontStates;
    const isFetcher = hookType === 3;
    const { force: forceRequest = falseValue, middleware = defaultMiddleware } = useHookConfig;
    const alovaInstance2 = getContext(methodInstance);
    const { id: id2 } = alovaInstance2;
    const methodKey = getMethodInternalKey(methodInstance);
    const { abortLast = trueValue } = useHookConfig;
    hookInstance.m = methodInstance;
    return (() => __async(this, null, function* () {
      let removeStates = noop;
      let saveStates = noop;
      let isNextCalled = falseValue;
      let responseHandlePromise = promiseResolve(undefinedValue);
      let offDownloadEvent = noop;
      let offUploadEvent = noop;
      const cachedResponse = yield queryCache(methodInstance);
      let fromCache = () => !!cachedResponse;
      let controlledLoading = falseValue;
      if (!isFetcher) {
        saveStates = (frontStates2) => setStateCache(id2, methodKey, frontStates2, hookInstance);
        saveStates(__spreadValues(__spreadValues({}, frontStates), managedStates));
        removeStates = () => removeStateCache(id2, methodKey);
      }
      const guardNext = (guardNextConfig) => {
        isNextCalled = trueValue;
        const { force: guardNextForceRequest = forceRequest, method: guardNextReplacingMethod = methodInstance } = guardNextConfig || {};
        const forceRequestFinally = sloughConfig(guardNextForceRequest, [
          newInstance$1(AlovaEventBase, methodInstance, sendCallingArgs)
        ]);
        const progressUpdater = (stage) => ({ loaded, total }) => {
          frontStates[stage].v = {
            loaded,
            total
          };
        };
        methodInstance = guardNextReplacingMethod;
        pushItem$2(hookInstance.sf, saveStates);
        pushItem$2(hookInstance.rf, removeStates);
        if (!controlledLoading) {
          loadingState.v = !!forceRequestFinally || !cachedResponse;
        }
        const { downloading: enableDownload, uploading: enableUpload } = hookInstance.ro.trackedKeys;
        offDownloadEvent = enableDownload ? methodInstance.onDownload(progressUpdater("downloading")) : offDownloadEvent;
        offUploadEvent = enableUpload ? methodInstance.onUpload(progressUpdater("uploading")) : offUploadEvent;
        responseHandlePromise = methodInstance.send(forceRequestFinally);
        fromCache = () => methodInstance.fromCache || falseValue;
        return responseHandlePromise;
      };
      const commonContext = {
        method: methodInstance,
        cachedResponse,
        config: useHookConfig,
        abort: () => methodInstance.abort()
      };
      const toUpdateResponse = () => hookType !== 2 || !abortLast || hookInstance.m === methodInstance;
      const middlewareCompletePromise = isFetcher ? middleware(__spreadProps(__spreadValues({}, commonContext), {
        args: sendCallingArgs,
        fetch: (methodInstance2, ...args) => {
          assertMethod(currentHookAssert, methodInstance2);
          return useHookToSendRequest(hookInstance, methodInstance2, args);
        },
        proxyStates: omit(frontStates, "data"),
        controlFetching(control = trueValue) {
          controlledLoading = control;
        }
      }), guardNext) : middleware(__spreadProps(__spreadValues({}, commonContext), {
        args: sendCallingArgs,
        send: (...args) => useHookToSendRequest(hookInstance, methodHandler, args),
        proxyStates: frontStates,
        controlLoading(control = trueValue) {
          controlledLoading = control;
        }
      }), guardNext);
      let finallyResponse = undefinedValue;
      const baseEvent = AlovaEventBase.spawn(methodInstance, sendCallingArgs);
      try {
        const middlewareReturnedData = yield middlewareCompletePromise;
        const afterSuccess = (data) => {
          if (!isFetcher) {
            toUpdateResponse() && (dataState.v = data);
          } else if (hookInstance.c.updateState !== falseValue) {
            const cachedState = getStateCache(id2, methodKey).s;
            cachedState && (cachedState.data.v = data);
          }
          if (toUpdateResponse()) {
            errorState.v = undefinedValue;
            !controlledLoading && (loadingState.v = falseValue);
            hookInstance.em.emit(KEY_SUCCESS, newInstance$1(AlovaSuccessEvent, baseEvent, data, fromCache()));
            hookInstance.em.emit(KEY_COMPLETE, newInstance$1(AlovaCompleteEvent, baseEvent, KEY_SUCCESS, data, fromCache(), undefinedValue));
          }
          return data;
        };
        finallyResponse = // 中间件中未返回数据或返回undefined时，去获取真实的响应数据
        // 否则使用返回数据并不再等待响应promise，此时也需要调用响应回调
        middlewareReturnedData !== undefinedValue ? afterSuccess(middlewareReturnedData) : isNextCalled ? (
          // 当middlewareCompletePromise为resolve时有两种可能
          // 1. 请求正常
          // 2. 请求错误，但错误被中间件函数捕获了，此时也将调用成功回调，即afterSuccess(undefinedValue)
          yield promiseThen(responseHandlePromise, afterSuccess, () => afterSuccess(undefinedValue))
        ) : (
          // 如果isNextCalled未被调用，则不返回数据
          undefinedValue
        );
        !isNextCalled && !controlledLoading && (loadingState.v = falseValue);
      } catch (error2) {
        if (toUpdateResponse()) {
          errorState.v = error2;
          !controlledLoading && (loadingState.v = falseValue);
          hookInstance.em.emit(KEY_ERROR, newInstance$1(AlovaErrorEvent, baseEvent, error2));
          hookInstance.em.emit(KEY_COMPLETE, newInstance$1(AlovaCompleteEvent, baseEvent, KEY_ERROR, undefinedValue, fromCache(), error2));
        }
        throw error2;
      }
      offDownloadEvent();
      offUploadEvent();
      return finallyResponse;
    }))();
  }
  const refCurrent = (ref) => ref.current;
  function createRequestState(hookType, methodHandler, useHookConfig, initialData, immediate = falseValue, watchingStates, debounceDelay = 0) {
    var _a;
    useHookConfig = __spreadValues({}, useHookConfig);
    const { middleware, __referingObj: referingObject = { trackedKeys: {}, bindError: falseValue } } = useHookConfig;
    let initialLoading = middleware ? falseValue : !!immediate;
    if (immediate && !middleware) {
      try {
        const methodInstance = getHandlerMethod(methodHandler, coreHookAssert(hookType));
        const alovaInstance2 = getContext(methodInstance);
        const l1CacheResult = alovaInstance2.l1Cache.get(buildNamespacedCacheKey(alovaInstance2.id, getMethodInternalKey(methodInstance)));
        let cachedResponse = undefinedValue;
        if (l1CacheResult && !instanceOf(l1CacheResult, PromiseCls)) {
          const [data2, expireTimestamp] = l1CacheResult;
          if (!expireTimestamp || expireTimestamp > getTime()) {
            cachedResponse = data2;
          }
        }
        const forceRequestFinally = sloughConfig((_a = useHookConfig.force) !== null && _a !== void 0 ? _a : falseValue);
        initialLoading = !!forceRequestFinally || !cachedResponse;
      } catch (error3) {
      }
    }
    const { create, effectRequest, ref, objectify, exposeProvider, transformState2Proxy } = statesHookHelper(promiseStatesHook(), referingObject);
    const progress = {
      total: 0,
      loaded: 0
    };
    const { managedStates = {} } = useHookConfig;
    const managedStatesProxy = mapObject(managedStates, (state, key2) => transformState2Proxy(state, key2));
    const data = create(isFn(initialData) ? initialData() : initialData, "data");
    const loading = create(initialLoading, "loading");
    const error2 = create(undefinedValue, "error");
    const downloading = create(__spreadValues({}, progress), "downloading");
    const uploading = create(__spreadValues({}, progress), "uploading");
    const frontStates = objectify([data, loading, error2, downloading, uploading]);
    const eventManager = createEventManager();
    const hookInstance = refCurrent(ref(createHook(hookType, useHookConfig, eventManager, referingObject)));
    hookInstance.fs = frontStates;
    hookInstance.em = eventManager;
    hookInstance.c = useHookConfig;
    hookInstance.ms = managedStatesProxy;
    const handleRequest = (handler = methodHandler, sendCallingArgs) => useHookToSendRequest(hookInstance, handler, sendCallingArgs);
    const wrapEffectRequest = (ro = referingObject, handler) => promiseCatch(handleRequest(handler), (error3) => {
      if (!ro.bindError && !ro.trackedKeys.error) {
        throw error3;
      }
    });
    ref(debounce((delay, ro, handler) => wrapEffectRequest(ro, handler), (changedIndex) => isNumber$1(changedIndex) ? isArray$1(debounceDelay) ? debounceDelay[changedIndex] : debounceDelay : 0));
    if (!globalConfigMap.ssr) {
      effectRequest({
        handler: (
          // watchingStates为数组时表示监听状态（包含空数组），为undefined时表示不监听状态
          () => wrapEffectRequest(referingObject)
        ),
        removeStates: () => forEach(hookInstance.rf, (fn) => fn()),
        saveStates: (states) => forEach(hookInstance.sf, (fn) => fn(states)),
        frontStates: __spreadValues(__spreadValues({}, frontStates), managedStatesProxy),
        watchingStates,
        immediate: immediate !== null && immediate !== void 0 ? immediate : trueValue
      });
    }
    return exposeProvider(__spreadProps(__spreadValues({}, objectify([data, loading, error2, downloading, uploading])), {
      abort: () => hookInstance.m && hookInstance.m.abort(),
      /**
       * 通过执行该方法来手动发起请求
       * @param sendCallingArgs 调用send函数时传入的参数
       * @param methodInstance 方法对象
       * @param isFetcher 是否为isFetcher调用
       * @returns 请求promise
       */
      send: (sendCallingArgs, methodInstance) => handleRequest(methodInstance, sendCallingArgs),
      onSuccess(handler) {
        eventManager.on(KEY_SUCCESS, handler);
      },
      onError(handler) {
        referingObject.bindError = trueValue;
        eventManager.on(KEY_ERROR, handler);
      },
      onComplete(handler) {
        eventManager.on(KEY_COMPLETE, handler);
      }
    }));
  }
  function useRequest(handler, config = {}) {
    const { immediate = trueValue, initialData } = config;
    const props = createRequestState(1, handler, config, initialData, !!immediate);
    const { send } = props;
    return objAssign(props, {
      send: (...args) => send(args)
    });
  }
  const useUserStore = /* @__PURE__ */ defineStore("UserStore", () => {
    const token = vue$1.ref(null);
    const userInfo = vue$1.ref(null);
    function initUserInfo() {
      if (isLogin()) {
        token.value = getToken();
        getUserInfo();
      }
    }
    const loggedIn = vue$1.computed(() => !!token.value);
    const { send: sendLogin } = useRequest(login, { immediate: false });
    function login$1(params) {
      return __async(this, null, function* () {
        try {
          const res = yield sendLogin(params);
          token.value = res.token;
          setToken(res.token);
          yield getUserInfo();
        } catch (error2) {
          throw error2;
        }
      });
    }
    const { send: _getUserInfo } = useRequest(getUserInfoApi, { initialData: null, immediate: false });
    function getUserInfo() {
      return __async(this, null, function* () {
        try {
          userInfo.value = yield _getUserInfo();
        } catch (error2) {
          throw error2;
        }
      });
    }
    function logout() {
      return __async(this, null, function* () {
        try {
          removeCache(TOKEN_KEY);
          userInfo.value = null;
          token.value = null;
        } catch (err) {
          throw err;
        }
      });
    }
    return {
      userInfo,
      loggedIn,
      login: login$1,
      logout,
      getUserInfo,
      initUserInfo
    };
  });
  const _sfc_main = /* @__PURE__ */ vue$1.defineComponent({
    __name: "App",
    setup(__props, { expose: __expose }) {
      __expose();
      onLaunch(() => {
        plus.navigator.setFullscreen(true);
      });
      onShow(() => {
        const userStore = useUserStore();
        userStore.initUserInfo();
        formatAppLog("log", "at App.vue:11", "App Show");
      });
      onHide(() => {
        formatAppLog("log", "at App.vue:14", "App Hide");
      });
      const __returned__ = { get onHide() {
        return onHide;
      }, get onLaunch() {
        return onLaunch;
      }, get onShow() {
        return onShow;
      }, get useUserStore() {
        return useUserStore;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  const App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "D:/ty/medical-device/src/App.vue"]]);
  /*!
  * uni-mini-router v0.1.6
  * 2023/12/21 13:42:18 weisheng
  */
  function a(e2) {
    return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
      return typeof e3;
    } : function(e3) {
      return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
    }, a(e2);
  }
  function i(e2) {
    var r2 = function(e3, r3) {
      if ("object" !== a(e3) || null === e3) return e3;
      var t2 = e3[Symbol.toPrimitive];
      if (void 0 !== t2) {
        var n2 = t2.call(e3, r3 || "default");
        if ("object" !== a(n2)) return n2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r3 ? String : Number)(e3);
    }(e2, "string");
    return "symbol" === a(r2) ? r2 : r2 + "";
  }
  function u(e2, r2, t2) {
    return (r2 = i(r2)) in e2 ? Object.defineProperty(e2, r2, { value: t2, enumerable: true, configurable: true, writable: true }) : e2[r2] = t2, e2;
  }
  var c, l = Symbol("__ROUTER__"), f = Symbol("__ROUTE__");
  !function(e2) {
    e2.push = "navigateTo", e2.replace = "redirectTo", e2.replaceAll = "reLaunch", e2.pushTab = "switchTab", e2.back = "navigateBack";
  }(c || (c = {}));
  var s = ["navigateTo", "redirectTo", "reLaunch", "switchTab", "navigateBack"];
  function p(e2) {
    var r2 = {}, t2 = e2.split("?"), n2 = "", o2 = [];
    t2.length > 1 && (n2 = t2[1]), o2 = n2.split("&");
    for (var a2 = 0; o2.length > a2; a2++) 2 === o2[a2].split("=").length && (r2[o2[a2].split("=")[0]] = o2[a2].split("=")[1]);
    return r2;
  }
  function v(e2, r2, t2) {
    return e2.replace(RegExp(r2, "g"), t2);
  }
  function h(e2) {
    return e2 = v(e2, "//", "/"), e2 = v(e2, "https:/", "https://"), e2 = v(e2, "http:/", "http://");
  }
  function b(e2) {
    return null == e2 || 0 === Object.keys(e2).length;
  }
  function g(e2, r2) {
    var t2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(e2);
      r2 && (n2 = n2.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
      })), t2.push.apply(t2, n2);
    }
    return t2;
  }
  function y(e2) {
    for (var r2 = 1; arguments.length > r2; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? g(Object(t2), true).forEach(function(r3) {
        u(e2, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : g(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e2;
  }
  var d = { navigateTo: uni.navigateTo, redirectTo: uni.redirectTo, reLaunch: uni.reLaunch, switchTab: uni.switchTab, navigateBack: uni.navigateBack };
  function m(e2, r2, t2) {
    var n2 = O(e2, r2);
    switch (t2) {
      case "push":
        d.navigateTo({ url: n2 });
        break;
      case "replace":
        d.redirectTo({ url: n2 });
        break;
      case "pushTab":
        d.switchTab({ url: n2 });
        break;
      case "replaceAll":
        d.reLaunch({ url: n2 });
        break;
      default:
        throw Error("无效的路由类型，请确保提供正确的路由类型");
    }
  }
  function O(e2, r2) {
    var t2 = "", n2 = {};
    if ("string" == typeof e2) t2 = e2;
    else {
      if (e2.name) {
        var o2 = r2.routes.find(function(r3) {
          return r3.name === e2.name;
        });
        if (!o2 || !o2.path) throw Error("您正在尝试访问的路由未在路由表中定义。请检查您的路由配置。");
        t2 = o2.path, n2 = e2.params;
      } else e2.path && (t2 = h("/".concat(e2.path.split("?")[0])), n2 = y(y({}, p(e2.path)), e2.query || {}));
      n2 && (t2 = function(e3, r3) {
        for (var t3 in r3) e3.indexOf("?") > -1 ? e3 += "&".concat(t3, "=").concat(r3[t3]) : e3 += "?".concat(t3, "=").concat(r3[t3]);
        return e3;
      }(t2, n2 = function(e3) {
        var r3 = {};
        if (e3) for (var t3 in e3) {
          var n3 = e3[t3];
          void 0 === n3 && (n3 = ""), r3[t3] = n3;
        }
        return r3;
      }(n2)));
    }
    return t2;
  }
  function k(e2) {
    var r2, t2 = (r2 = getCurrentPages()).length > 0 ? r2[r2.length - 1] : void 0;
    if (t2 && t2.route && e2.routes) {
      var n2 = P("/".concat(t2.route), e2);
      return t2.$page && (n2.fullPath = t2.$page.fullPath ? t2.$page.fullPath : "", n2.query = t2.$page.fullPath ? p(t2.$page.fullPath) : {}, n2.params = t2.$page.fullPath ? p(t2.$page.fullPath) : {}), n2;
    }
  }
  function P(e2, r2) {
    e2 = h(e2.split("?")[0]);
    var t2 = r2.routes.find(function(r3) {
      return r3.path === e2 || r3.aliasPath === e2;
    });
    return JSON.parse(JSON.stringify(t2));
  }
  function T(e2, r2, t2) {
    e2.guardHooks[r2] = [t2];
  }
  var w = { navigateTo: uni.navigateTo, redirectTo: uni.redirectTo, reLaunch: uni.reLaunch, switchTab: uni.switchTab, navigateBack: uni.navigateBack };
  function j(e2) {
    s.forEach(function(r2) {
      d[r2] = function(t2) {
        if ("navigateBack" === r2) w[r2](t2);
        else if (e2.guardHooks.beforeHooks && e2.guardHooks.beforeHooks[0]) {
          var n2 = P(t2.url, e2);
          (function(e3, r3, t3) {
            return new Promise(function(n3, o2) {
              var i2 = function e4(r4) {
                e4._called = true, false === r4 ? o2({}) : n3(void 0 === r4 || true === r4 || r4);
              }, u2 = e3.call(void 0, r3, t3, i2), c2 = Promise.resolve(u2);
              if (3 > e3.length && (c2 = c2.then(i2)), e3.length > 2) {
                var l2 = 'The "next" callback was never called inside of '.concat(e3.name ? '"' + e3.name + '"' : "", ":\n").concat("" + e3, '\n. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.');
                if (null !== u2 && "object" === a(u2) && "then" in u2) c2 = c2.then(function(e4) {
                  return i2._called ? e4 : (console.warn(l2), Promise.reject(Error("Invalid navigation guard")));
                });
                else if (!i2._called) return console.warn(l2), void o2(Error("Invalid navigation guard"));
              }
              c2.catch(function(e4) {
                return o2(e4);
              });
            });
          })(e2.guardHooks.beforeHooks[0], n2, e2.route.value).then(function(n3) {
            if (true === n3) w[r2](t2);
            else if ("string" == typeof n3) {
              var o2 = O(n3, e2);
              w[r2]({ url: o2 });
            } else if ("back" === n3.navType) w.navigateBack(n3);
            else {
              var a2 = O(n3, e2);
              w[n3.navType ? c[n3.navType] : r2]({ url: a2 });
            }
          }).catch(function(e3) {
            throw e3;
          });
        } else w[r2](t2);
      };
    });
  }
  function S(e2, r2) {
    var t2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(e2);
      r2 && (n2 = n2.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
      })), t2.push.apply(t2, n2);
    }
    return t2;
  }
  function $(e2) {
    for (var r2 = 1; arguments.length > r2; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? S(Object(t2), true).forEach(function(r3) {
        u(e2, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : S(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e2;
  }
  function _(e2) {
    var r2 = { routes: e2.routes, guardHooks: { beforeHooks: null, afterHooks: null }, push: function(e3) {
      return m(e3, this, "push");
    }, replace: function(e3) {
      return m(e3, this, "replace");
    }, replaceAll: function(e3) {
      return m(e3, this, "replaceAll");
    }, pushTab: function(e3) {
      return m(e3, this, "pushTab");
    }, back: function(e3) {
      return uni.navigateBack(e3);
    }, beforeEach: function(e3) {
      T(r2, "beforeHooks", e3);
    }, afterEach: function(e3) {
      T(r2, "afterHooks", e3);
    }, install: function(e3) {
      var r3 = this, t2 = this;
      e3.provide(l, this), e3.provide(f, this.route), j(t2), e3.mixin({ beforeCreate: function() {
        if ("page" === this.$mpType && t2.guardHooks.afterHooks && t2.guardHooks.afterHooks[0]) {
          var e4 = t2.route.value, r4 = k(t2);
          t2.guardHooks.afterHooks[0].call(null, r4, e4);
        }
      }, onLoad: function(e4) {
        !b(e4) && b(t2.route.value.query) && b(t2.route.value.params) && (t2.route.value = $($({}, t2.route.value), {}, { query: e4 }));
      }, onShow: function() {
        "page" === this.$mpType && function(e4) {
          e4.route.value = k(e4);
        }(t2);
      } }), Object.defineProperty(e3.config.globalProperties, "$Router", { get: function() {
        return t2;
      } }), Object.defineProperty(e3.config.globalProperties, "$Route", { enumerable: true, get: function() {
        return vue$1.unref(r3.route);
      } });
    }, route: vue$1.shallowRef({ path: "/" }) };
    return r2;
  }
  function createRouterGuard(router2) {
    createBeforeEachGuard(router2);
    createAfterEachGuard(router2);
  }
  function createBeforeEachGuard(router2) {
    router2.beforeEach((to, _2, next) => {
      var _a;
      const _isLogin = isLogin();
      if (to && ((_a = to == null ? void 0 : to.meta) == null ? void 0 : _a.ignoreAuth)) {
        next();
      } else if (!_isLogin && to && to.name !== "Login") {
        next({ name: "Login", params: __spreadValues({ redirect: to.name }, to.query), navType: "push" });
      } else if (_isLogin && to && to.name === "Login") {
        next({ name: "Home", navType: "replaceAll" });
      } else {
        next();
      }
      next();
    });
  }
  function createAfterEachGuard(router2) {
    router2.afterEach((to) => {
      var _a;
      if (to && ((_a = to == null ? void 0 : to.meta) == null ? void 0 : _a.ignoreAuth))
        return;
      const _isLogin = isLogin();
      if (!_isLogin && to && to.name !== "Login") {
        router2.push({ name: "Login", params: __spreadValues({}, to.query) });
      } else if (_isLogin && to && to.name === "Login") {
        router2.replaceAll({ name: "Home" });
      }
    });
  }
  var define_ROUTES_default = [{ path: "/pages/home/index", aliasPath: "/" }, { path: "/pages/login/pin" }, { path: "/pages/health/index" }, { path: "/pages/registeration/index" }, { path: "/pages/health/detection" }, { path: "/pages/login/index" }, { path: "/pages/login/info" }, { path: "/pages/home/index", aliasPath: "/" }, { path: "/pages/login/pin" }, { path: "/pages/health/index" }, { path: "/pages/registeration/index" }, { path: "/pages/health/detection" }, { path: "/pages/login/index" }, { path: "/pages/login/info" }];
  const router = _({
    routes: [...define_ROUTES_default]
    // 路由表信息
  });
  function setupRouter(app) {
    createRouterGuard(router);
    app.use(router);
  }
  const store = createPinia();
  function setupStore(app) {
    app.use(store);
  }
  /*!
   * @intlify/shared v9.1.9
   * (c) 2021 kazuya kawaguchi
   * Released under the MIT License.
   */
  const inBrowser = typeof window !== "undefined";
  let mark;
  let measure;
  {
    const perf2 = inBrowser && window.performance;
    if (perf2 && perf2.mark && perf2.measure && perf2.clearMarks && perf2.clearMeasures) {
      mark = (tag) => perf2.mark(tag);
      measure = (name2, startTag, endTag) => {
        perf2.measure(name2, startTag, endTag);
        perf2.clearMarks(startTag);
        perf2.clearMarks(endTag);
      };
    }
  }
  const RE_ARGS = /\{([0-9a-zA-Z]+)\}/g;
  function format(message2, ...args) {
    if (args.length === 1 && isObject$1(args[0])) {
      args = args[0];
    }
    if (!args || !args.hasOwnProperty) {
      args = {};
    }
    return message2.replace(RE_ARGS, (match, identifier) => {
      return args.hasOwnProperty(identifier) ? args[identifier] : "";
    });
  }
  const hasSymbol = typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
  const makeSymbol = (name2) => hasSymbol ? Symbol(name2) : name2;
  const generateFormatCacheKey = (locale, key2, source) => friendlyJSONstringify({ l: locale, k: key2, s: source });
  const friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/\u0027/g, "\\u0027");
  const isNumber = (val) => typeof val === "number" && isFinite(val);
  const isDate = (val) => toTypeString(val) === "[object Date]";
  const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
  const isEmptyObject = (val) => isPlainObject(val) && Object.keys(val).length === 0;
  function warn(msg, err) {
    if (typeof console !== "undefined") {
      console.warn(`[intlify] ` + msg);
      if (err) {
        console.warn(err.stack);
      }
    }
  }
  const assign = Object.assign;
  let _globalThis;
  const getGlobalThis = () => {
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
  };
  function escapeHtml(rawText) {
    return rawText.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
  }
  const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  function hasOwn$1(obj, key2) {
    return hasOwnProperty$1.call(obj, key2);
  }
  const isArray = Array.isArray;
  const isFunction = (val) => typeof val === "function";
  const isString = (val) => typeof val === "string";
  const isBoolean = (val) => typeof val === "boolean";
  const isObject$1 = (val) => (
    // eslint-disable-line
    val !== null && typeof val === "object"
  );
  const objectToString = Object.prototype.toString;
  const toTypeString = (value) => objectToString.call(value);
  const isPlainObject = (val) => toTypeString(val) === "[object Object]";
  const toDisplayString = (val) => {
    return val == null ? "" : isArray(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);
  };
  const RANGE = 2;
  function generateCodeFrame(source, start = 0, end = source.length) {
    const lines = source.split(/\r?\n/);
    let count = 0;
    const res = [];
    for (let i2 = 0; i2 < lines.length; i2++) {
      count += lines[i2].length + 1;
      if (count >= start) {
        for (let j2 = i2 - RANGE; j2 <= i2 + RANGE || end > count; j2++) {
          if (j2 < 0 || j2 >= lines.length)
            continue;
          const line = j2 + 1;
          res.push(`${line}${" ".repeat(3 - String(line).length)}|  ${lines[j2]}`);
          const lineLength = lines[j2].length;
          if (j2 === i2) {
            const pad = start - (count - lineLength) + 1;
            const length = Math.max(1, end > count ? lineLength - pad : end - start);
            res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
          } else if (j2 > i2) {
            if (end > count) {
              const length = Math.max(Math.min(end - count, lineLength), 1);
              res.push(`   |  ` + "^".repeat(length));
            }
            count += lineLength + 1;
          }
        }
        break;
      }
    }
    return res.join("\n");
  }
  function createEmitter() {
    const events = /* @__PURE__ */ new Map();
    const emitter = {
      events,
      on(event, handler) {
        const handlers = events.get(event);
        const added = handlers && handlers.push(handler);
        if (!added) {
          events.set(event, [handler]);
        }
      },
      off(event, handler) {
        const handlers = events.get(event);
        if (handlers) {
          handlers.splice(handlers.indexOf(handler) >>> 0, 1);
        }
      },
      emit(event, payload) {
        (events.get(event) || []).slice().map((handler) => handler(payload));
        (events.get("*") || []).slice().map((handler) => handler(event, payload));
      }
    };
    return emitter;
  }
  /*!
   * @intlify/message-resolver v9.1.9
   * (c) 2021 kazuya kawaguchi
   * Released under the MIT License.
   */
  const hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwn(obj, key2) {
    return hasOwnProperty.call(obj, key2);
  }
  const isObject = (val) => (
    // eslint-disable-line
    val !== null && typeof val === "object"
  );
  const pathStateMachine = [];
  pathStateMachine[
    0
    /* BEFORE_PATH */
  ] = {
    [
      "w"
      /* WORKSPACE */
    ]: [
      0
      /* BEFORE_PATH */
    ],
    [
      "i"
      /* IDENT */
    ]: [
      3,
      0
      /* APPEND */
    ],
    [
      "["
      /* LEFT_BRACKET */
    ]: [
      4
      /* IN_SUB_PATH */
    ],
    [
      "o"
      /* END_OF_FAIL */
    ]: [
      7
      /* AFTER_PATH */
    ]
  };
  pathStateMachine[
    1
    /* IN_PATH */
  ] = {
    [
      "w"
      /* WORKSPACE */
    ]: [
      1
      /* IN_PATH */
    ],
    [
      "."
      /* DOT */
    ]: [
      2
      /* BEFORE_IDENT */
    ],
    [
      "["
      /* LEFT_BRACKET */
    ]: [
      4
      /* IN_SUB_PATH */
    ],
    [
      "o"
      /* END_OF_FAIL */
    ]: [
      7
      /* AFTER_PATH */
    ]
  };
  pathStateMachine[
    2
    /* BEFORE_IDENT */
  ] = {
    [
      "w"
      /* WORKSPACE */
    ]: [
      2
      /* BEFORE_IDENT */
    ],
    [
      "i"
      /* IDENT */
    ]: [
      3,
      0
      /* APPEND */
    ],
    [
      "0"
      /* ZERO */
    ]: [
      3,
      0
      /* APPEND */
    ]
  };
  pathStateMachine[
    3
    /* IN_IDENT */
  ] = {
    [
      "i"
      /* IDENT */
    ]: [
      3,
      0
      /* APPEND */
    ],
    [
      "0"
      /* ZERO */
    ]: [
      3,
      0
      /* APPEND */
    ],
    [
      "w"
      /* WORKSPACE */
    ]: [
      1,
      1
      /* PUSH */
    ],
    [
      "."
      /* DOT */
    ]: [
      2,
      1
      /* PUSH */
    ],
    [
      "["
      /* LEFT_BRACKET */
    ]: [
      4,
      1
      /* PUSH */
    ],
    [
      "o"
      /* END_OF_FAIL */
    ]: [
      7,
      1
      /* PUSH */
    ]
  };
  pathStateMachine[
    4
    /* IN_SUB_PATH */
  ] = {
    [
      "'"
      /* SINGLE_QUOTE */
    ]: [
      5,
      0
      /* APPEND */
    ],
    [
      '"'
      /* DOUBLE_QUOTE */
    ]: [
      6,
      0
      /* APPEND */
    ],
    [
      "["
      /* LEFT_BRACKET */
    ]: [
      4,
      2
      /* INC_SUB_PATH_DEPTH */
    ],
    [
      "]"
      /* RIGHT_BRACKET */
    ]: [
      1,
      3
      /* PUSH_SUB_PATH */
    ],
    [
      "o"
      /* END_OF_FAIL */
    ]: 8,
    [
      "l"
      /* ELSE */
    ]: [
      4,
      0
      /* APPEND */
    ]
  };
  pathStateMachine[
    5
    /* IN_SINGLE_QUOTE */
  ] = {
    [
      "'"
      /* SINGLE_QUOTE */
    ]: [
      4,
      0
      /* APPEND */
    ],
    [
      "o"
      /* END_OF_FAIL */
    ]: 8,
    [
      "l"
      /* ELSE */
    ]: [
      5,
      0
      /* APPEND */
    ]
  };
  pathStateMachine[
    6
    /* IN_DOUBLE_QUOTE */
  ] = {
    [
      '"'
      /* DOUBLE_QUOTE */
    ]: [
      4,
      0
      /* APPEND */
    ],
    [
      "o"
      /* END_OF_FAIL */
    ]: 8,
    [
      "l"
      /* ELSE */
    ]: [
      6,
      0
      /* APPEND */
    ]
  };
  const literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
  function isLiteral(exp) {
    return literalValueRE.test(exp);
  }
  function stripQuotes(str) {
    const a2 = str.charCodeAt(0);
    const b2 = str.charCodeAt(str.length - 1);
    return a2 === b2 && (a2 === 34 || a2 === 39) ? str.slice(1, -1) : str;
  }
  function getPathCharType(ch) {
    if (ch === void 0 || ch === null) {
      return "o";
    }
    const code = ch.charCodeAt(0);
    switch (code) {
      case 91:
      case 93:
      case 46:
      case 34:
      case 39:
        return ch;
      case 95:
      case 36:
      case 45:
        return "i";
      case 9:
      case 10:
      case 13:
      case 160:
      case 65279:
      case 8232:
      case 8233:
        return "w";
    }
    return "i";
  }
  function formatSubPath(path) {
    const trimmed = path.trim();
    if (path.charAt(0) === "0" && isNaN(parseInt(path))) {
      return false;
    }
    return isLiteral(trimmed) ? stripQuotes(trimmed) : "*" + trimmed;
  }
  function parse(path) {
    const keys2 = [];
    let index = -1;
    let mode = 0;
    let subPathDepth = 0;
    let c2;
    let key2;
    let newChar;
    let type2;
    let transition;
    let action;
    let typeMap;
    const actions = [];
    actions[
      0
      /* APPEND */
    ] = () => {
      if (key2 === void 0) {
        key2 = newChar;
      } else {
        key2 += newChar;
      }
    };
    actions[
      1
      /* PUSH */
    ] = () => {
      if (key2 !== void 0) {
        keys2.push(key2);
        key2 = void 0;
      }
    };
    actions[
      2
      /* INC_SUB_PATH_DEPTH */
    ] = () => {
      actions[
        0
        /* APPEND */
      ]();
      subPathDepth++;
    };
    actions[
      3
      /* PUSH_SUB_PATH */
    ] = () => {
      if (subPathDepth > 0) {
        subPathDepth--;
        mode = 4;
        actions[
          0
          /* APPEND */
        ]();
      } else {
        subPathDepth = 0;
        if (key2 === void 0) {
          return false;
        }
        key2 = formatSubPath(key2);
        if (key2 === false) {
          return false;
        } else {
          actions[
            1
            /* PUSH */
          ]();
        }
      }
    };
    function maybeUnescapeQuote() {
      const nextChar = path[index + 1];
      if (mode === 5 && nextChar === "'" || mode === 6 && nextChar === '"') {
        index++;
        newChar = "\\" + nextChar;
        actions[
          0
          /* APPEND */
        ]();
        return true;
      }
    }
    while (mode !== null) {
      index++;
      c2 = path[index];
      if (c2 === "\\" && maybeUnescapeQuote()) {
        continue;
      }
      type2 = getPathCharType(c2);
      typeMap = pathStateMachine[mode];
      transition = typeMap[type2] || typeMap[
        "l"
        /* ELSE */
      ] || 8;
      if (transition === 8) {
        return;
      }
      mode = transition[0];
      if (transition[1] !== void 0) {
        action = actions[transition[1]];
        if (action) {
          newChar = c2;
          if (action() === false) {
            return;
          }
        }
      }
      if (mode === 7) {
        return keys2;
      }
    }
  }
  const cache = /* @__PURE__ */ new Map();
  function resolveValue(obj, path) {
    if (!isObject(obj)) {
      return null;
    }
    let hit = cache.get(path);
    if (!hit) {
      hit = parse(path);
      if (hit) {
        cache.set(path, hit);
      }
    }
    if (!hit) {
      return null;
    }
    const len2 = hit.length;
    let last = obj;
    let i2 = 0;
    while (i2 < len2) {
      const val = last[hit[i2]];
      if (val === void 0) {
        return null;
      }
      last = val;
      i2++;
    }
    return last;
  }
  function handleFlatJson(obj) {
    if (!isObject(obj)) {
      return obj;
    }
    for (const key2 in obj) {
      if (!hasOwn(obj, key2)) {
        continue;
      }
      if (!key2.includes(
        "."
        /* DOT */
      )) {
        if (isObject(obj[key2])) {
          handleFlatJson(obj[key2]);
        }
      } else {
        const subKeys = key2.split(
          "."
          /* DOT */
        );
        const lastIndex = subKeys.length - 1;
        let currentObj = obj;
        for (let i2 = 0; i2 < lastIndex; i2++) {
          if (!(subKeys[i2] in currentObj)) {
            currentObj[subKeys[i2]] = {};
          }
          currentObj = currentObj[subKeys[i2]];
        }
        currentObj[subKeys[lastIndex]] = obj[key2];
        delete obj[key2];
        if (isObject(currentObj[subKeys[lastIndex]])) {
          handleFlatJson(currentObj[subKeys[lastIndex]]);
        }
      }
    }
    return obj;
  }
  /*!
   * @intlify/runtime v9.1.9
   * (c) 2021 kazuya kawaguchi
   * Released under the MIT License.
   */
  const DEFAULT_MODIFIER = (str) => str;
  const DEFAULT_MESSAGE = (ctx) => "";
  const DEFAULT_MESSAGE_DATA_TYPE = "text";
  const DEFAULT_NORMALIZE = (values) => values.length === 0 ? "" : values.join("");
  const DEFAULT_INTERPOLATE = toDisplayString;
  function pluralDefault(choice, choicesLength) {
    choice = Math.abs(choice);
    if (choicesLength === 2) {
      return choice ? choice > 1 ? 1 : 0 : 1;
    }
    return choice ? Math.min(choice, 2) : 0;
  }
  function getPluralIndex(options2) {
    const index = isNumber(options2.pluralIndex) ? options2.pluralIndex : -1;
    return options2.named && (isNumber(options2.named.count) || isNumber(options2.named.n)) ? isNumber(options2.named.count) ? options2.named.count : isNumber(options2.named.n) ? options2.named.n : index : index;
  }
  function normalizeNamed(pluralIndex, props) {
    if (!props.count) {
      props.count = pluralIndex;
    }
    if (!props.n) {
      props.n = pluralIndex;
    }
  }
  function createMessageContext(options2 = {}) {
    const locale = options2.locale;
    const pluralIndex = getPluralIndex(options2);
    const pluralRule = isObject$1(options2.pluralRules) && isString(locale) && isFunction(options2.pluralRules[locale]) ? options2.pluralRules[locale] : pluralDefault;
    const orgPluralRule = isObject$1(options2.pluralRules) && isString(locale) && isFunction(options2.pluralRules[locale]) ? pluralDefault : void 0;
    const plural = (messages2) => messages2[pluralRule(pluralIndex, messages2.length, orgPluralRule)];
    const _list = options2.list || [];
    const list = (index) => _list[index];
    const _named = options2.named || {};
    isNumber(options2.pluralIndex) && normalizeNamed(pluralIndex, _named);
    const named = (key2) => _named[key2];
    function message2(key2) {
      const msg = isFunction(options2.messages) ? options2.messages(key2) : isObject$1(options2.messages) ? options2.messages[key2] : false;
      return !msg ? options2.parent ? options2.parent.message(key2) : DEFAULT_MESSAGE : msg;
    }
    const _modifier = (name2) => options2.modifiers ? options2.modifiers[name2] : DEFAULT_MODIFIER;
    const normalize = isPlainObject(options2.processor) && isFunction(options2.processor.normalize) ? options2.processor.normalize : DEFAULT_NORMALIZE;
    const interpolate = isPlainObject(options2.processor) && isFunction(options2.processor.interpolate) ? options2.processor.interpolate : DEFAULT_INTERPOLATE;
    const type2 = isPlainObject(options2.processor) && isString(options2.processor.type) ? options2.processor.type : DEFAULT_MESSAGE_DATA_TYPE;
    const ctx = {
      [
        "list"
        /* LIST */
      ]: list,
      [
        "named"
        /* NAMED */
      ]: named,
      [
        "plural"
        /* PLURAL */
      ]: plural,
      [
        "linked"
        /* LINKED */
      ]: (key2, modifier) => {
        const msg = message2(key2)(ctx);
        return isString(modifier) ? _modifier(modifier)(msg) : msg;
      },
      [
        "message"
        /* MESSAGE */
      ]: message2,
      [
        "type"
        /* TYPE */
      ]: type2,
      [
        "interpolate"
        /* INTERPOLATE */
      ]: interpolate,
      [
        "normalize"
        /* NORMALIZE */
      ]: normalize
    };
    return ctx;
  }
  /*!
   * @intlify/message-compiler v9.1.9
   * (c) 2021 kazuya kawaguchi
   * Released under the MIT License.
   */
  const errorMessages$2 = {
    // tokenizer error messages
    [
      0
      /* EXPECTED_TOKEN */
    ]: `Expected token: '{0}'`,
    [
      1
      /* INVALID_TOKEN_IN_PLACEHOLDER */
    ]: `Invalid token in placeholder: '{0}'`,
    [
      2
      /* UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER */
    ]: `Unterminated single quote in placeholder`,
    [
      3
      /* UNKNOWN_ESCAPE_SEQUENCE */
    ]: `Unknown escape sequence: \\{0}`,
    [
      4
      /* INVALID_UNICODE_ESCAPE_SEQUENCE */
    ]: `Invalid unicode escape sequence: {0}`,
    [
      5
      /* UNBALANCED_CLOSING_BRACE */
    ]: `Unbalanced closing brace`,
    [
      6
      /* UNTERMINATED_CLOSING_BRACE */
    ]: `Unterminated closing brace`,
    [
      7
      /* EMPTY_PLACEHOLDER */
    ]: `Empty placeholder`,
    [
      8
      /* NOT_ALLOW_NEST_PLACEHOLDER */
    ]: `Not allowed nest placeholder`,
    [
      9
      /* INVALID_LINKED_FORMAT */
    ]: `Invalid linked format`,
    // parser error messages
    [
      10
      /* MUST_HAVE_MESSAGES_IN_PLURAL */
    ]: `Plural must have messages`,
    [
      11
      /* UNEXPECTED_EMPTY_LINKED_MODIFIER */
    ]: `Unexpected empty linked modifier`,
    [
      12
      /* UNEXPECTED_EMPTY_LINKED_KEY */
    ]: `Unexpected empty linked key`,
    [
      13
      /* UNEXPECTED_LEXICAL_ANALYSIS */
    ]: `Unexpected lexical analysis in token: '{0}'`
  };
  function createCompileError(code, loc, options2 = {}) {
    const { domain, messages: messages2, args } = options2;
    const msg = format((messages2 || errorMessages$2)[code] || "", ...args || []);
    const error2 = new SyntaxError(String(msg));
    error2.code = code;
    error2.domain = domain;
    return error2;
  }
  /*!
   * @intlify/devtools-if v9.1.9
   * (c) 2021 kazuya kawaguchi
   * Released under the MIT License.
   */
  const IntlifyDevToolsHooks = {
    I18nInit: "i18n:init",
    FunctionTranslate: "function:translate"
  };
  /*!
  * @intlify/core-base v9.1.9
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */
  let devtools = null;
  function setDevToolsHook(hook) {
    devtools = hook;
  }
  function initI18nDevTools(i18n2, version2, meta) {
    devtools && devtools.emit(IntlifyDevToolsHooks.I18nInit, {
      timestamp: Date.now(),
      i18n: i18n2,
      version: version2,
      meta
    });
  }
  const translateDevTools = /* @__PURE__ */ createDevToolsHook(IntlifyDevToolsHooks.FunctionTranslate);
  function createDevToolsHook(hook) {
    return (payloads) => devtools && devtools.emit(hook, payloads);
  }
  const warnMessages$1 = {
    [
      0
      /* NOT_FOUND_KEY */
    ]: `Not found '{key}' key in '{locale}' locale messages.`,
    [
      1
      /* FALLBACK_TO_TRANSLATE */
    ]: `Fall back to translate '{key}' key with '{target}' locale.`,
    [
      2
      /* CANNOT_FORMAT_NUMBER */
    ]: `Cannot format a number value due to not supported Intl.NumberFormat.`,
    [
      3
      /* FALLBACK_TO_NUMBER_FORMAT */
    ]: `Fall back to number format '{key}' key with '{target}' locale.`,
    [
      4
      /* CANNOT_FORMAT_DATE */
    ]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,
    [
      5
      /* FALLBACK_TO_DATE_FORMAT */
    ]: `Fall back to datetime format '{key}' key with '{target}' locale.`
  };
  function getWarnMessage$1(code, ...args) {
    return format(warnMessages$1[code], ...args);
  }
  const VERSION$1 = "9.1.9";
  const NOT_REOSLVED = -1;
  const MISSING_RESOLVE_VALUE = "";
  function getDefaultLinkedModifiers() {
    return {
      upper: (val) => isString(val) ? val.toUpperCase() : val,
      lower: (val) => isString(val) ? val.toLowerCase() : val,
      // prettier-ignore
      capitalize: (val) => isString(val) ? `${val.charAt(0).toLocaleUpperCase()}${val.substr(1)}` : val
    };
  }
  let _compiler;
  let _additionalMeta = null;
  const setAdditionalMeta = (meta) => {
    _additionalMeta = meta;
  };
  const getAdditionalMeta = () => _additionalMeta;
  let _cid = 0;
  function createCoreContext(options2 = {}) {
    const version2 = isString(options2.version) ? options2.version : VERSION$1;
    const locale = isString(options2.locale) ? options2.locale : "en-US";
    const fallbackLocale = isArray(options2.fallbackLocale) || isPlainObject(options2.fallbackLocale) || isString(options2.fallbackLocale) || options2.fallbackLocale === false ? options2.fallbackLocale : locale;
    const messages2 = isPlainObject(options2.messages) ? options2.messages : { [locale]: {} };
    const datetimeFormats = isPlainObject(options2.datetimeFormats) ? options2.datetimeFormats : { [locale]: {} };
    const numberFormats = isPlainObject(options2.numberFormats) ? options2.numberFormats : { [locale]: {} };
    const modifiers = assign({}, options2.modifiers || {}, getDefaultLinkedModifiers());
    const pluralRules = options2.pluralRules || {};
    const missing = isFunction(options2.missing) ? options2.missing : null;
    const missingWarn = isBoolean(options2.missingWarn) || isRegExp(options2.missingWarn) ? options2.missingWarn : true;
    const fallbackWarn = isBoolean(options2.fallbackWarn) || isRegExp(options2.fallbackWarn) ? options2.fallbackWarn : true;
    const fallbackFormat = !!options2.fallbackFormat;
    const unresolving = !!options2.unresolving;
    const postTranslation = isFunction(options2.postTranslation) ? options2.postTranslation : null;
    const processor = isPlainObject(options2.processor) ? options2.processor : null;
    const warnHtmlMessage = isBoolean(options2.warnHtmlMessage) ? options2.warnHtmlMessage : true;
    const escapeParameter = !!options2.escapeParameter;
    const messageCompiler = isFunction(options2.messageCompiler) ? options2.messageCompiler : _compiler;
    const onWarn = isFunction(options2.onWarn) ? options2.onWarn : warn;
    const internalOptions = options2;
    const __datetimeFormatters = isObject$1(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();
    const __numberFormatters = isObject$1(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();
    const __meta = isObject$1(internalOptions.__meta) ? internalOptions.__meta : {};
    _cid++;
    const context = {
      version: version2,
      cid: _cid,
      locale,
      fallbackLocale,
      messages: messages2,
      datetimeFormats,
      numberFormats,
      modifiers,
      pluralRules,
      missing,
      missingWarn,
      fallbackWarn,
      fallbackFormat,
      unresolving,
      postTranslation,
      processor,
      warnHtmlMessage,
      escapeParameter,
      messageCompiler,
      onWarn,
      __datetimeFormatters,
      __numberFormatters,
      __meta
    };
    {
      context.__v_emitter = internalOptions.__v_emitter != null ? internalOptions.__v_emitter : void 0;
    }
    {
      initI18nDevTools(context, version2, __meta);
    }
    return context;
  }
  function isTranslateFallbackWarn(fallback, key2) {
    return fallback instanceof RegExp ? fallback.test(key2) : fallback;
  }
  function isTranslateMissingWarn(missing, key2) {
    return missing instanceof RegExp ? missing.test(key2) : missing;
  }
  function handleMissing(context, key2, locale, missingWarn, type2) {
    const { missing, onWarn } = context;
    {
      const emitter = context.__v_emitter;
      if (emitter) {
        emitter.emit("missing", {
          locale,
          key: key2,
          type: type2,
          groupId: `${type2}:${key2}`
        });
      }
    }
    if (missing !== null) {
      const ret = missing(context, locale, key2, type2);
      return isString(ret) ? ret : key2;
    } else {
      if (isTranslateMissingWarn(missingWarn, key2)) {
        onWarn(getWarnMessage$1(0, { key: key2, locale }));
      }
      return key2;
    }
  }
  function getLocaleChain(ctx, fallback, start) {
    const context = ctx;
    if (!context.__localeChainCache) {
      context.__localeChainCache = /* @__PURE__ */ new Map();
    }
    let chain = context.__localeChainCache.get(start);
    if (!chain) {
      chain = [];
      let block = [start];
      while (isArray(block)) {
        block = appendBlockToChain(chain, block, fallback);
      }
      const defaults = isArray(fallback) ? fallback : isPlainObject(fallback) ? fallback["default"] ? fallback["default"] : null : fallback;
      block = isString(defaults) ? [defaults] : defaults;
      if (isArray(block)) {
        appendBlockToChain(chain, block, false);
      }
      context.__localeChainCache.set(start, chain);
    }
    return chain;
  }
  function appendBlockToChain(chain, block, blocks) {
    let follow = true;
    for (let i2 = 0; i2 < block.length && isBoolean(follow); i2++) {
      const locale = block[i2];
      if (isString(locale)) {
        follow = appendLocaleToChain(chain, block[i2], blocks);
      }
    }
    return follow;
  }
  function appendLocaleToChain(chain, locale, blocks) {
    let follow;
    const tokens = locale.split("-");
    do {
      const target = tokens.join("-");
      follow = appendItemToChain(chain, target, blocks);
      tokens.splice(-1, 1);
    } while (tokens.length && follow === true);
    return follow;
  }
  function appendItemToChain(chain, target, blocks) {
    let follow = false;
    if (!chain.includes(target)) {
      follow = true;
      if (target) {
        follow = target[target.length - 1] !== "!";
        const locale = target.replace(/!/g, "");
        chain.push(locale);
        if ((isArray(blocks) || isPlainObject(blocks)) && blocks[locale]) {
          follow = blocks[locale];
        }
      }
    }
    return follow;
  }
  function updateFallbackLocale(ctx, locale, fallback) {
    const context = ctx;
    context.__localeChainCache = /* @__PURE__ */ new Map();
    getLocaleChain(ctx, fallback, locale);
  }
  function createCoreError(code) {
    return createCompileError(code, null, { messages: errorMessages$1 });
  }
  const errorMessages$1 = {
    [
      14
      /* INVALID_ARGUMENT */
    ]: "Invalid arguments",
    [
      15
      /* INVALID_DATE_ARGUMENT */
    ]: "The date provided is an invalid Date object.Make sure your Date represents a valid date.",
    [
      16
      /* INVALID_ISO_DATE_ARGUMENT */
    ]: "The argument provided is not a valid ISO date string"
  };
  const NOOP_MESSAGE_FUNCTION = () => "";
  const isMessageFunction = (val) => isFunction(val);
  function translate(context, ...args) {
    const { fallbackFormat, postTranslation, unresolving, fallbackLocale, messages: messages2 } = context;
    const [key2, options2] = parseTranslateArgs(...args);
    const missingWarn = isBoolean(options2.missingWarn) ? options2.missingWarn : context.missingWarn;
    const fallbackWarn = isBoolean(options2.fallbackWarn) ? options2.fallbackWarn : context.fallbackWarn;
    const escapeParameter = isBoolean(options2.escapeParameter) ? options2.escapeParameter : context.escapeParameter;
    const resolvedMessage = !!options2.resolvedMessage;
    const defaultMsgOrKey = isString(options2.default) || isBoolean(options2.default) ? !isBoolean(options2.default) ? options2.default : key2 : fallbackFormat ? key2 : "";
    const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== "";
    const locale = isString(options2.locale) ? options2.locale : context.locale;
    escapeParameter && escapeParams(options2);
    let [format2, targetLocale, message2] = !resolvedMessage ? resolveMessageFormat(context, key2, locale, fallbackLocale, fallbackWarn, missingWarn) : [
      key2,
      locale,
      messages2[locale] || {}
    ];
    let cacheBaseKey = key2;
    if (!resolvedMessage && !(isString(format2) || isMessageFunction(format2))) {
      if (enableDefaultMsg) {
        format2 = defaultMsgOrKey;
        cacheBaseKey = format2;
      }
    }
    if (!resolvedMessage && (!(isString(format2) || isMessageFunction(format2)) || !isString(targetLocale))) {
      return unresolving ? NOT_REOSLVED : key2;
    }
    if (isString(format2) && context.messageCompiler == null) {
      warn(`The message format compilation is not supported in this build. Because message compiler isn't included. You need to pre-compilation all message format. So translate function return '${key2}'.`);
      return key2;
    }
    let occurred = false;
    const errorDetector = () => {
      occurred = true;
    };
    const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key2, targetLocale, format2, cacheBaseKey, errorDetector) : format2;
    if (occurred) {
      return format2;
    }
    const ctxOptions = getMessageContextOptions(context, targetLocale, message2, options2);
    const msgContext = createMessageContext(ctxOptions);
    const messaged = evaluateMessage(context, msg, msgContext);
    const ret = postTranslation ? postTranslation(messaged) : messaged;
    {
      const payloads = {
        timestamp: Date.now(),
        key: isString(key2) ? key2 : isMessageFunction(format2) ? format2.key : "",
        locale: targetLocale || (isMessageFunction(format2) ? format2.locale : ""),
        format: isString(format2) ? format2 : isMessageFunction(format2) ? format2.source : "",
        message: ret
      };
      payloads.meta = assign({}, context.__meta, getAdditionalMeta() || {});
      translateDevTools(payloads);
    }
    return ret;
  }
  function escapeParams(options2) {
    if (isArray(options2.list)) {
      options2.list = options2.list.map((item) => isString(item) ? escapeHtml(item) : item);
    } else if (isObject$1(options2.named)) {
      Object.keys(options2.named).forEach((key2) => {
        if (isString(options2.named[key2])) {
          options2.named[key2] = escapeHtml(options2.named[key2]);
        }
      });
    }
  }
  function resolveMessageFormat(context, key2, locale, fallbackLocale, fallbackWarn, missingWarn) {
    const { messages: messages2, onWarn } = context;
    const locales = getLocaleChain(context, fallbackLocale, locale);
    let message2 = {};
    let targetLocale;
    let format2 = null;
    let from = locale;
    let to = null;
    const type2 = "translate";
    for (let i2 = 0; i2 < locales.length; i2++) {
      targetLocale = to = locales[i2];
      if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key2)) {
        onWarn(getWarnMessage$1(1, {
          key: key2,
          target: targetLocale
        }));
      }
      if (locale !== targetLocale) {
        const emitter = context.__v_emitter;
        if (emitter) {
          emitter.emit("fallback", {
            type: type2,
            key: key2,
            from,
            to,
            groupId: `${type2}:${key2}`
          });
        }
      }
      message2 = messages2[targetLocale] || {};
      let start = null;
      let startTag;
      let endTag;
      if (inBrowser) {
        start = window.performance.now();
        startTag = "intlify-message-resolve-start";
        endTag = "intlify-message-resolve-end";
        mark && mark(startTag);
      }
      if ((format2 = resolveValue(message2, key2)) === null) {
        format2 = message2[key2];
      }
      if (inBrowser) {
        const end = window.performance.now();
        const emitter = context.__v_emitter;
        if (emitter && start && format2) {
          emitter.emit("message-resolve", {
            type: "message-resolve",
            key: key2,
            message: format2,
            time: end - start,
            groupId: `${type2}:${key2}`
          });
        }
        if (startTag && endTag && mark && measure) {
          mark(endTag);
          measure("intlify message resolve", startTag, endTag);
        }
      }
      if (isString(format2) || isFunction(format2))
        break;
      const missingRet = handleMissing(context, key2, targetLocale, missingWarn, type2);
      if (missingRet !== key2) {
        format2 = missingRet;
      }
      from = to;
    }
    return [format2, targetLocale, message2];
  }
  function compileMessageFormat(context, key2, targetLocale, format2, cacheBaseKey, errorDetector) {
    const { messageCompiler, warnHtmlMessage } = context;
    if (isMessageFunction(format2)) {
      const msg2 = format2;
      msg2.locale = msg2.locale || targetLocale;
      msg2.key = msg2.key || key2;
      return msg2;
    }
    let start = null;
    let startTag;
    let endTag;
    if (inBrowser) {
      start = window.performance.now();
      startTag = "intlify-message-compilation-start";
      endTag = "intlify-message-compilation-end";
      mark && mark(startTag);
    }
    const msg = messageCompiler(format2, getCompileOptions(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, errorDetector));
    if (inBrowser) {
      const end = window.performance.now();
      const emitter = context.__v_emitter;
      if (emitter && start) {
        emitter.emit("message-compilation", {
          type: "message-compilation",
          message: format2,
          time: end - start,
          groupId: `${"translate"}:${key2}`
        });
      }
      if (startTag && endTag && mark && measure) {
        mark(endTag);
        measure("intlify message compilation", startTag, endTag);
      }
    }
    msg.locale = targetLocale;
    msg.key = key2;
    msg.source = format2;
    return msg;
  }
  function evaluateMessage(context, msg, msgCtx) {
    let start = null;
    let startTag;
    let endTag;
    if (inBrowser) {
      start = window.performance.now();
      startTag = "intlify-message-evaluation-start";
      endTag = "intlify-message-evaluation-end";
      mark && mark(startTag);
    }
    const messaged = msg(msgCtx);
    if (inBrowser) {
      const end = window.performance.now();
      const emitter = context.__v_emitter;
      if (emitter && start) {
        emitter.emit("message-evaluation", {
          type: "message-evaluation",
          value: messaged,
          time: end - start,
          groupId: `${"translate"}:${msg.key}`
        });
      }
      if (startTag && endTag && mark && measure) {
        mark(endTag);
        measure("intlify message evaluation", startTag, endTag);
      }
    }
    return messaged;
  }
  function parseTranslateArgs(...args) {
    const [arg1, arg2, arg3] = args;
    const options2 = {};
    if (!isString(arg1) && !isNumber(arg1) && !isMessageFunction(arg1)) {
      throw createCoreError(
        14
        /* INVALID_ARGUMENT */
      );
    }
    const key2 = isNumber(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;
    if (isNumber(arg2)) {
      options2.plural = arg2;
    } else if (isString(arg2)) {
      options2.default = arg2;
    } else if (isPlainObject(arg2) && !isEmptyObject(arg2)) {
      options2.named = arg2;
    } else if (isArray(arg2)) {
      options2.list = arg2;
    }
    if (isNumber(arg3)) {
      options2.plural = arg3;
    } else if (isString(arg3)) {
      options2.default = arg3;
    } else if (isPlainObject(arg3)) {
      assign(options2, arg3);
    }
    return [key2, options2];
  }
  function getCompileOptions(context, locale, key2, source, warnHtmlMessage, errorDetector) {
    return {
      warnHtmlMessage,
      onError: (err) => {
        errorDetector && errorDetector(err);
        {
          const message2 = `Message compilation error: ${err.message}`;
          const codeFrame = err.location && generateCodeFrame(source, err.location.start.offset, err.location.end.offset);
          const emitter = context.__v_emitter;
          if (emitter) {
            emitter.emit("compile-error", {
              message: source,
              error: err.message,
              start: err.location && err.location.start.offset,
              end: err.location && err.location.end.offset,
              groupId: `${"translate"}:${key2}`
            });
          }
          console.error(codeFrame ? `${message2}
${codeFrame}` : message2);
        }
      },
      onCacheKey: (source2) => generateFormatCacheKey(locale, key2, source2)
    };
  }
  function getMessageContextOptions(context, locale, message2, options2) {
    const { modifiers, pluralRules } = context;
    const resolveMessage = (key2) => {
      const val = resolveValue(message2, key2);
      if (isString(val)) {
        let occurred = false;
        const errorDetector = () => {
          occurred = true;
        };
        const msg = compileMessageFormat(context, key2, locale, val, key2, errorDetector);
        return !occurred ? msg : NOOP_MESSAGE_FUNCTION;
      } else if (isMessageFunction(val)) {
        return val;
      } else {
        return NOOP_MESSAGE_FUNCTION;
      }
    };
    const ctxOptions = {
      locale,
      modifiers,
      pluralRules,
      messages: resolveMessage
    };
    if (context.processor) {
      ctxOptions.processor = context.processor;
    }
    if (options2.list) {
      ctxOptions.list = options2.list;
    }
    if (options2.named) {
      ctxOptions.named = options2.named;
    }
    if (isNumber(options2.plural)) {
      ctxOptions.pluralIndex = options2.plural;
    }
    return ctxOptions;
  }
  const intlDefined = typeof Intl !== "undefined";
  const Availabilities = {
    dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== "undefined",
    numberFormat: intlDefined && typeof Intl.NumberFormat !== "undefined"
  };
  function datetime(context, ...args) {
    const { datetimeFormats, unresolving, fallbackLocale, onWarn } = context;
    const { __datetimeFormatters } = context;
    if (!Availabilities.dateTimeFormat) {
      onWarn(getWarnMessage$1(
        4
        /* CANNOT_FORMAT_DATE */
      ));
      return MISSING_RESOLVE_VALUE;
    }
    const [key2, value, options2, overrides] = parseDateTimeArgs(...args);
    const missingWarn = isBoolean(options2.missingWarn) ? options2.missingWarn : context.missingWarn;
    const fallbackWarn = isBoolean(options2.fallbackWarn) ? options2.fallbackWarn : context.fallbackWarn;
    const part = !!options2.part;
    const locale = isString(options2.locale) ? options2.locale : context.locale;
    const locales = getLocaleChain(context, fallbackLocale, locale);
    if (!isString(key2) || key2 === "") {
      return new Intl.DateTimeFormat(locale).format(value);
    }
    let datetimeFormat = {};
    let targetLocale;
    let format2 = null;
    let from = locale;
    let to = null;
    const type2 = "datetime format";
    for (let i2 = 0; i2 < locales.length; i2++) {
      targetLocale = to = locales[i2];
      if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key2)) {
        onWarn(getWarnMessage$1(5, {
          key: key2,
          target: targetLocale
        }));
      }
      if (locale !== targetLocale) {
        const emitter = context.__v_emitter;
        if (emitter) {
          emitter.emit("fallback", {
            type: type2,
            key: key2,
            from,
            to,
            groupId: `${type2}:${key2}`
          });
        }
      }
      datetimeFormat = datetimeFormats[targetLocale] || {};
      format2 = datetimeFormat[key2];
      if (isPlainObject(format2))
        break;
      handleMissing(context, key2, targetLocale, missingWarn, type2);
      from = to;
    }
    if (!isPlainObject(format2) || !isString(targetLocale)) {
      return unresolving ? NOT_REOSLVED : key2;
    }
    let id2 = `${targetLocale}__${key2}`;
    if (!isEmptyObject(overrides)) {
      id2 = `${id2}__${JSON.stringify(overrides)}`;
    }
    let formatter = __datetimeFormatters.get(id2);
    if (!formatter) {
      formatter = new Intl.DateTimeFormat(targetLocale, assign({}, format2, overrides));
      __datetimeFormatters.set(id2, formatter);
    }
    return !part ? formatter.format(value) : formatter.formatToParts(value);
  }
  function parseDateTimeArgs(...args) {
    const [arg1, arg2, arg3, arg4] = args;
    let options2 = {};
    let overrides = {};
    let value;
    if (isString(arg1)) {
      if (!/\d{4}-\d{2}-\d{2}(T.*)?/.test(arg1)) {
        throw createCoreError(
          16
          /* INVALID_ISO_DATE_ARGUMENT */
        );
      }
      value = new Date(arg1);
      try {
        value.toISOString();
      } catch (e2) {
        throw createCoreError(
          16
          /* INVALID_ISO_DATE_ARGUMENT */
        );
      }
    } else if (isDate(arg1)) {
      if (isNaN(arg1.getTime())) {
        throw createCoreError(
          15
          /* INVALID_DATE_ARGUMENT */
        );
      }
      value = arg1;
    } else if (isNumber(arg1)) {
      value = arg1;
    } else {
      throw createCoreError(
        14
        /* INVALID_ARGUMENT */
      );
    }
    if (isString(arg2)) {
      options2.key = arg2;
    } else if (isPlainObject(arg2)) {
      options2 = arg2;
    }
    if (isString(arg3)) {
      options2.locale = arg3;
    } else if (isPlainObject(arg3)) {
      overrides = arg3;
    }
    if (isPlainObject(arg4)) {
      overrides = arg4;
    }
    return [options2.key || "", value, options2, overrides];
  }
  function clearDateTimeFormat(ctx, locale, format2) {
    const context = ctx;
    for (const key2 in format2) {
      const id2 = `${locale}__${key2}`;
      if (!context.__datetimeFormatters.has(id2)) {
        continue;
      }
      context.__datetimeFormatters.delete(id2);
    }
  }
  function number(context, ...args) {
    const { numberFormats, unresolving, fallbackLocale, onWarn } = context;
    const { __numberFormatters } = context;
    if (!Availabilities.numberFormat) {
      onWarn(getWarnMessage$1(
        2
        /* CANNOT_FORMAT_NUMBER */
      ));
      return MISSING_RESOLVE_VALUE;
    }
    const [key2, value, options2, overrides] = parseNumberArgs(...args);
    const missingWarn = isBoolean(options2.missingWarn) ? options2.missingWarn : context.missingWarn;
    const fallbackWarn = isBoolean(options2.fallbackWarn) ? options2.fallbackWarn : context.fallbackWarn;
    const part = !!options2.part;
    const locale = isString(options2.locale) ? options2.locale : context.locale;
    const locales = getLocaleChain(context, fallbackLocale, locale);
    if (!isString(key2) || key2 === "") {
      return new Intl.NumberFormat(locale).format(value);
    }
    let numberFormat = {};
    let targetLocale;
    let format2 = null;
    let from = locale;
    let to = null;
    const type2 = "number format";
    for (let i2 = 0; i2 < locales.length; i2++) {
      targetLocale = to = locales[i2];
      if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key2)) {
        onWarn(getWarnMessage$1(3, {
          key: key2,
          target: targetLocale
        }));
      }
      if (locale !== targetLocale) {
        const emitter = context.__v_emitter;
        if (emitter) {
          emitter.emit("fallback", {
            type: type2,
            key: key2,
            from,
            to,
            groupId: `${type2}:${key2}`
          });
        }
      }
      numberFormat = numberFormats[targetLocale] || {};
      format2 = numberFormat[key2];
      if (isPlainObject(format2))
        break;
      handleMissing(context, key2, targetLocale, missingWarn, type2);
      from = to;
    }
    if (!isPlainObject(format2) || !isString(targetLocale)) {
      return unresolving ? NOT_REOSLVED : key2;
    }
    let id2 = `${targetLocale}__${key2}`;
    if (!isEmptyObject(overrides)) {
      id2 = `${id2}__${JSON.stringify(overrides)}`;
    }
    let formatter = __numberFormatters.get(id2);
    if (!formatter) {
      formatter = new Intl.NumberFormat(targetLocale, assign({}, format2, overrides));
      __numberFormatters.set(id2, formatter);
    }
    return !part ? formatter.format(value) : formatter.formatToParts(value);
  }
  function parseNumberArgs(...args) {
    const [arg1, arg2, arg3, arg4] = args;
    let options2 = {};
    let overrides = {};
    if (!isNumber(arg1)) {
      throw createCoreError(
        14
        /* INVALID_ARGUMENT */
      );
    }
    const value = arg1;
    if (isString(arg2)) {
      options2.key = arg2;
    } else if (isPlainObject(arg2)) {
      options2 = arg2;
    }
    if (isString(arg3)) {
      options2.locale = arg3;
    } else if (isPlainObject(arg3)) {
      overrides = arg3;
    }
    if (isPlainObject(arg4)) {
      overrides = arg4;
    }
    return [options2.key || "", value, options2, overrides];
  }
  function clearNumberFormat(ctx, locale, format2) {
    const context = ctx;
    for (const key2 in format2) {
      const id2 = `${locale}__${key2}`;
      if (!context.__numberFormatters.has(id2)) {
        continue;
      }
      context.__numberFormatters.delete(id2);
    }
  }
  /*!
   * @intlify/vue-devtools v9.1.9
   * (c) 2021 kazuya kawaguchi
   * Released under the MIT License.
   */
  const VueDevToolsLabels = {
    [
      "vue-devtools-plugin-vue-i18n"
      /* PLUGIN */
    ]: "Vue I18n devtools",
    [
      "vue-i18n-resource-inspector"
      /* CUSTOM_INSPECTOR */
    ]: "I18n Resources",
    [
      "vue-i18n-timeline"
      /* TIMELINE */
    ]: "Vue I18n"
  };
  const VueDevToolsPlaceholders = {
    [
      "vue-i18n-resource-inspector"
      /* CUSTOM_INSPECTOR */
    ]: "Search for scopes ..."
  };
  const VueDevToolsTimelineColors = {
    [
      "vue-i18n-timeline"
      /* TIMELINE */
    ]: 16764185
  };
  /*!
  * vue-i18n v9.1.9
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
  const VERSION = "9.1.9";
  function initFeatureFlags() {
    let needWarn = false;
    {
      needWarn = true;
    }
    if (needWarn) {
      console.warn(`You are running the esm-bundler build of vue-i18n. It is recommended to configure your bundler to explicitly replace feature flag globals with boolean literals to get proper tree-shaking in the final bundle.`);
    }
  }
  const warnMessages = {
    [
      6
      /* FALLBACK_TO_ROOT */
    ]: `Fall back to {type} '{key}' with root locale.`,
    [
      7
      /* NOT_SUPPORTED_PRESERVE */
    ]: `Not supported 'preserve'.`,
    [
      8
      /* NOT_SUPPORTED_FORMATTER */
    ]: `Not supported 'formatter'.`,
    [
      9
      /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */
    ]: `Not supported 'preserveDirectiveContent'.`,
    [
      10
      /* NOT_SUPPORTED_GET_CHOICE_INDEX */
    ]: `Not supported 'getChoiceIndex'.`,
    [
      11
      /* COMPONENT_NAME_LEGACY_COMPATIBLE */
    ]: `Component name legacy compatible: '{name}' -> 'i18n'`,
    [
      12
      /* NOT_FOUND_PARENT_SCOPE */
    ]: `Not found parent scope. use the global scope.`
  };
  function getWarnMessage(code, ...args) {
    return format(warnMessages[code], ...args);
  }
  function createI18nError(code, ...args) {
    return createCompileError(code, null, { messages: errorMessages, args });
  }
  const errorMessages = {
    [
      14
      /* UNEXPECTED_RETURN_TYPE */
    ]: "Unexpected return type in composer",
    [
      15
      /* INVALID_ARGUMENT */
    ]: "Invalid argument",
    [
      16
      /* MUST_BE_CALL_SETUP_TOP */
    ]: "Must be called at the top of a `setup` function",
    [
      17
      /* NOT_INSLALLED */
    ]: "Need to install with `app.use` function",
    [
      22
      /* UNEXPECTED_ERROR */
    ]: "Unexpected error",
    [
      18
      /* NOT_AVAILABLE_IN_LEGACY_MODE */
    ]: "Not available in legacy mode",
    [
      19
      /* REQUIRED_VALUE */
    ]: `Required in value: {0}`,
    [
      20
      /* INVALID_VALUE */
    ]: `Invalid value`,
    [
      21
      /* CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN */
    ]: `Cannot setup vue-devtools plugin`
  };
  const DEVTOOLS_META = "__INTLIFY_META__";
  const TransrateVNodeSymbol = makeSymbol("__transrateVNode");
  const DatetimePartsSymbol = makeSymbol("__datetimeParts");
  const NumberPartsSymbol = makeSymbol("__numberParts");
  const EnableEmitter = makeSymbol("__enableEmitter");
  const DisableEmitter = makeSymbol("__disableEmitter");
  const SetPluralRulesSymbol = makeSymbol("__setPluralRules");
  const InejctWithOption = makeSymbol("__injectWithOption");
  let composerID = 0;
  function defineCoreMissingHandler(missing) {
    return (ctx, locale, key2, type2) => {
      return missing(locale, key2, vue$1.getCurrentInstance() || void 0, type2);
    };
  }
  function getLocaleMessages(locale, options2) {
    const { messages: messages2, __i18n } = options2;
    const ret = isPlainObject(messages2) ? messages2 : isArray(__i18n) ? {} : { [locale]: {} };
    if (isArray(__i18n)) {
      __i18n.forEach(({ locale: locale2, resource }) => {
        if (locale2) {
          ret[locale2] = ret[locale2] || {};
          deepCopy(resource, ret[locale2]);
        } else {
          deepCopy(resource, ret);
        }
      });
    }
    if (options2.flatJson) {
      for (const key2 in ret) {
        if (hasOwn$1(ret, key2)) {
          handleFlatJson(ret[key2]);
        }
      }
    }
    return ret;
  }
  const isNotObjectOrIsArray = (val) => !isObject$1(val) || isArray(val);
  function deepCopy(src, des) {
    if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {
      throw createI18nError(
        20
        /* INVALID_VALUE */
      );
    }
    for (const key2 in src) {
      if (hasOwn$1(src, key2)) {
        if (isNotObjectOrIsArray(src[key2]) || isNotObjectOrIsArray(des[key2])) {
          des[key2] = src[key2];
        } else {
          deepCopy(src[key2], des[key2]);
        }
      }
    }
  }
  const getMetaInfo = () => {
    const instance = vue$1.getCurrentInstance();
    return instance && instance.type[DEVTOOLS_META] ? { [DEVTOOLS_META]: instance.type[DEVTOOLS_META] } : null;
  };
  function createComposer(options2 = {}) {
    const { __root } = options2;
    const _isGlobal = __root === void 0;
    let _inheritLocale = isBoolean(options2.inheritLocale) ? options2.inheritLocale : true;
    const _locale = vue$1.ref(
      // prettier-ignore
      __root && _inheritLocale ? __root.locale.value : isString(options2.locale) ? options2.locale : "en-US"
    );
    const _fallbackLocale = vue$1.ref(
      // prettier-ignore
      __root && _inheritLocale ? __root.fallbackLocale.value : isString(options2.fallbackLocale) || isArray(options2.fallbackLocale) || isPlainObject(options2.fallbackLocale) || options2.fallbackLocale === false ? options2.fallbackLocale : _locale.value
    );
    const _messages = vue$1.ref(getLocaleMessages(_locale.value, options2));
    const _datetimeFormats = vue$1.ref(isPlainObject(options2.datetimeFormats) ? options2.datetimeFormats : { [_locale.value]: {} });
    const _numberFormats = vue$1.ref(isPlainObject(options2.numberFormats) ? options2.numberFormats : { [_locale.value]: {} });
    let _missingWarn = __root ? __root.missingWarn : isBoolean(options2.missingWarn) || isRegExp(options2.missingWarn) ? options2.missingWarn : true;
    let _fallbackWarn = __root ? __root.fallbackWarn : isBoolean(options2.fallbackWarn) || isRegExp(options2.fallbackWarn) ? options2.fallbackWarn : true;
    let _fallbackRoot = __root ? __root.fallbackRoot : isBoolean(options2.fallbackRoot) ? options2.fallbackRoot : true;
    let _fallbackFormat = !!options2.fallbackFormat;
    let _missing = isFunction(options2.missing) ? options2.missing : null;
    let _runtimeMissing = isFunction(options2.missing) ? defineCoreMissingHandler(options2.missing) : null;
    let _postTranslation = isFunction(options2.postTranslation) ? options2.postTranslation : null;
    let _warnHtmlMessage = isBoolean(options2.warnHtmlMessage) ? options2.warnHtmlMessage : true;
    let _escapeParameter = !!options2.escapeParameter;
    const _modifiers = __root ? __root.modifiers : isPlainObject(options2.modifiers) ? options2.modifiers : {};
    let _pluralRules = options2.pluralRules || __root && __root.pluralRules;
    let _context;
    function getCoreContext() {
      return createCoreContext({
        version: VERSION,
        locale: _locale.value,
        fallbackLocale: _fallbackLocale.value,
        messages: _messages.value,
        messageCompiler: function compileToFunction(source) {
          return (ctx) => {
            return ctx.normalize([source]);
          };
        },
        datetimeFormats: _datetimeFormats.value,
        numberFormats: _numberFormats.value,
        modifiers: _modifiers,
        pluralRules: _pluralRules,
        missing: _runtimeMissing === null ? void 0 : _runtimeMissing,
        missingWarn: _missingWarn,
        fallbackWarn: _fallbackWarn,
        fallbackFormat: _fallbackFormat,
        unresolving: true,
        postTranslation: _postTranslation === null ? void 0 : _postTranslation,
        warnHtmlMessage: _warnHtmlMessage,
        escapeParameter: _escapeParameter,
        __datetimeFormatters: isPlainObject(_context) ? _context.__datetimeFormatters : void 0,
        __numberFormatters: isPlainObject(_context) ? _context.__numberFormatters : void 0,
        __v_emitter: isPlainObject(_context) ? _context.__v_emitter : void 0,
        __meta: { framework: "vue" }
      });
    }
    _context = getCoreContext();
    updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
    function trackReactivityValues() {
      return [
        _locale.value,
        _fallbackLocale.value,
        _messages.value,
        _datetimeFormats.value,
        _numberFormats.value
      ];
    }
    const locale = vue$1.computed({
      get: () => _locale.value,
      set: (val) => {
        _locale.value = val;
        _context.locale = _locale.value;
      }
    });
    const fallbackLocale = vue$1.computed({
      get: () => _fallbackLocale.value,
      set: (val) => {
        _fallbackLocale.value = val;
        _context.fallbackLocale = _fallbackLocale.value;
        updateFallbackLocale(_context, _locale.value, val);
      }
    });
    const messages2 = vue$1.computed(() => _messages.value);
    const datetimeFormats = vue$1.computed(() => _datetimeFormats.value);
    const numberFormats = vue$1.computed(() => _numberFormats.value);
    function getPostTranslationHandler() {
      return isFunction(_postTranslation) ? _postTranslation : null;
    }
    function setPostTranslationHandler(handler) {
      _postTranslation = handler;
      _context.postTranslation = handler;
    }
    function getMissingHandler() {
      return _missing;
    }
    function setMissingHandler(handler) {
      if (handler !== null) {
        _runtimeMissing = defineCoreMissingHandler(handler);
      }
      _missing = handler;
      _context.missing = _runtimeMissing;
    }
    function isResolvedTranslateMessage(type2, arg) {
      return type2 !== "translate" || !!arg.resolvedMessage === false;
    }
    function wrapWithDeps(fn, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) {
      trackReactivityValues();
      let ret;
      {
        try {
          setAdditionalMeta(getMetaInfo());
          ret = fn(_context);
        } finally {
          setAdditionalMeta(null);
        }
      }
      if (isNumber(ret) && ret === NOT_REOSLVED) {
        const [key2, arg2] = argumentParser();
        if (__root && isString(key2) && isResolvedTranslateMessage(warnType, arg2)) {
          if (_fallbackRoot && (isTranslateFallbackWarn(_fallbackWarn, key2) || isTranslateMissingWarn(_missingWarn, key2))) {
            warn(getWarnMessage(6, {
              key: key2,
              type: warnType
            }));
          }
          {
            const { __v_emitter: emitter } = _context;
            if (emitter && _fallbackRoot) {
              emitter.emit("fallback", {
                type: warnType,
                key: key2,
                to: "global",
                groupId: `${warnType}:${key2}`
              });
            }
          }
        }
        return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key2);
      } else if (successCondition(ret)) {
        return ret;
      } else {
        throw createI18nError(
          14
          /* UNEXPECTED_RETURN_TYPE */
        );
      }
    }
    function t2(...args) {
      return wrapWithDeps((context) => translate(context, ...args), () => parseTranslateArgs(...args), "translate", (root2) => root2.t(...args), (key2) => key2, (val) => isString(val));
    }
    function rt2(...args) {
      const [arg1, arg2, arg3] = args;
      if (arg3 && !isObject$1(arg3)) {
        throw createI18nError(
          15
          /* INVALID_ARGUMENT */
        );
      }
      return t2(...[arg1, arg2, assign({ resolvedMessage: true }, arg3 || {})]);
    }
    function d2(...args) {
      return wrapWithDeps((context) => datetime(context, ...args), () => parseDateTimeArgs(...args), "datetime format", (root2) => root2.d(...args), () => MISSING_RESOLVE_VALUE, (val) => isString(val));
    }
    function n2(...args) {
      return wrapWithDeps((context) => number(context, ...args), () => parseNumberArgs(...args), "number format", (root2) => root2.n(...args), () => MISSING_RESOLVE_VALUE, (val) => isString(val));
    }
    function normalize(values) {
      return values.map((val) => isString(val) ? vue$1.createVNode(vue$1.Text, null, val, 0) : val);
    }
    const interpolate = (val) => val;
    const processor = {
      normalize,
      interpolate,
      type: "vnode"
    };
    function transrateVNode(...args) {
      return wrapWithDeps(
        (context) => {
          let ret;
          const _context2 = context;
          try {
            _context2.processor = processor;
            ret = translate(_context2, ...args);
          } finally {
            _context2.processor = null;
          }
          return ret;
        },
        () => parseTranslateArgs(...args),
        "translate",
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (root2) => root2[TransrateVNodeSymbol](...args),
        (key2) => [vue$1.createVNode(vue$1.Text, null, key2, 0)],
        (val) => isArray(val)
      );
    }
    function numberParts(...args) {
      return wrapWithDeps(
        (context) => number(context, ...args),
        () => parseNumberArgs(...args),
        "number format",
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (root2) => root2[NumberPartsSymbol](...args),
        () => [],
        (val) => isString(val) || isArray(val)
      );
    }
    function datetimeParts(...args) {
      return wrapWithDeps(
        (context) => datetime(context, ...args),
        () => parseDateTimeArgs(...args),
        "datetime format",
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (root2) => root2[DatetimePartsSymbol](...args),
        () => [],
        (val) => isString(val) || isArray(val)
      );
    }
    function setPluralRules(rules) {
      _pluralRules = rules;
      _context.pluralRules = _pluralRules;
    }
    function te2(key2, locale2) {
      const targetLocale = isString(locale2) ? locale2 : _locale.value;
      const message2 = getLocaleMessage(targetLocale);
      return resolveValue(message2, key2) !== null;
    }
    function resolveMessages(key2) {
      let messages22 = null;
      const locales = getLocaleChain(_context, _fallbackLocale.value, _locale.value);
      for (let i2 = 0; i2 < locales.length; i2++) {
        const targetLocaleMessages = _messages.value[locales[i2]] || {};
        const messageValue = resolveValue(targetLocaleMessages, key2);
        if (messageValue != null) {
          messages22 = messageValue;
          break;
        }
      }
      return messages22;
    }
    function tm(key2) {
      const messages22 = resolveMessages(key2);
      return messages22 != null ? messages22 : __root ? __root.tm(key2) || {} : {};
    }
    function getLocaleMessage(locale2) {
      return _messages.value[locale2] || {};
    }
    function setLocaleMessage(locale2, message2) {
      _messages.value[locale2] = message2;
      _context.messages = _messages.value;
    }
    function mergeLocaleMessage(locale2, message2) {
      _messages.value[locale2] = _messages.value[locale2] || {};
      deepCopy(message2, _messages.value[locale2]);
      _context.messages = _messages.value;
    }
    function getDateTimeFormat(locale2) {
      return _datetimeFormats.value[locale2] || {};
    }
    function setDateTimeFormat(locale2, format2) {
      _datetimeFormats.value[locale2] = format2;
      _context.datetimeFormats = _datetimeFormats.value;
      clearDateTimeFormat(_context, locale2, format2);
    }
    function mergeDateTimeFormat(locale2, format2) {
      _datetimeFormats.value[locale2] = assign(_datetimeFormats.value[locale2] || {}, format2);
      _context.datetimeFormats = _datetimeFormats.value;
      clearDateTimeFormat(_context, locale2, format2);
    }
    function getNumberFormat(locale2) {
      return _numberFormats.value[locale2] || {};
    }
    function setNumberFormat(locale2, format2) {
      _numberFormats.value[locale2] = format2;
      _context.numberFormats = _numberFormats.value;
      clearNumberFormat(_context, locale2, format2);
    }
    function mergeNumberFormat(locale2, format2) {
      _numberFormats.value[locale2] = assign(_numberFormats.value[locale2] || {}, format2);
      _context.numberFormats = _numberFormats.value;
      clearNumberFormat(_context, locale2, format2);
    }
    composerID++;
    if (__root) {
      vue$1.watch(__root.locale, (val) => {
        if (_inheritLocale) {
          _locale.value = val;
          _context.locale = val;
          updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
        }
      });
      vue$1.watch(__root.fallbackLocale, (val) => {
        if (_inheritLocale) {
          _fallbackLocale.value = val;
          _context.fallbackLocale = val;
          updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
        }
      });
    }
    const composer = {
      id: composerID,
      locale,
      fallbackLocale,
      get inheritLocale() {
        return _inheritLocale;
      },
      set inheritLocale(val) {
        _inheritLocale = val;
        if (val && __root) {
          _locale.value = __root.locale.value;
          _fallbackLocale.value = __root.fallbackLocale.value;
          updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
        }
      },
      get availableLocales() {
        return Object.keys(_messages.value).sort();
      },
      messages: messages2,
      datetimeFormats,
      numberFormats,
      get modifiers() {
        return _modifiers;
      },
      get pluralRules() {
        return _pluralRules || {};
      },
      get isGlobal() {
        return _isGlobal;
      },
      get missingWarn() {
        return _missingWarn;
      },
      set missingWarn(val) {
        _missingWarn = val;
        _context.missingWarn = _missingWarn;
      },
      get fallbackWarn() {
        return _fallbackWarn;
      },
      set fallbackWarn(val) {
        _fallbackWarn = val;
        _context.fallbackWarn = _fallbackWarn;
      },
      get fallbackRoot() {
        return _fallbackRoot;
      },
      set fallbackRoot(val) {
        _fallbackRoot = val;
      },
      get fallbackFormat() {
        return _fallbackFormat;
      },
      set fallbackFormat(val) {
        _fallbackFormat = val;
        _context.fallbackFormat = _fallbackFormat;
      },
      get warnHtmlMessage() {
        return _warnHtmlMessage;
      },
      set warnHtmlMessage(val) {
        _warnHtmlMessage = val;
        _context.warnHtmlMessage = val;
      },
      get escapeParameter() {
        return _escapeParameter;
      },
      set escapeParameter(val) {
        _escapeParameter = val;
        _context.escapeParameter = val;
      },
      t: t2,
      rt: rt2,
      d: d2,
      n: n2,
      te: te2,
      tm,
      getLocaleMessage,
      setLocaleMessage,
      mergeLocaleMessage,
      getDateTimeFormat,
      setDateTimeFormat,
      mergeDateTimeFormat,
      getNumberFormat,
      setNumberFormat,
      mergeNumberFormat,
      getPostTranslationHandler,
      setPostTranslationHandler,
      getMissingHandler,
      setMissingHandler,
      [TransrateVNodeSymbol]: transrateVNode,
      [NumberPartsSymbol]: numberParts,
      [DatetimePartsSymbol]: datetimeParts,
      [SetPluralRulesSymbol]: setPluralRules,
      [InejctWithOption]: options2.__injectWithOption
      // eslint-disable-line @typescript-eslint/no-explicit-any
    };
    {
      composer[EnableEmitter] = (emitter) => {
        _context.__v_emitter = emitter;
      };
      composer[DisableEmitter] = () => {
        _context.__v_emitter = void 0;
      };
    }
    return composer;
  }
  function convertComposerOptions(options2) {
    const locale = isString(options2.locale) ? options2.locale : "en-US";
    const fallbackLocale = isString(options2.fallbackLocale) || isArray(options2.fallbackLocale) || isPlainObject(options2.fallbackLocale) || options2.fallbackLocale === false ? options2.fallbackLocale : locale;
    const missing = isFunction(options2.missing) ? options2.missing : void 0;
    const missingWarn = isBoolean(options2.silentTranslationWarn) || isRegExp(options2.silentTranslationWarn) ? !options2.silentTranslationWarn : true;
    const fallbackWarn = isBoolean(options2.silentFallbackWarn) || isRegExp(options2.silentFallbackWarn) ? !options2.silentFallbackWarn : true;
    const fallbackRoot = isBoolean(options2.fallbackRoot) ? options2.fallbackRoot : true;
    const fallbackFormat = !!options2.formatFallbackMessages;
    const modifiers = isPlainObject(options2.modifiers) ? options2.modifiers : {};
    const pluralizationRules = options2.pluralizationRules;
    const postTranslation = isFunction(options2.postTranslation) ? options2.postTranslation : void 0;
    const warnHtmlMessage = isString(options2.warnHtmlInMessage) ? options2.warnHtmlInMessage !== "off" : true;
    const escapeParameter = !!options2.escapeParameterHtml;
    const inheritLocale = isBoolean(options2.sync) ? options2.sync : true;
    if (options2.formatter) {
      warn(getWarnMessage(
        8
        /* NOT_SUPPORTED_FORMATTER */
      ));
    }
    if (options2.preserveDirectiveContent) {
      warn(getWarnMessage(
        9
        /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */
      ));
    }
    let messages2 = options2.messages;
    if (isPlainObject(options2.sharedMessages)) {
      const sharedMessages = options2.sharedMessages;
      const locales = Object.keys(sharedMessages);
      messages2 = locales.reduce((messages22, locale2) => {
        const message2 = messages22[locale2] || (messages22[locale2] = {});
        assign(message2, sharedMessages[locale2]);
        return messages22;
      }, messages2 || {});
    }
    const { __i18n, __root, __injectWithOption } = options2;
    const datetimeFormats = options2.datetimeFormats;
    const numberFormats = options2.numberFormats;
    const flatJson = options2.flatJson;
    return {
      locale,
      fallbackLocale,
      messages: messages2,
      flatJson,
      datetimeFormats,
      numberFormats,
      missing,
      missingWarn,
      fallbackWarn,
      fallbackRoot,
      fallbackFormat,
      modifiers,
      pluralRules: pluralizationRules,
      postTranslation,
      warnHtmlMessage,
      escapeParameter,
      inheritLocale,
      __i18n,
      __root,
      __injectWithOption
    };
  }
  function createVueI18n(options2 = {}) {
    const composer = createComposer(convertComposerOptions(options2));
    const vueI18n = {
      // id
      id: composer.id,
      // locale
      get locale() {
        return composer.locale.value;
      },
      set locale(val) {
        composer.locale.value = val;
      },
      // fallbackLocale
      get fallbackLocale() {
        return composer.fallbackLocale.value;
      },
      set fallbackLocale(val) {
        composer.fallbackLocale.value = val;
      },
      // messages
      get messages() {
        return composer.messages.value;
      },
      // datetimeFormats
      get datetimeFormats() {
        return composer.datetimeFormats.value;
      },
      // numberFormats
      get numberFormats() {
        return composer.numberFormats.value;
      },
      // availableLocales
      get availableLocales() {
        return composer.availableLocales;
      },
      // formatter
      get formatter() {
        warn(getWarnMessage(
          8
          /* NOT_SUPPORTED_FORMATTER */
        ));
        return {
          interpolate() {
            return [];
          }
        };
      },
      set formatter(val) {
        warn(getWarnMessage(
          8
          /* NOT_SUPPORTED_FORMATTER */
        ));
      },
      // missing
      get missing() {
        return composer.getMissingHandler();
      },
      set missing(handler) {
        composer.setMissingHandler(handler);
      },
      // silentTranslationWarn
      get silentTranslationWarn() {
        return isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;
      },
      set silentTranslationWarn(val) {
        composer.missingWarn = isBoolean(val) ? !val : val;
      },
      // silentFallbackWarn
      get silentFallbackWarn() {
        return isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;
      },
      set silentFallbackWarn(val) {
        composer.fallbackWarn = isBoolean(val) ? !val : val;
      },
      // modifiers
      get modifiers() {
        return composer.modifiers;
      },
      // formatFallbackMessages
      get formatFallbackMessages() {
        return composer.fallbackFormat;
      },
      set formatFallbackMessages(val) {
        composer.fallbackFormat = val;
      },
      // postTranslation
      get postTranslation() {
        return composer.getPostTranslationHandler();
      },
      set postTranslation(handler) {
        composer.setPostTranslationHandler(handler);
      },
      // sync
      get sync() {
        return composer.inheritLocale;
      },
      set sync(val) {
        composer.inheritLocale = val;
      },
      // warnInHtmlMessage
      get warnHtmlInMessage() {
        return composer.warnHtmlMessage ? "warn" : "off";
      },
      set warnHtmlInMessage(val) {
        composer.warnHtmlMessage = val !== "off";
      },
      // escapeParameterHtml
      get escapeParameterHtml() {
        return composer.escapeParameter;
      },
      set escapeParameterHtml(val) {
        composer.escapeParameter = val;
      },
      // preserveDirectiveContent
      get preserveDirectiveContent() {
        warn(getWarnMessage(
          9
          /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */
        ));
        return true;
      },
      set preserveDirectiveContent(val) {
        warn(getWarnMessage(
          9
          /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */
        ));
      },
      // pluralizationRules
      get pluralizationRules() {
        return composer.pluralRules || {};
      },
      // for internal
      __composer: composer,
      // t
      t(...args) {
        const [arg1, arg2, arg3] = args;
        const options22 = {};
        let list = null;
        let named = null;
        if (!isString(arg1)) {
          throw createI18nError(
            15
            /* INVALID_ARGUMENT */
          );
        }
        const key2 = arg1;
        if (isString(arg2)) {
          options22.locale = arg2;
        } else if (isArray(arg2)) {
          list = arg2;
        } else if (isPlainObject(arg2)) {
          named = arg2;
        }
        if (isArray(arg3)) {
          list = arg3;
        } else if (isPlainObject(arg3)) {
          named = arg3;
        }
        return composer.t(key2, list || named || {}, options22);
      },
      rt(...args) {
        return composer.rt(...args);
      },
      // tc
      tc(...args) {
        const [arg1, arg2, arg3] = args;
        const options22 = { plural: 1 };
        let list = null;
        let named = null;
        if (!isString(arg1)) {
          throw createI18nError(
            15
            /* INVALID_ARGUMENT */
          );
        }
        const key2 = arg1;
        if (isString(arg2)) {
          options22.locale = arg2;
        } else if (isNumber(arg2)) {
          options22.plural = arg2;
        } else if (isArray(arg2)) {
          list = arg2;
        } else if (isPlainObject(arg2)) {
          named = arg2;
        }
        if (isString(arg3)) {
          options22.locale = arg3;
        } else if (isArray(arg3)) {
          list = arg3;
        } else if (isPlainObject(arg3)) {
          named = arg3;
        }
        return composer.t(key2, list || named || {}, options22);
      },
      // te
      te(key2, locale) {
        return composer.te(key2, locale);
      },
      // tm
      tm(key2) {
        return composer.tm(key2);
      },
      // getLocaleMessage
      getLocaleMessage(locale) {
        return composer.getLocaleMessage(locale);
      },
      // setLocaleMessage
      setLocaleMessage(locale, message2) {
        composer.setLocaleMessage(locale, message2);
      },
      // mergeLocaleMessage
      mergeLocaleMessage(locale, message2) {
        composer.mergeLocaleMessage(locale, message2);
      },
      // d
      d(...args) {
        return composer.d(...args);
      },
      // getDateTimeFormat
      getDateTimeFormat(locale) {
        return composer.getDateTimeFormat(locale);
      },
      // setDateTimeFormat
      setDateTimeFormat(locale, format2) {
        composer.setDateTimeFormat(locale, format2);
      },
      // mergeDateTimeFormat
      mergeDateTimeFormat(locale, format2) {
        composer.mergeDateTimeFormat(locale, format2);
      },
      // n
      n(...args) {
        return composer.n(...args);
      },
      // getNumberFormat
      getNumberFormat(locale) {
        return composer.getNumberFormat(locale);
      },
      // setNumberFormat
      setNumberFormat(locale, format2) {
        composer.setNumberFormat(locale, format2);
      },
      // mergeNumberFormat
      mergeNumberFormat(locale, format2) {
        composer.mergeNumberFormat(locale, format2);
      },
      // getChoiceIndex
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      getChoiceIndex(choice, choicesLength) {
        warn(getWarnMessage(
          10
          /* NOT_SUPPORTED_GET_CHOICE_INDEX */
        ));
        return -1;
      },
      // for internal
      __onComponentInstanceCreated(target) {
        const { componentInstanceCreatedListener } = options2;
        if (componentInstanceCreatedListener) {
          componentInstanceCreatedListener(target, vueI18n);
        }
      }
    };
    {
      vueI18n.__enableEmitter = (emitter) => {
        const __composer = composer;
        __composer[EnableEmitter] && __composer[EnableEmitter](emitter);
      };
      vueI18n.__disableEmitter = () => {
        const __composer = composer;
        __composer[DisableEmitter] && __composer[DisableEmitter]();
      };
    }
    return vueI18n;
  }
  const baseFormatProps = {
    tag: {
      type: [String, Object]
    },
    locale: {
      type: String
    },
    scope: {
      type: String,
      validator: (val) => val === "parent" || val === "global",
      default: "parent"
    },
    i18n: {
      type: Object
    }
  };
  const Translation = {
    /* eslint-disable */
    name: "i18n-t",
    props: assign({
      keypath: {
        type: String,
        required: true
      },
      plural: {
        type: [Number, String],
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        validator: (val) => isNumber(val) || !isNaN(val)
      }
    }, baseFormatProps),
    /* eslint-enable */
    setup(props, context) {
      const { slots, attrs } = context;
      const i18n2 = props.i18n || useI18n({
        useScope: props.scope,
        __useComponent: true
      });
      const keys2 = Object.keys(slots).filter((key2) => key2 !== "_");
      return () => {
        const options2 = {};
        if (props.locale) {
          options2.locale = props.locale;
        }
        if (props.plural !== void 0) {
          options2.plural = isString(props.plural) ? +props.plural : props.plural;
        }
        const arg = getInterpolateArg(context, keys2);
        const children = i18n2[TransrateVNodeSymbol](props.keypath, arg, options2);
        const assignedAttrs = assign({}, attrs);
        return isString(props.tag) ? vue$1.h(props.tag, assignedAttrs, children) : isObject$1(props.tag) ? vue$1.h(props.tag, assignedAttrs, children) : vue$1.h(vue$1.Fragment, assignedAttrs, children);
      };
    }
  };
  function getInterpolateArg({ slots }, keys2) {
    if (keys2.length === 1 && keys2[0] === "default") {
      return slots.default ? slots.default() : [];
    } else {
      return keys2.reduce((arg, key2) => {
        const slot = slots[key2];
        if (slot) {
          arg[key2] = slot();
        }
        return arg;
      }, {});
    }
  }
  function renderFormatter(props, context, slotKeys, partFormatter) {
    const { slots, attrs } = context;
    return () => {
      const options2 = { part: true };
      let overrides = {};
      if (props.locale) {
        options2.locale = props.locale;
      }
      if (isString(props.format)) {
        options2.key = props.format;
      } else if (isObject$1(props.format)) {
        if (isString(props.format.key)) {
          options2.key = props.format.key;
        }
        overrides = Object.keys(props.format).reduce((options22, prop) => {
          return slotKeys.includes(prop) ? assign({}, options22, { [prop]: props.format[prop] }) : options22;
        }, {});
      }
      const parts = partFormatter(...[props.value, options2, overrides]);
      let children = [options2.key];
      if (isArray(parts)) {
        children = parts.map((part, index) => {
          const slot = slots[part.type];
          return slot ? slot({ [part.type]: part.value, index, parts }) : [part.value];
        });
      } else if (isString(parts)) {
        children = [parts];
      }
      const assignedAttrs = assign({}, attrs);
      return isString(props.tag) ? vue$1.h(props.tag, assignedAttrs, children) : isObject$1(props.tag) ? vue$1.h(props.tag, assignedAttrs, children) : vue$1.h(vue$1.Fragment, assignedAttrs, children);
    };
  }
  const NUMBER_FORMAT_KEYS = [
    "localeMatcher",
    "style",
    "unit",
    "unitDisplay",
    "currency",
    "currencyDisplay",
    "useGrouping",
    "numberingSystem",
    "minimumIntegerDigits",
    "minimumFractionDigits",
    "maximumFractionDigits",
    "minimumSignificantDigits",
    "maximumSignificantDigits",
    "notation",
    "formatMatcher"
  ];
  const NumberFormat = {
    /* eslint-disable */
    name: "i18n-n",
    props: assign({
      value: {
        type: Number,
        required: true
      },
      format: {
        type: [String, Object]
      }
    }, baseFormatProps),
    /* eslint-enable */
    setup(props, context) {
      const i18n2 = props.i18n || useI18n({ useScope: "parent", __useComponent: true });
      return renderFormatter(props, context, NUMBER_FORMAT_KEYS, (...args) => (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        i18n2[NumberPartsSymbol](...args)
      ));
    }
  };
  const DATETIME_FORMAT_KEYS = [
    "dateStyle",
    "timeStyle",
    "fractionalSecondDigits",
    "calendar",
    "dayPeriod",
    "numberingSystem",
    "localeMatcher",
    "timeZone",
    "hour12",
    "hourCycle",
    "formatMatcher",
    "weekday",
    "era",
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "timeZoneName"
  ];
  const DatetimeFormat = {
    /* eslint-disable */
    name: "i18n-d",
    props: assign({
      value: {
        type: [Number, Date],
        required: true
      },
      format: {
        type: [String, Object]
      }
    }, baseFormatProps),
    /* eslint-enable */
    setup(props, context) {
      const i18n2 = props.i18n || useI18n({ useScope: "parent", __useComponent: true });
      return renderFormatter(props, context, DATETIME_FORMAT_KEYS, (...args) => (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        i18n2[DatetimePartsSymbol](...args)
      ));
    }
  };
  function getComposer$2(i18n2, instance) {
    const i18nInternal = i18n2;
    if (i18n2.mode === "composition") {
      return i18nInternal.__getInstance(instance) || i18n2.global;
    } else {
      const vueI18n = i18nInternal.__getInstance(instance);
      return vueI18n != null ? vueI18n.__composer : i18n2.global.__composer;
    }
  }
  function vTDirective(i18n2) {
    const bind = (el, { instance, value, modifiers }) => {
      if (!instance || !instance.$) {
        throw createI18nError(
          22
          /* UNEXPECTED_ERROR */
        );
      }
      const composer = getComposer$2(i18n2, instance.$);
      if (modifiers.preserve) {
        warn(getWarnMessage(
          7
          /* NOT_SUPPORTED_PRESERVE */
        ));
      }
      const parsedValue = parseValue(value);
      el.textContent = composer.t(...makeParams(parsedValue));
    };
    return {
      beforeMount: bind,
      beforeUpdate: bind
    };
  }
  function parseValue(value) {
    if (isString(value)) {
      return { path: value };
    } else if (isPlainObject(value)) {
      if (!("path" in value)) {
        throw createI18nError(19, "path");
      }
      return value;
    } else {
      throw createI18nError(
        20
        /* INVALID_VALUE */
      );
    }
  }
  function makeParams(value) {
    const { path, locale, args, choice, plural } = value;
    const options2 = {};
    const named = args || {};
    if (isString(locale)) {
      options2.locale = locale;
    }
    if (isNumber(choice)) {
      options2.plural = choice;
    }
    if (isNumber(plural)) {
      options2.plural = plural;
    }
    return [path, named, options2];
  }
  function apply(app, i18n2, ...options2) {
    const pluginOptions = isPlainObject(options2[0]) ? options2[0] : {};
    const useI18nComponentName = !!pluginOptions.useI18nComponentName;
    const globalInstall = isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;
    if (globalInstall && useI18nComponentName) {
      warn(getWarnMessage(11, {
        name: Translation.name
      }));
    }
    if (globalInstall) {
      app.component(!useI18nComponentName ? Translation.name : "i18n", Translation);
      app.component(NumberFormat.name, NumberFormat);
      app.component(DatetimeFormat.name, DatetimeFormat);
    }
    app.directive("t", vTDirective(i18n2));
  }
  const VUE_I18N_COMPONENT_TYPES = "vue-i18n: composer properties";
  let devtoolsApi;
  function enableDevTools(app, i18n2) {
    return __async(this, null, function* () {
      return new Promise((resolve, reject) => {
        try {
          setupDevtoolsPlugin({
            id: "vue-devtools-plugin-vue-i18n",
            label: VueDevToolsLabels[
              "vue-devtools-plugin-vue-i18n"
              /* PLUGIN */
            ],
            packageName: "vue-i18n",
            homepage: "https://vue-i18n.intlify.dev",
            logo: "https://vue-i18n.intlify.dev/vue-i18n-devtools-logo.png",
            componentStateTypes: [VUE_I18N_COMPONENT_TYPES],
            app
          }, (api) => {
            devtoolsApi = api;
            api.on.visitComponentTree(({ componentInstance, treeNode }) => {
              updateComponentTreeTags(componentInstance, treeNode, i18n2);
            });
            api.on.inspectComponent(({ componentInstance, instanceData }) => {
              if (componentInstance.vnode.el.__VUE_I18N__ && instanceData) {
                if (i18n2.mode === "legacy") {
                  if (componentInstance.vnode.el.__VUE_I18N__ !== i18n2.global.__composer) {
                    inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);
                  }
                } else {
                  inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);
                }
              }
            });
            api.addInspector({
              id: "vue-i18n-resource-inspector",
              label: VueDevToolsLabels[
                "vue-i18n-resource-inspector"
                /* CUSTOM_INSPECTOR */
              ],
              icon: "language",
              treeFilterPlaceholder: VueDevToolsPlaceholders[
                "vue-i18n-resource-inspector"
                /* CUSTOM_INSPECTOR */
              ]
            });
            api.on.getInspectorTree((payload) => {
              if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
                registerScope(payload, i18n2);
              }
            });
            api.on.getInspectorState((payload) => {
              if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
                inspectScope(payload, i18n2);
              }
            });
            api.on.editInspectorState((payload) => {
              if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
                editScope(payload, i18n2);
              }
            });
            api.addTimelineLayer({
              id: "vue-i18n-timeline",
              label: VueDevToolsLabels[
                "vue-i18n-timeline"
                /* TIMELINE */
              ],
              color: VueDevToolsTimelineColors[
                "vue-i18n-timeline"
                /* TIMELINE */
              ]
            });
            resolve(true);
          });
        } catch (e2) {
          console.error(e2);
          reject(false);
        }
      });
    });
  }
  function updateComponentTreeTags(instance, treeNode, i18n2) {
    const global2 = i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
    if (instance && instance.vnode.el.__VUE_I18N__) {
      if (instance.vnode.el.__VUE_I18N__ !== global2) {
        const label = instance.type.name || instance.type.displayName || instance.type.__file;
        const tag = {
          label: `i18n (${label} Scope)`,
          textColor: 0,
          backgroundColor: 16764185
        };
        treeNode.tags.push(tag);
      }
    }
  }
  function inspectComposer(instanceData, composer) {
    const type2 = VUE_I18N_COMPONENT_TYPES;
    instanceData.state.push({
      type: type2,
      key: "locale",
      editable: true,
      value: composer.locale.value
    });
    instanceData.state.push({
      type: type2,
      key: "availableLocales",
      editable: false,
      value: composer.availableLocales
    });
    instanceData.state.push({
      type: type2,
      key: "fallbackLocale",
      editable: true,
      value: composer.fallbackLocale.value
    });
    instanceData.state.push({
      type: type2,
      key: "inheritLocale",
      editable: true,
      value: composer.inheritLocale
    });
    instanceData.state.push({
      type: type2,
      key: "messages",
      editable: false,
      value: getLocaleMessageValue(composer.messages.value)
    });
    instanceData.state.push({
      type: type2,
      key: "datetimeFormats",
      editable: false,
      value: composer.datetimeFormats.value
    });
    instanceData.state.push({
      type: type2,
      key: "numberFormats",
      editable: false,
      value: composer.numberFormats.value
    });
  }
  function getLocaleMessageValue(messages2) {
    const value = {};
    Object.keys(messages2).forEach((key2) => {
      const v2 = messages2[key2];
      if (isFunction(v2) && "source" in v2) {
        value[key2] = getMessageFunctionDetails(v2);
      } else if (isObject$1(v2)) {
        value[key2] = getLocaleMessageValue(v2);
      } else {
        value[key2] = v2;
      }
    });
    return value;
  }
  const ESC = {
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "&": "&amp;"
  };
  function escape$1(s2) {
    return s2.replace(/[<>"&]/g, escapeChar);
  }
  function escapeChar(a2) {
    return ESC[a2] || a2;
  }
  function getMessageFunctionDetails(func) {
    const argString = func.source ? `("${escape$1(func.source)}")` : `(?)`;
    return {
      _custom: {
        type: "function",
        display: `<span>ƒ</span> ${argString}`
      }
    };
  }
  function registerScope(payload, i18n2) {
    payload.rootNodes.push({
      id: "global",
      label: "Global Scope"
    });
    const global2 = i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
    for (const [keyInstance, instance] of i18n2.__instances) {
      const composer = i18n2.mode === "composition" ? instance : instance.__composer;
      if (global2 === composer) {
        continue;
      }
      const label = keyInstance.type.name || keyInstance.type.displayName || keyInstance.type.__file;
      payload.rootNodes.push({
        id: composer.id.toString(),
        label: `${label} Scope`
      });
    }
  }
  function getComposer$1(nodeId, i18n2) {
    if (nodeId === "global") {
      return i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
    } else {
      const instance = Array.from(i18n2.__instances.values()).find((item) => item.id.toString() === nodeId);
      if (instance) {
        return i18n2.mode === "composition" ? instance : instance.__composer;
      } else {
        return null;
      }
    }
  }
  function inspectScope(payload, i18n2) {
    const composer = getComposer$1(payload.nodeId, i18n2);
    if (composer) {
      payload.state = makeScopeInspectState(composer);
    }
  }
  function makeScopeInspectState(composer) {
    const state = {};
    const localeType = "Locale related info";
    const localeStates = [
      {
        type: localeType,
        key: "locale",
        editable: true,
        value: composer.locale.value
      },
      {
        type: localeType,
        key: "fallbackLocale",
        editable: true,
        value: composer.fallbackLocale.value
      },
      {
        type: localeType,
        key: "availableLocales",
        editable: false,
        value: composer.availableLocales
      },
      {
        type: localeType,
        key: "inheritLocale",
        editable: true,
        value: composer.inheritLocale
      }
    ];
    state[localeType] = localeStates;
    const localeMessagesType = "Locale messages info";
    const localeMessagesStates = [
      {
        type: localeMessagesType,
        key: "messages",
        editable: false,
        value: getLocaleMessageValue(composer.messages.value)
      }
    ];
    state[localeMessagesType] = localeMessagesStates;
    const datetimeFormatsType = "Datetime formats info";
    const datetimeFormatsStates = [
      {
        type: datetimeFormatsType,
        key: "datetimeFormats",
        editable: false,
        value: composer.datetimeFormats.value
      }
    ];
    state[datetimeFormatsType] = datetimeFormatsStates;
    const numberFormatsType = "Datetime formats info";
    const numberFormatsStates = [
      {
        type: numberFormatsType,
        key: "numberFormats",
        editable: false,
        value: composer.numberFormats.value
      }
    ];
    state[numberFormatsType] = numberFormatsStates;
    return state;
  }
  function addTimelineEvent(event, payload) {
    if (devtoolsApi) {
      let groupId;
      if (payload && "groupId" in payload) {
        groupId = payload.groupId;
        delete payload.groupId;
      }
      devtoolsApi.addTimelineEvent({
        layerId: "vue-i18n-timeline",
        event: {
          title: event,
          groupId,
          time: Date.now(),
          meta: {},
          data: payload || {},
          logType: event === "compile-error" ? "error" : event === "fallback" || event === "missing" ? "warning" : "default"
        }
      });
    }
  }
  function editScope(payload, i18n2) {
    const composer = getComposer$1(payload.nodeId, i18n2);
    if (composer) {
      const [field] = payload.path;
      if (field === "locale" && isString(payload.state.value)) {
        composer.locale.value = payload.state.value;
      } else if (field === "fallbackLocale" && (isString(payload.state.value) || isArray(payload.state.value) || isObject$1(payload.state.value))) {
        composer.fallbackLocale.value = payload.state.value;
      } else if (field === "inheritLocale" && isBoolean(payload.state.value)) {
        composer.inheritLocale = payload.state.value;
      }
    }
  }
  function defineMixin(vuei18n, composer, i18n2) {
    return {
      beforeCreate() {
        const instance = vue$1.getCurrentInstance();
        if (!instance) {
          throw createI18nError(
            22
            /* UNEXPECTED_ERROR */
          );
        }
        const options2 = this.$options;
        if (options2.i18n) {
          const optionsI18n = options2.i18n;
          if (options2.__i18n) {
            optionsI18n.__i18n = options2.__i18n;
          }
          optionsI18n.__root = composer;
          if (this === this.$root) {
            this.$i18n = mergeToRoot(vuei18n, optionsI18n);
          } else {
            optionsI18n.__injectWithOption = true;
            this.$i18n = createVueI18n(optionsI18n);
          }
        } else if (options2.__i18n) {
          if (this === this.$root) {
            this.$i18n = mergeToRoot(vuei18n, options2);
          } else {
            this.$i18n = createVueI18n({
              __i18n: options2.__i18n,
              __injectWithOption: true,
              __root: composer
            });
          }
        } else {
          this.$i18n = vuei18n;
        }
        vuei18n.__onComponentInstanceCreated(this.$i18n);
        i18n2.__setInstance(instance, this.$i18n);
        this.$t = (...args) => this.$i18n.t(...args);
        this.$rt = (...args) => this.$i18n.rt(...args);
        this.$tc = (...args) => this.$i18n.tc(...args);
        this.$te = (key2, locale) => this.$i18n.te(key2, locale);
        this.$d = (...args) => this.$i18n.d(...args);
        this.$n = (...args) => this.$i18n.n(...args);
        this.$tm = (key2) => this.$i18n.tm(key2);
      },
      mounted() {
        {
          this.$el.__VUE_I18N__ = this.$i18n.__composer;
          const emitter = this.__v_emitter = createEmitter();
          const _vueI18n = this.$i18n;
          _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);
          emitter.on("*", addTimelineEvent);
        }
      },
      beforeUnmount() {
        const instance = vue$1.getCurrentInstance();
        if (!instance) {
          throw createI18nError(
            22
            /* UNEXPECTED_ERROR */
          );
        }
        {
          if (this.__v_emitter) {
            this.__v_emitter.off("*", addTimelineEvent);
            delete this.__v_emitter;
          }
          const _vueI18n = this.$i18n;
          _vueI18n.__disableEmitter && _vueI18n.__disableEmitter();
          delete this.$el.__VUE_I18N__;
        }
        delete this.$t;
        delete this.$rt;
        delete this.$tc;
        delete this.$te;
        delete this.$d;
        delete this.$n;
        delete this.$tm;
        i18n2.__deleteInstance(instance);
        delete this.$i18n;
      }
    };
  }
  function mergeToRoot(root2, options2) {
    root2.locale = options2.locale || root2.locale;
    root2.fallbackLocale = options2.fallbackLocale || root2.fallbackLocale;
    root2.missing = options2.missing || root2.missing;
    root2.silentTranslationWarn = options2.silentTranslationWarn || root2.silentFallbackWarn;
    root2.silentFallbackWarn = options2.silentFallbackWarn || root2.silentFallbackWarn;
    root2.formatFallbackMessages = options2.formatFallbackMessages || root2.formatFallbackMessages;
    root2.postTranslation = options2.postTranslation || root2.postTranslation;
    root2.warnHtmlInMessage = options2.warnHtmlInMessage || root2.warnHtmlInMessage;
    root2.escapeParameterHtml = options2.escapeParameterHtml || root2.escapeParameterHtml;
    root2.sync = options2.sync || root2.sync;
    root2.__composer[SetPluralRulesSymbol](options2.pluralizationRules || root2.pluralizationRules);
    const messages2 = getLocaleMessages(root2.locale, {
      messages: options2.messages,
      __i18n: options2.__i18n
    });
    Object.keys(messages2).forEach((locale) => root2.mergeLocaleMessage(locale, messages2[locale]));
    if (options2.datetimeFormats) {
      Object.keys(options2.datetimeFormats).forEach((locale) => root2.mergeDateTimeFormat(locale, options2.datetimeFormats[locale]));
    }
    if (options2.numberFormats) {
      Object.keys(options2.numberFormats).forEach((locale) => root2.mergeNumberFormat(locale, options2.numberFormats[locale]));
    }
    return root2;
  }
  function createI18n(options2 = {}) {
    const __legacyMode = isBoolean(options2.legacy) ? options2.legacy : true;
    const __globalInjection = !!options2.globalInjection;
    const __instances = /* @__PURE__ */ new Map();
    const __global = __legacyMode ? createVueI18n(options2) : createComposer(options2);
    const symbol = makeSymbol("vue-i18n");
    const i18n2 = {
      // mode
      get mode() {
        return __legacyMode ? "legacy" : "composition";
      },
      // install plugin
      install(app, ...options22) {
        return __async(this, null, function* () {
          {
            app.__VUE_I18N__ = i18n2;
          }
          app.__VUE_I18N_SYMBOL__ = symbol;
          app.provide(app.__VUE_I18N_SYMBOL__, i18n2);
          if (!__legacyMode && __globalInjection) {
            injectGlobalFields(app, i18n2.global);
          }
          {
            apply(app, i18n2, ...options22);
          }
          if (__legacyMode) {
            app.mixin(defineMixin(__global, __global.__composer, i18n2));
          }
          {
            const ret = yield enableDevTools(app, i18n2);
            if (!ret) {
              throw createI18nError(
                21
                /* CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN */
              );
            }
            const emitter = createEmitter();
            if (__legacyMode) {
              const _vueI18n = __global;
              _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);
            } else {
              const _composer = __global;
              _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
            }
            emitter.on("*", addTimelineEvent);
          }
        });
      },
      // global accessor
      get global() {
        return __global;
      },
      // @internal
      __instances,
      // @internal
      __getInstance(component) {
        return __instances.get(component) || null;
      },
      // @internal
      __setInstance(component, instance) {
        __instances.set(component, instance);
      },
      // @internal
      __deleteInstance(component) {
        __instances.delete(component);
      }
    };
    return i18n2;
  }
  function useI18n(options2 = {}) {
    const instance = vue$1.getCurrentInstance();
    if (instance == null) {
      throw createI18nError(
        16
        /* MUST_BE_CALL_SETUP_TOP */
      );
    }
    if (!instance.appContext.app.__VUE_I18N_SYMBOL__) {
      throw createI18nError(
        17
        /* NOT_INSLALLED */
      );
    }
    const i18n2 = vue$1.inject(instance.appContext.app.__VUE_I18N_SYMBOL__);
    if (!i18n2) {
      throw createI18nError(
        22
        /* UNEXPECTED_ERROR */
      );
    }
    const global2 = i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
    const scope = isEmptyObject(options2) ? "__i18n" in instance.type ? "local" : "global" : !options2.useScope ? "local" : options2.useScope;
    if (scope === "global") {
      let messages2 = isObject$1(options2.messages) ? options2.messages : {};
      if ("__i18nGlobal" in instance.type) {
        messages2 = getLocaleMessages(global2.locale.value, {
          messages: messages2,
          __i18n: instance.type.__i18nGlobal
        });
      }
      const locales = Object.keys(messages2);
      if (locales.length) {
        locales.forEach((locale) => {
          global2.mergeLocaleMessage(locale, messages2[locale]);
        });
      }
      if (isObject$1(options2.datetimeFormats)) {
        const locales2 = Object.keys(options2.datetimeFormats);
        if (locales2.length) {
          locales2.forEach((locale) => {
            global2.mergeDateTimeFormat(locale, options2.datetimeFormats[locale]);
          });
        }
      }
      if (isObject$1(options2.numberFormats)) {
        const locales2 = Object.keys(options2.numberFormats);
        if (locales2.length) {
          locales2.forEach((locale) => {
            global2.mergeNumberFormat(locale, options2.numberFormats[locale]);
          });
        }
      }
      return global2;
    }
    if (scope === "parent") {
      let composer2 = getComposer(i18n2, instance, options2.__useComponent);
      if (composer2 == null) {
        {
          warn(getWarnMessage(
            12
            /* NOT_FOUND_PARENT_SCOPE */
          ));
        }
        composer2 = global2;
      }
      return composer2;
    }
    if (i18n2.mode === "legacy") {
      throw createI18nError(
        18
        /* NOT_AVAILABLE_IN_LEGACY_MODE */
      );
    }
    const i18nInternal = i18n2;
    let composer = i18nInternal.__getInstance(instance);
    if (composer == null) {
      const type2 = instance.type;
      const composerOptions = assign({}, options2);
      if (type2.__i18n) {
        composerOptions.__i18n = type2.__i18n;
      }
      if (global2) {
        composerOptions.__root = global2;
      }
      composer = createComposer(composerOptions);
      setupLifeCycle(i18nInternal, instance, composer);
      i18nInternal.__setInstance(instance, composer);
    }
    return composer;
  }
  function getComposer(i18n2, target, useComponent = false) {
    let composer = null;
    const root2 = target.root;
    let current = target.parent;
    while (current != null) {
      const i18nInternal = i18n2;
      if (i18n2.mode === "composition") {
        composer = i18nInternal.__getInstance(current);
      } else {
        const vueI18n = i18nInternal.__getInstance(current);
        if (vueI18n != null) {
          composer = vueI18n.__composer;
        }
        if (useComponent && composer && !composer[InejctWithOption]) {
          composer = null;
        }
      }
      if (composer != null) {
        break;
      }
      if (root2 === current) {
        break;
      }
      current = current.parent;
    }
    return composer;
  }
  function setupLifeCycle(i18n2, target, composer) {
    let emitter = null;
    vue$1.onMounted(() => {
      if (target.vnode.el) {
        target.vnode.el.__VUE_I18N__ = composer;
        emitter = createEmitter();
        const _composer = composer;
        _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
        emitter.on("*", addTimelineEvent);
      }
    }, target);
    vue$1.onUnmounted(() => {
      if (target.vnode.el && target.vnode.el.__VUE_I18N__) {
        emitter && emitter.off("*", addTimelineEvent);
        const _composer = composer;
        _composer[DisableEmitter] && _composer[DisableEmitter]();
        delete target.vnode.el.__VUE_I18N__;
      }
      i18n2.__deleteInstance(target);
    }, target);
  }
  const globalExportProps = [
    "locale",
    "fallbackLocale",
    "availableLocales"
  ];
  const globalExportMethods = ["t", "rt", "d", "n", "tm"];
  function injectGlobalFields(app, composer) {
    const i18n2 = /* @__PURE__ */ Object.create(null);
    globalExportProps.forEach((prop) => {
      const desc = Object.getOwnPropertyDescriptor(composer, prop);
      if (!desc) {
        throw createI18nError(
          22
          /* UNEXPECTED_ERROR */
        );
      }
      const wrap = vue$1.isRef(desc.value) ? {
        get() {
          return desc.value.value;
        },
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        set(val) {
          desc.value.value = val;
        }
      } : {
        get() {
          return desc.get && desc.get();
        }
      };
      Object.defineProperty(i18n2, prop, wrap);
    });
    app.config.globalProperties.$i18n = i18n2;
    globalExportMethods.forEach((method) => {
      const desc = Object.getOwnPropertyDescriptor(composer, method);
      if (!desc || !desc.value) {
        throw createI18nError(
          22
          /* UNEXPECTED_ERROR */
        );
      }
      Object.defineProperty(app.config.globalProperties, `$${method}`, desc);
    });
  }
  {
    initFeatureFlags();
  }
  {
    const target = getGlobalThis();
    target.__INTLIFY__ = true;
    setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);
  }
  const zhHans = {
    login: {
      title: "用户登录",
      btnTitle: "登录"
    }
  };
  const en = {
    login: {
      title: "user login",
      btnTitle: "login"
    }
  };
  const zhHant = {
    login: {
      title: "用戶登錄",
      btnTitle: "登錄"
    }
  };
  const storagePrefix = "hx_";
  const getSaveDataKey = (keyName) => {
    if (keyName) {
      return storagePrefix + keyName;
    }
    return keyName;
  };
  const getLocalData = (dataKey) => {
    dataKey = getSaveDataKey(dataKey);
    return uni.getStorageSync(dataKey);
  };
  const messages = {
    en,
    "zh-Hans": zhHans,
    "zh-Hant": zhHant
  };
  const i18n = createI18n({
    legacy: false,
    globalInjection: true,
    locale: getLocalData("lang") == "" ? uni.getLocale() : getLocalData("lang"),
    messages
  });
  function createApp() {
    const app = vue$1.createVueApp(App);
    setupStore(app);
    setupRouter(app);
    app.use(i18n);
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
